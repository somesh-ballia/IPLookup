TOPIC
    PowerShell Community Extensions (version 1.2.0.0)

SHORT DESCRIPTION
    Describes the Windows PowerShell Community Extensions (PSCX) snapin and 
    how to use the contained cmdlets and scripts that ship with PSCX.

LONG DESCRIPTION
    PowerShell Community Extensions is a PowerShell Snapin that provides a
    number of widely useful cmdlets.  PSCX is not affiliated with Microsoft 
    or the Windows PowerShell team at Microsoft.  We are a few (at the moment)
    passionate PowerShell users who wanted more cmdlets than Microsoft was 
    able to deliver in v1 and v2.  So we have taken it upon ourselves to
    create some of those cmdlets and make them available to the community.
    
PROFILE
    PSCX comes with a basic profile script that you can easily install
    and use.  If you didn't install it during PSCX installation, just copy 
    the follow PowerShell command to the prompt and execute it.  
    
    Copy-Item $Pscx:ProfileDir\Profile.ps1 (Split-Path $Profile -Parent)
    
    However if you already have a Profile.ps1 script, you can append the 
    contents of this file to your existing profile.
    
    Get-Content $Pscx:ProfileDir\Profile.ps1 >> $Profile

    This profile script dot sources a number of function and filter scripts 
    that provide a more sophisticated prompt, CD function as well as number of
    useful functions and filters like Get-TypeName (gtn) and Get-PropertyValue
    (gpv).
    
    To examine and/or customize the PSCX profile just execute "Edit-Profile"
    or the alias "ep" at the PowerShell prompt. Or, if you used a host
    specific profile, use (Edit-HostProfile) or the alias "ehp".
    
    If you choose to use the PSCX profile then the following "PROFILE" 
    features will be available in your PowerShell environment.
    
POWERSHELL V2 COMPATIBILITY
    PSCX 1.2 is compatible with Windows PowerShell V2.  There are three PSCX 
    cmdlets that override PowerShell V2 built-in cmdlets with the same names.
    Those cmdlets are:
    
    Get-Random
    Start-Process
    Select-Xml
    
    When you add the PSCX snapin, these three PSCX cmdlets will hide the
    built-in ones.  If you would prefer to use the built-in versions of
    these cmdlets, you can access them as shown below:
    
    Microsoft.PowerShell.Utility\Get-Random
    Microsoft.PowerShell.Management\Start-Process
    Microsoft.PowerShell.Utility\Select-Xml
    
    In order to get the help topic for these built-in cmdlets, use the 
    qualified name when accessing help e.g.:
    
    PS> Get-Help Microsoft.PowerShell.Utility\Select-Xml -Full
    
    Finally, there is an alias defined for the Pscx\Start-Process cmdlet
    that overrides the built-in "start" alias.  If you want to redirect the 
    start alias back to the built-in Start-Process cmdlet, execute the 
    following:
    
    PS> Set-Alias start Microsoft.PowerShell.Management\Start-Process 
        -Option AllScope
    
PREFERENCE VARIABLES
    Previous versions of PSCX used global variables to store preference 
    information and variables created by PSCX functions.  Those have been moved
    to the PSCX settings provider.  PSCX will no longer create any variables
    in your global variable scope.  All PSCX preference settings are under the
    Pscx: drive and can be accessed using the following expression: 
    
    PS> $Pscx:Preferences
    
    All session variables created by various PSCX functions are now stored in
    a hashtable and can be viewed using the following expression:
    
    PS> $Pscx:Session
    
    The rest of the PSCX variables are located at the root level of the PSCX
    drive and can be viewed using the following command:
    
    PS> Get-ChildItem Pscx:
    
    The following preference variables allow you to customize the behavior
    of certain PSCX functions and cmdlets.  
    
    $Pscx:Preferences['DirForce']
        Dir function always specifies -Force. Will cause hidden and system 
        file system items to be returned.
    $Pscx:Preferences['DirHideSystem']
        Dir function filters out files with the system attribute set.  The 
        performance may suffer on high latency networks or in folders with 
        many files.        
    $Pscx:Preferences['FileSizeInUnits']
        Display file sizes in KB, MB, GB multiples.        
    $Pscx:Preferences['SmtpFrom']
        Not defined by default.  Set to something like "j_doe@some.domain.com"
        and you will not need to specify the corresponding parameter on the
        Send-SmtpMail cmdlet.
    $Pscx:Preferences['SmtpHost']
        Not defined by default.  Set to something like "smtp.some.domain.com"
        and you will not need to specify the corresponding parameter on the
        Send-SmtpMail cmdlet.
    $Pscx:Preferences['SmtpPort']
        Not defined by default.  Set to something like 587 if you SMTP server
        doesn't use the default port (25) and you will not need to specify 
        the corresponding parameter on the Send-SmtpMail cmdlet.
    $Pscx:Preferences['TextEditor']
        Defines which editor is started by the EditFile function (alias "e").
        Defaulted to "Notepad".  Change to your favorite text editor.
    $Pscx:Preferences['DotSource/TranscribeSession.ps1']
        Set to true to create a transcript of the entire PowerShell session.

CMDLETS
    To see what cmdlets are provided by PSCX, execute the alias "gcmpscx" at
    the PowerShell prompt.  The current PSCX cmdlets are listed below:

    Get-ADObject
        Search for objects in the Active Directory/Global Catalog. 
        
    Invoke-AdoCommand
        Execute a SQL query against an ADO.NET datasource. 
        
    Get-AdoConnection
        Create an ADO connection to any database supported by .NET on the current 
        machine. You can enumerate available ADO.NET Data Providers with the 
        Get-AdoDataProvider Cmdlet.Data connections to supported providers are 
        constructed using provider-agnostic common parameters like Server, 
        Username, Password etc. 
        
    Get-AdoDataProvider
        List all registered ADO.NET Data Providers on the current machine. 
        
    Invoke-Apartment
        
    Expand-Archive
        Expands a compressed archive file, or ArchiveEntry object, to its 
        constituent file(s). 
        
    Read-Archive
        Enumerates compressed archives such as 7z or rar, emitting ArchiveEntry 
        objects representing records in the archive.Read-Archive is used to list 
        the contents of a compressed archive containing one or more compressed 
        file(s). The format of the file being read can be overriden with the 
        Format parameter, for example to enumerate the contents of a 
        self-extracting archive (EXE).Read-Archive is useful if you wish to 
        perform filtering using standard pipeline Where-Object and/or 
        ForEach-Object cmdlets before piping ArchiveEntry objects to 
        Expand-Archive. 
        
    Resolve-Assembly
        Resolve and optionally import Assemblies by partial name with optional 
        Version. 
        
    Test-Assembly
        Tests whether or not the specified file is a .NET assembly. 
        
    ConvertFrom-Base64
        Converts base64 encoded string to byte array. 
        
    ConvertTo-Base64
        Converts byte array or specified file contents to base64 string. By 
        default, this cmdlet inserts line breaks every 76 characters and outputs 
        the result in a single string. For very large files, you may run into 
        OutOfMemoryExceptions. In this case, use the -Stream parameter which will 
        generate multiple string outputs that, combined together, result in the 
        equivalent base 64 text. 
        
    Export-Bitmap
        Exports a bitmap object to a specified file format. 
        
    Import-Bitmap
        Loads bitmap files. 
        
    Resize-Bitmap
        Resizes bitmaps. 
        
    Format-Byte
        Turns numbers into nicely formatted byte count, using the highest 
        possible unit. 
        
    Write-BZip2
        Create BZIP2 format archive files from pipline or parameter input. 
        
    Get-Clipboard
        Gets data from the clipboard. 
        
    Out-Clipboard
        Formats text via Out-String before placing in clipboard. 
        
    Set-Clipboard
        Puts the specified object into the system clipboard. 
        
    Write-Clipboard
        Writes objects to the clipboard using their string representation, 
        bypassing the default PowerShell formatting. 
        
    Get-DhcpServer
        Gets a list of authorized DHCP servers. 
        
    Get-DomainController
        Gets all domain controllers at the specified scope. 
        
    Get-DriveInfo
        Gets disk usage information on the system's disk drives. 
        
    Get-EnvironmentBlock
        Lists the environment blocks stored on the environment block stack. 
        
    Pop-EnvironmentBlock
        Pops the environment block and restores the state of all environment 
        variables to the values stored in the environment block. 
        
    Push-EnvironmentBlock
        Stores the state of all environment variables into an environment block 
        and pushes that onto the environment block stack. 
        
    Tail-File
        This implentation efficiently tails the cotents of a file by reading 
        lines from the end rather then processing the entire file. This behavior 
        is crucial for efficiently tailing large log files and large log files 
        over a network. You can also specify the Wait parameter to have the 
        cmdlet wait and display new content as it is written to the file. Use 
        Ctrl+C to break out of the wait loop. Note that if an encoding is not 
        specified, the cmdlet will attempt to auto-detect the encoding by reading 
        the first character from the file. If no character haven't been written 
        to the file yet, the cmdlet will default to using Unicode encoding. You 
        can override this behavior by explicitly specifying the encoding via the 
        Encoding parameter. 
        
    Set-FileTime
        Sets a file or folder's created and last accessed/write times. 
        
    Get-FileVersionInfo
        Attempts to get the FileVersionInfo object for the specified path. 
        Usually only executable files include file version information. 
        
    Get-ForegroundWindow
        Returns the hWnd or handle of the window in the foreground on the current 
        desktop. See also Set-ForegroundWindow. 
        
    Set-ForegroundWindow
        Given an hWnd or window handle, brings that window to the foreground. 
        Useful for restoring a window to uppermost after an application which 
        seizes the foreground is invoked. See also Get-ForegroundWindow 
        
    New-GenericObject
        Creates objects from generic types using an easier syntax. This cmdlet is 
        entirely backwards-compatible with the stock New-Object cmdlet also. 
        NOTE: PowerShell V2 users can use PowerShell's built-in New-Object 
        cmdlet. In V2, it also supports an easier syntax for creating generic 
        objects. 
        
    Write-GZip
        Create GNU ZIP (GZIP) format files from pipeline or parameter input. 
        
    New-Hardlink
        Creates filesystem hard links. The hardlink and the target must reside on 
        the same NTFS volume. 
        
    Get-Hash
        Gets the hash value for the specified file or byte array via the 
        pipeline. The default hash algorithm is MD5, although you can specify 
        other algorithms using the -Algorithm parameter (MD5, SHA1, SHA256, 
        SHA384, SHA512 and RIPEMD160). This cmdlet emits a HashInfo object that 
        has properties for Path, Algorithm, HashString and Hash. 
        
    Format-Hex
        The Format-Hex command displays the contents of the specified files in 
        hex format. This cmdlet will also accept pipeline input in the form of a 
        byte stream. The output can be controlled via various parameters to 
        indicate the number of columns that should be displayed or alternatively 
        you can specify the width of the output. The header, address and ASCII 
        portions of the display can also be turned off individually. The offset 
        and count can also be specified via parameters to control where in the 
        input to start displaying and how much to display. 
        
    Ping-Host
        Sends ICMP echo requests to network hosts. 
        
    Resolve-Host
        Resolves host names to IP addresses. 
        
    Get-HttpResource
        Gets an HTTP resource or optionally the headers associated with the 
        resource. 
        
    New-Junction
        Creates NTFS directory junctions. 
        
    ConvertTo-MacOs9LineEnding
        Converts the line endings in the specified file to Mac OS9 and earlier 
        style line endings "\r". You can convert a single file to a new file 
        name. Or you can convert multiple files and specify a destination 
        directory. By default, this cmdlet will overwrite existing files unless 
        you specify -NoClobber. If you want to force the overwrite of read only 
        files use the -Force option. 
        
    Get-MountPoint
        Returns all mount points defined for a specific root path. 
        
    Remove-MountPoint
        Removes a mount point, dismounting the current media if any. If used 
        against the root of a fixed drive, removes the drive letter assignment. 
        
    Receive-MSMQMessage
        Receives the first message available in the queue. This call is 
        synchronous, and blocks the current thread of execution and waits until 
        either a message is available in the queue, or the time-out expires. 
        
    Send-MSMQMessage
        Wraps an object in a Message, and places it onto the defined queue. 
        
    Clear-MSMQueue
        Purges all messages from a queue 
        
    Get-MSMQueue
        Returns a list of all queues matching the filter parameters 
        
    New-MSMQueue
        Creates a new queue object with the defined properties 
        
    Test-MSMQueue
        
    Skip-Object
        Skips the specified number of objects at the beginning of a sequence 
        and/or the end of a sequence. 
        
    Get-OpticalDriveInfo
        Get information on optical drive capabilities on the local machine. 
        
    Add-PathVariable
        Adds the specified paths to the end of the named, path-oriented 
        environment variable by taking the paths specified by the Value parameter 
        and concatenating them into a semi-colon separated string. The paths can 
        be prepended to the environment variable by using the -Prepend switch 
        parameter. 
        
    Get-PathVariable
        Gets the specified path-oriented environment variable and outputs an 
        array of strings. One string for each path. The environment variable 
        string is split a semi-colon and you can option specify that empty paths 
        be removed and unnecessary quotes be removed from each path. 
        
    Set-PathVariable
        Sets the specified path-oriented environment variable by taking the paths 
        specified by the Value parameter and concatenating them into a semi-colon 
        separated string. 
        
    Get-PEHeader
        The PE header for Windows executables includes various useful bits of 
        information including the image base address, subsystem, linker version, 
        etc. 
        
    Get-Privilege
        Lists privileges held by the session and their current status. 
        
    Set-Privilege
        Adjusts privileges associated with a user (identity). 
        
    Start-Process
        Starts a new process. This cmdlet can be used with documents to invoke 
        their default verb or the verb can be specified using the -Verb 
        parameter. You can also specify the -Credential parameter to run the 
        process as a different user. 
        
    Get-PSSnapinHelp
        Generates a XML file containing all documentation data. 
        
    Get-Random
        Returns a random integer in a specified interval, a double-precision 
        number between 0 and 1, or a buffer of random bytes. It may use the 
        cryptographically strong random number generator, if desired. 
        
    Get-ReparsePoint
        Gets NTFS reparse point data. 
        
    Remove-ReparsePoint
        Removes NTFS reparse junctions and symbolic links. 
        
    Test-Scroll
        
    New-Shortcut
        Creates shell shortcuts. 
        
    Get-ShortPath
        Gets the short, 8.3 name for the given path. This cmdlet emits a 
        ShortPathInfo object that contains a ShortPath property as well as a Path 
        property which contains the original long path. 
        
    Send-SmtpMail
        Sends email via specified SMTP server to specified recipients. This 
        cmdlet checks for existence of several preference that if set can make 
        this cmdlet much easier to use. Those preference variables are: * 
        $PscxSmtpHostPreference="smtp.example.net" * $PscxSmtpPortPreference=587 
        * $PscxSmtpFromPreference="john_doe@example.net" 
        
    Join-String
        Joins an array of strings into a single string. 
        
    Split-String
        Splits a single string into an array of strings. 
        
    New-Symlink
        Creates filesystem symbolic links. Requires Microsoft Windows Vista or 
        later. 
        
    Get-TabExpansion
        This command provides access to the PSCX tab expansion engine. If you are 
        not using the PSCX profile, call this command from your TabExpansion 
        function. 
        
    Start-TabExpansion
        Initializes the caches used by Get-TabExpansion. These may include the 
        .NET namespace and type cache, the WMI class cache, and more. 
        
    Scroll-Table
        An object oriented "pager" for PowerShell. Designed as an interactive 
        replacement of Format-Table and Format-List. Press ? or h inside to get 
        keyboard help. 
        
    Write-Tar
        Create Tape Archive (TAR) format files from pipeline or parameter input. 
        
    Disconnect-TerminalSession
        Disconnects a specific remote desktop session on a system running 
        Terminal Services/Remote Desktop 
        
    Get-TerminalSession
        Gets information on terminal services sessions. 
        
    Stop-TerminalSession
        Logs off a specific remote desktop session on a system running Terminal 
        Services/Remote Desktop 
        
    Scroll-Text
        A less-like pager for Windows Powershell. Press ? or h inside to get 
        keyboard help. 
        
    ConvertTo-UnixLineEnding
        Converts the line endings in the specified file to Unix line endings 
        "\n". You can convert a single file to a new file name. Or you can 
        convert multiple files and specify a destination directory. By default, 
        this cmdlet will overwrite existing files unless you specify -NoClobber. 
        If you want to force the overwrite of read only files use the -Force 
        option. 
        
    Test-UserGroupMembership
        Tests whether or not a user (current user by default) is a member of the 
        specified group name. This can be used to test whether a user is admin or 
        elevated to admin. 
        
    Set-VolumeLabel
        Modifies the label shown in Windows Explorer for a particular disk 
        volume. 
        
    ConvertTo-WindowsLineEnding
        Converts the line endings in the specified file to Windows line endings 
        "\r\n". You can convert a single file to a new file name. Or you can 
        convert multiple files and specify a destination directory. By default, 
        this cmdlet will overwrite existing files unless you specify -NoClobber. 
        If you want to force the overwrite of read only files use the -Force 
        option. 
        
    Convert-Xml
        Performs XSLT transforms on the specified XML file or XmlDocument. Use 
        the EnableScript parameter to enable script embedded in the XSLT file. 
        
    Format-Xml
        Pretty print for XML files and XmlDocument objects. 
        
    Select-Xml
        Select-Xml provides an easy way to define namespace prefix to namespace 
        mappings. It handles creating a NamespaceManager and associating that 
        with the XPath queries executed against the supplied XML. 
        
    Test-Xml
        Tests for well formedness and optionally validates against XML Schema. It 
        doesn't handle specifying the targetNamespace. To see validation error 
        messages, specify the -Verbose flag. 
        
    Write-Zip
        Create ZIP format archive files from pipline or parameter input. 
        

PROVIDERS
    AssemblyCache
        PSCX Provider: Provides access to the .NET Global Assembly Cache and the 
        assemblies it contains. The assemblies are exposed as AssemblyName 
        objects. 
        
    DirectoryServices
        PSCX Provider: Provides access to LDAP servers like Active Directory or 
        AD Lightweight Directory Services. 
        
    FeedStore
        PSCX Provider: Provides access to the Internet Explorer 7 RSS feed store. 
        
FILTERS
    Get-PropertyValue (gpv)
        This filter is different from the Select-Object cmdlet in that it doesn't 
        create a wrapper object (PSCustomObject) around the property. If you just 
        want to get the property's value to assign it to another variable this 
        filter will come in handy. If you assigned the result of the 
        Select-Object operation you wouldn't get the property's value. You would 
        get an object that wraps that property and its value. 
        
        Usage:
            $start = Get-History -Id 143 | Get-PropertyValue StartExecutionTime

    Invoke-NullCoalescing (??)
        Similar to the C# ?? operator e.g. name = value ?? String.Empty; where 
        value would be a Nullable<T> in C#. Even though PowerShell doesn't 
        support nullables yet we can approximate this behavior. In the example 
        below, $LogDir will be assigned the value of $env:LogDir if it exists and 
        it's not null, otherwise it get's assigned the result of the second 
        script block (C:\Windows\System32\LogFiles). This behavior is also 
        analogous to Korn shell assignments of this form: LogDir = 
        ${$LogDir:-$WinDir/System32/LogFiles} 
        
        Usage:
            $LogDir = ?? {$env:LogDir} {"$env:windir\System32\LogFiles"}

    Invoke-Ternary (?:)
        Similar to the C# ? : operator e.g. name = (value != null) ? String.Empty 
        : value; 
        
        Usage:
            1..10 | ?: {$_ -gt 5} {"Greater than 5";$_} {"Not greater than 5";$_}

    New-HashObject (nho)
        Use when you need to create a PSObject from a dictionary. The keys-value 
        pairs are turned into NoteProperties. 
        
        Usage:
            $ht = @{fname='John';lname='Doe';age=42}
            $ht | New-HashObject

    Remove-Accessors (ra)
        This filter is intended to be used to filter the Get-Member output to 
        eliminate display of compiler generated accessor methods. 
        
        Usage:
            Get-Process | Get-Member | Remove-Accessors

FUNCTIONS
    cd
        CD function that handles location history via a backward and forward 
        stack mechanism that can be navigated using "cd -" to go backwards in the 
        stack and "cd +" to go forwards in the stack. Executing "cd" without any 
        parameters will display the current stack history. For more information 
        execute "cd -?". 
        
        Usage:
            cd $pscxhome; cd -; cd +; cd -0

    cd-
        Auto-correct function for 'cd -' which changes location backwards in the 
        stack. 
        
    cd..
        Auto-correct function for 'cd ..' which changes location up one level. 
        
    cd...
        Auto-correct function for 'cd ...' which changes location up two levels. 
        
    cd....
        Auto-correct function for 'cd ....' which changes location up three 
        levels. 
        
    cd.....
        Auto-correct function for 'cd .....' which changes location up four 
        levels. 
        
    cd?
        Auto-correct function for 'cd ?' which displays usage information. 
        
    cd\
        Auto-correct function for 'cd \' which changes location to the root of 
        the current drive. 
        
    cd~
        Auto-correct function for 'cd ~' which changes location to your Home dir. 
        
    cd+
        Auto-correct function for 'cd +' which changes location forwards in the 
        stack. 
        
    Collect
        Simple alias for the [System.GC]::Collect() static method. This comes in 
        handy when a .NET object hasn't been disposed and is causing a file 
        system handle to not be released. 
        
        Usage:
            collect

    dird
        Displays just containers (directories). 
        
        Usage:
            dird
            dird -first 5
            dird C:\,$env:windir -combine

    dirs
        Displays folder contents sorted by size descending. 
        
        Usage:
            dirs
            dirs -first 10
            dirs C:\,$Home -combine -f 20

    dirt
        Displays folder contents sorted by time descending. 
        
        Usage:
            dirt
            dirt -first 10
            dirt C:\,$Home -combine -last 20

    dirw
        Displays folder contents in wide format. 
        
        Usage:
            dirw
            dirw C:\,$env:windir -combine

    dirx
        DIRX is an extended dir function that is used by dird, dirs and dirt. It 
        provides shortcuts for displaying files/dirs with particular attributes. 
        For more information execute "dirx -?". 
        
        Usage:
            dirx
            dirx -set Directory,Hidden

    Disable-Breakpoints
        Globally disables breakpoints. NOTE: In PowerShell V2, use the built-in 
        Disable-PSBreakpoint cmdlet instead. 
        
    Edit-File (e)
        Opens up the specified text file in the text editor specified by 
        $Pscx:Preferences['TextEditor'] variable. If not specified or the 
        specified editor isn't found then notepad is used. 
        
        Usage:
            Edit-File foo.txt
            gci -r -filter *.make | edit-file

    Edit-GlobalHostProfile (eghp)
        Opens the machine wide, host specific profile into the editor defined by 
        $PscxTextEditorPreference variable. If not specified or the specified 
        editor isn't found then notepad is used. 
        
    Edit-GlobalProfile (egp)
        Opens the machine wide generic (non-host specific) profile into the 
        editor defined by $PscxTextEditorPreference variable. If not specified or 
        the specified editor isn't found then notepad is used. 
        
    Edit-HostProfile (ehp)
        Opens the user's host specific profile into the editor defined by 
        $PscxTextEditorPreference variable. If not specified or the specified 
        editor isn't found then notepad is used. 
        
    Edit-Profile (ep)
        Opens the user's generic (non-host specific) profile into the editor 
        defined by $Pscx:Preferences['TextEditor'] variable. If not specified or 
        the specified editor isn't found then notepad is used. 
        
    Elevate (su)
        Runs the specified command via an elevated PowerShell instance on Vista. 
        To get debug info, set $DebugPreference temporarily to 'Continue'. 
        
        Usage:
            elevate
            elevate notepad c:\windows\system32\drivers\etc\hosts
            elevate gci c:\windows\temp
            elevate {gci c:\windows\temp | export-clixml tempdir.xml; exit}
            elevate {gci c:\windows\temp | export-clixml tempdir.xml; exit} | 
            %{$_.WaitForExit(5000)} | %{Import-Clixml tempdir.xml}

    Enable-Breakpoints
        Globally enables breakpoints. NOTE: In PowerShell V2, use the built-in 
        Enable-PSBreakpoint cmdlet instead. 
        
    Get-CallStack
        Displays the function invocation callstack. NOTE: In PowerShell V2, use 
        the built-in Get-PSCallStack cmdlet instead. 
        
    Get-ExceptionForHR (hrexc)
        Returns an exception object for a HRESULT code. 
        
        Usage:
            hrexc -2147023293
            Fatal error during installation. (Exception from HRESULT: 0x80070643)

    Get-ExceptionForWin32 (winexc)
        Returns an exception object for a windows error code. 
        
        Usage:
            winexc 5
            Access is denied

    Get-PscxAlias (galpscx)
        Displays all of the aliases created by PSCX. 
        
    Get-PscxCmdlet (gcmpscx)
        Displays all of the cmdlets provided by PSCX. 
        
    Get-PscxDrive (gdrpscx)
        Displays all of the drives created by PSCX. 
        
    Get-TabExpansion
        TabExpansion enhances the built-in tab expansion feature of PowerShell. 
        This function does nothing more than call the PSCX cmdlet 
        Get-TabExpansion. NOTE: This function is invoked by PowerShell. You 
        shouldn't need to invoke it directly. 
        
        Usage:
            Place the following command in your profile if it isn't present:
            . "$Pscx:ProfileDir\TabExpansion.ps1"

    Get-VariableSorted (gvs)
        Behaves just like Get-Variable except that the output is sorted by name. 
        
    Less (pager)
        Provides easy PowerShell access to the external Less-394 paging 
        application. NOTE: Be careful using less with large amounts of output 
        e.g. gci $env:windir\System32 | less. It appears that PowerShell buffers 
        up all the gci output before converting it to strings to pass to less. 
        
        Usage:
            Get-Content foo.txt | less

    Prompt
        Replacement prompt function. See EyeCandy.Vista.ps1 and 
        EyeCandy.WinXP.ps1 for examples on how to configure the prompt function. 
        
    Quote-List (ql)
        Use as a wrist friendly way of creating an array of strings without 
        having to type extraneous commas and quotes: 
        
        Usage:
            ql foo bar baz # equivalent of "foo", "bar", "baz"

    Quote-String (qs)
        Use as a wrist friendly way of create a string from a set of items where 
        each item will be separated by $OFS. Eliminates having to type extraneous 
        quotes: 
        
        Usage:
            qs $a $b $c # equivalent of "$a $b $c"

    Set-Breakpoint
        This function sets a breakpoint in a script that causes a nested prompt 
        to be entered. NOTE: In PowerShell V2, use the built-in Set-PSBreakpoint 
        cmdlet instead. 
        
        Usage:
            Set-Breakpoint

    Skip-Breakpoints
        Skips over specified number of breakpoints before breaking. 
        
        Usage:
            Skip-Breakpoints 5

    Update-Profile (rehash, up)
        Reloads the user's generic (non-host specific) profile. 
        
SCRIPTS
    Add-DirectoryLength
        Calculates the sizes of the specified directory and adds that size as a 
        "Length" NoteProperty to the input DirectoryInfo object. This script is 
        pipeline oriented. 
        
        Usage:
            Get-ChildItem . -recurse | Add-DirectoryLength | sort Length

    Add-ShortPath
        Adds the file or directory's short path as a "ShortPath" NoteProperty to 
        the input DirectoryInfo object. NOTE: This filter requires the PSCX 
        cmdlet Get-ShortPath 
        
        Usage:
            dir | Add-ShortPath | Format-Table ShortPath,FullName

    Connect-VirtualServer
        Invokes URL to Virtual Server's VSWebApp.exe. 
        
    ConvertFrom-WmiDateTime
        Uses the PowerShell ManagementDateTimeConverter to converter between WMI 
        and .NET DateTime. This is a pipeline oriented script. 
        
        Usage:
            gwmi win32_operatingsystem | gpv LastBootUpTime | ConvertFrom-WmiDateTime

    ConvertFrom-WmiTimeSpan
        Uses the PowerShell ManagementDateTimeConverter to converter between WMI 
        and .NET TimeSpan. This is a pipeline oriented script. 
        
    ConvertTo-DmtfDateTime
        Uses the PowerShell ManagementDateTimeConverter to converter between DMTF 
        and .NET DateTime. 
        
    ConvertTo-DmtfTimeInterval
        Uses the PowerShell ManagementDateTimeConverter to converter between DMTF 
        and .NET TimeSpan. 
        
    Export-History (ephy)
        Exports your entire command history to a clixml file. 
        
        Usage:
            Export-History
            Export-History $home\hist.xml

    Get-HelpMatch
        Search the PowerShell help documentation for a given keyword or regular 
        expression. NOTE: In PowerShell V2, the built-in Get-Help cmdlet searches 
        help topic content. 
        
        Usage:
            Get-HelpMatch hashtable
            Get-HelpMatch "(datetime|ticks)" -verbose

    Get-LoremIpsum (lorem)
        Lorem ipsum generator. 
        
        Usage:
            Get-LoremIpsum
            Get-LoremIpsum 20 -Language Spanish

    Get-Manager
        Returns manager of the specified Active Directory user. 
        
        Usage:
            Get-Manager EUROPE:\UserAccounts\jachymko
            Get-Manager EUROPE:\UserAccounts\jachymko -Recurse

    Get-PagedHelp (help, man)
        Pages help using LESS. 
        
    Get-PagedHelpV1
        Pages help using LESS. 
        
    Get-ScreenCss
        Generate CSS header for HTML "screen shot" of the host buffer. 
        
        Usage:
            $css = Get-ScreenCss

    Get-ScreenHtml
        Functions to generate HTML "screen shot" of the host buffer. 
        
        Usage:
            Get-ScreenHtml
            Get-ScreenHtml 25

    Get-TypeName (gtn)
        This filter is handy for finding out what types are being passed down the 
        pipeline quickly. Normally you would use Get-Member to determine this but 
        if you are only interested in the type name this filter produces much 
        less output. Also, since Get-Member accumulates multiple instances of the 
        same type into a single output record for that type, you don't get any 
        sense of how many objects of that type are traversing the pipeline. With 
        this filter, you will see the type name of *every* object passed into it. 
        NOTE: If you specify any arguments then all pipeline input is ignored. 
        This is due to the fact that PowerShell executes the Process function 
        even if there isn't any input so it is impossible to distinguish between 
        $null pipeline input and no pipeline input. 
        
        Usage:
            gcm get-* | Get-TypeName
            Get-TypeName "hi" 1 3.14 $false
            Get-Command get-* | Get-TypeName -FullName

    Get-Uptime
        Gets the operating system's uptime. 
        
    Get-Url
        This script scrapes the web page of the supplied web URL and outputs a 
        string containing the contents of the web page. 
        
        Usage:
            Get-Url http://pscx.codeplex.com/Project/ProjectRss.aspx

    Get-ViewDefinition
        Gets the possible alternate views for the specified object. 
        
        Usage:
            Get-ViewDefinition
            Get-ViewDefinition System.Diagnostics.Process
            Get-ViewDefinition Pscx.Commands.HashInfo $pscxhome\formatdata\*.ps1xml
            Get-Process | Select -first 1 | Get-ViewDefinition | ft Name,Style -groupby SelectedBy

    Import-Assembly
        Imports the specified assembly via LoadWithPartialName or LoadFrom. 
        
        Usage:
            Import-Assembly System.Windows.Forms
            Import-Assembly .\Foo.dll

    Import-History (iphy)
        Imports command history from a clixml file. 
        
        Usage:
            Import-History
            Import-History $home\hist.xml

    Invoke-BatchFile
        Invoke the specified batch file (and parameters), but also propagate any 
        environment variable changes back to the PowerShell environment that 
        called it. 
        
        Usage:
            PS > type foo-that-sets-the-FOO-env-variable.cmd  
            @set FOO=%*  
            echo FOO set to %FOO%.  
            
            PS > $env:FOO  
            
            PS > Invoke-BatchFile "foo-that-sets-the-FOO-env-variable.cmd" Test 
            
            C:\Temp>echo FOO set to Test.  
            FOO set to Test.  
            
            PS > $env:FOO  
            Test

    Out-Speech
        Outputs text as spoken words 
        
        Usage:
            Out-Speech "Hello World"

    Resolve-Error (rver)
        Use when reporting an error or ask a question about a exception you are 
        seeing. This function provides all the information we have about the 
        error message making it easier to diagnose what is actually going on. 
        
    Search-Transcript (srts)
        Searches your session transcript files for the specified pattern. 
        
        Usage:
            Search-Transcript fxml

    Select-History
        Selects individual history info objects or ranges of them. 
        
        Usage:
            Select-History (1..5+8,9+14..20)

    Select-Random
        Selects a random element from the collection either passed as a parameter 
        or input via the pipeline. 
        
        Usage:
            $arr = 1..5; Select-Random $arr
            1..5 | Select-Random

    Set-ReadOnly (sro)
        This filter can be used to change a file's read only status. 
        
        Usage:
            Set-ReadOnly foo.txt
            Set-ReadOnly [a-h]*.txt -passthru
            Get-ChildItem bar[0-9].txt | Set-ReadOnly

    Set-Writable (swr)
        This filter can be used to change a file's read only status. 
        
        Usage:
            Set-Writable foo.txt
            Set-Writable [a-h]*.txt -passthru
            Get-ChildItem bar[0-9].txt | Set-Writable

    Test-Script
        Does a first pass parse of the script looking for syntax errors. Note: 
        This script will not find runtime errors. 
        
        Usage:
            Test-Script foo.ps1
            Get-ChildItem . *.ps1 -r | Where {!(Test-Script $_)}

PROFILE DEFINED ALIASES
    To see what aliases get created by PSCX, execute the alias "galpscx" at
    the PowerShell prompt.  The current PSCX defined aliases are listed below:

    ?:            : alias for Invoke-Ternary filter
    ??            : alias for Invoke-NullCoalescing filter
    cvxml         : alias for Convert-Xml cmdlet
    e             : alias for Edit-File function
    eghp          : alias for Edit-GlobalHostProfile function
    egp           : alias for Edit-GlobalProfile function
    ehp           : alias for Edit-HostProfile function
    ep            : alias for Edit-Profile function
    ephy          : alias for Export-History externalscript
    fhex          : alias for Format-Hex cmdlet
    fxml          : alias for Format-Xml cmdlet
    galpscx       : alias for Get-PscxAlias function
    gcb           : alias for Get-Clipboard cmdlet
    gcmpscx       : alias for Get-PscxCmdlet function
    gdrpscx       : alias for Get-PscxDrive function
    Get-DiskUsage : alias for Get-DriveInfo cmdlet
    gpv           : alias for Get-PropertyValue filter
    gtn           : alias for Get-TypeName externalscript
    gvs           : alias for Get-VariableSorted function
    help          : alias for Get-PagedHelp externalscript
    hrexc         : alias for Get-ExceptionForHR function
    iphy          : alias for Import-History externalscript
    ln            : alias for New-HardLink cmdlet
    lorem         : alias for Get-LoremIpsum externalscript
    mail          : alias for Send-SmtpMail cmdlet
    man           : alias for Get-PagedHelp externalscript
    nho           : alias for New-HashObject filter
    ocb           : alias for Out-Clipboard cmdlet
    pager         : alias for less function
    ping          : alias for Ping-Host cmdlet
    ql            : alias for Quote-List function
    qs            : alias for Quote-String function
    ra            : alias for Remove-Accessors filter
    rehash        : alias for Update-Profile function
    rnd           : alias for Get-Random cmdlet
    rver          : alias for Resolve-Error externalscript
    saps          : alias for Start-Process cmdlet
    skip          : alias for Skip-Object cmdlet
    sls           : alias for Select-String cmdlet
    slxml         : alias for Select-Xml cmdlet
    sro           : alias for Set-ReadOnly externalscript
    srts          : alias for Search-Transcript externalscript
    start         : alias for Start-Process cmdlet
    su            : alias for Elevate function
    swr           : alias for Set-Writable externalscript
    tail          : alias for Tail-File cmdlet
    touch         : alias for Set-FileTime cmdlet
    up            : alias for Update-Profile function
    winexc        : alias for Get-ExceptionForWin32 function

UTILITY APPLICATIONS
    Less-394
        Less-394 is a paging utility that PSCX installs and hooks into the 
        help and man aliases. Using Less to browse help topics is 
        significantly nicer than the default paging in PowerShell. PSCX does
        not however redefine PowerShell's "more" function to use Less because 
        the way PowerShell interops with legacy applications causes all output
        to be rendered to text before it is sent to a legacy application. 
        That makes commands like the following take too much time to generate 
        any output:
        
        PS> gci '$env:windir -rec | more' 
        
    EchoArgs
        This is a simple legacy console application that can be very useful 
        when you are troubleshooting the invocation of a legacy application
        with complex parameters.  The typical problem is that you may think 
        the parameters are being passed literally to the legacy application 
        when in fact PowerShell is parsing the parameters via its standard
        parameter parsing and then passing the result to the legacy 
        application e.g.:
        
        PS> echoargs a /b -c -d:user /e:foo.cs;405
        Arg 0 is <a>
        Arg 1 is </b>
        Arg 2 is <-c>
        Arg 3 is <-d:>
        Arg 4 is <user>
        Arg 5 is </e:foo.cs>

        405
        
        Notice that PowerShell passes '-d:user' as two different 
        parameters.  And since ';' is the statement separator in PowerShell 
        the 405 part of the parameter '/e:foo.cs;405' is not even considered 
        a parameter to the legacy application.  These sort of problems are 
        typically solved by quoting the arguments to legacy applications e.g.:
        
        5> echoargs a /b -c '-d:user' '/e:foo.cs;405'
        Arg 0 is <a>
        Arg 1 is </b>
        Arg 2 is <-c>
        Arg 3 is <-d:user>
        Arg 4 is </e:foo.cs;405>

MISCELLANOUS FEATURES
    An "Open PowerShell Prompt" here Windows Explorer context menu item is
    created for folders and drives.  A PowerShell script icon is also 
    registered for the PS1 file extension as well as a user friendly name
    for the file type - "Windows PowerShell Script".  Note: PSCX does *not*
    change the default verb association.  PS1 files will still open in 
    Notepad when they are double-clicked or invoked with the "Open" or
    "Edit" verbs.

FEEDBACK
    Please submit any feedback, including defects and enhancement requests, 
    to either the discussions forums at:

    http://pscx.codeplex.com/Thread/List.aspx

    or via the Issue Tracker at:

    http://pscx.codeplex.com/WorkItem/List.aspx

    We are also interested in suggestions you may have for cmdlets.  Over
    time, we hope to be able to add some custom providers but that greatly
    depends on recruiting some more developers for the PSCX project.

CONTRIBUTING TO PSCX
    If you are:
    
    A) A software developer with experience programming in C# 
    B) Passionate about Windows PowerShell 
    C) Interested in contributing your coding talents to the project, please
       drop me an email at:
    
       r_keith_hill@hotmail.com.

CREDITS
	This is a list of people and/or groups who have directly or indirectly
	helped by offering significant suggestions, code or linkable binaries
	without which PSCX would be a lesser product. In no particular order:
	
	Wintellect 
	http://www.wintellect.com/
	
	Mike Krueger/John Reilly #ZipLib
	http://www.icsharpcode.net/OpenSource/SharpZipLib/
	
	The nUnit Team
	http://www.nunit.org/
	
	Eugene Sichkar
	http://www.nomad-net.info/
	
SEE ALSO
    For more information, most of the cmdlets have help associated with 
    them e.g.:
    
    PS> help Get-Clipboard
    
    The definitive information on a cmdlet's parameters can be obtained
    by executing:
    
    PS> Get-Command Split-String -syntax
    
    or more tersely:
    
    PS> gcm split-string -syn
