<?xml version="1.0" encoding="utf-8" ?>

<helpItems xmlns="http://msh" schema="maml">

<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Add-History
		</command:name>
		<maml:description>
			<maml:para>Appends entries to the session history.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>add</command:verb>
		<command:noun>history</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Add-History cmdlet adds entries to the end of the session history, that is, the list of commands entered during the current session. You can use Get-History to get the commands and pass them to Add-History, or export the commands to a CSV or XML file, then import the commands, and pass the imported file to Add-History. You can use this cmdlet to add specific commands to the history or to create a single history file that includes commands from more than one session.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Add-History</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Adds the specified HistoryInfo objects to the session history. You can use this parameter to submit a HistoryInfo object from Get-History, Import-Clixml, or Import-Csv to Add-History.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description><maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para></maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Adds the specified HistoryInfo objects to the session history. You can use this parameter to submit a HistoryInfo object from Get-History, Import-Clixml, or Import-Csv to Add-History.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			<dev:type>
				<maml:name>PSObject[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passthru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>HistoryInfo object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						The Add-History cmdlets accepts a HistoryInfo object as input.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						When you use the -passthru parameter, Add-History generates a HistoryInfo object. Otherwise, this cmdlet does not generate any output.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Add-History -detailed&quot;. For technical information, type &quot;Get-Help Add-History -full&quot;.

To specify the commands to add to the history, use the -InputObject parameter. The Add-History command accepts only HistoryInfo objects, such as those generated for each command by Get-History. You cannot pass it a path and file name or a list of commands. 

You can use the -InputObject parameter to pass a file of HistoryInfo objects to Add-History. To do so, export the results of a Get-History command to a file by using Export-Csv or Export-Clixml and then import the file by using Import-Csv or Import-Clixml. You can then pass the file of imported HistoryInfo object to Add-History through a pipeline or in a variable. For details, see the examples.

The file of HistoryInfo objects that you pass to Add-History must include the type information, column headings, and all of the properties of the HistoryInfo objects. If you intend to pass the objects back to Add-History, do not use the NoTypeInformation parameter of Export-Csv and do not delete the type information, column headings, or any fields in the file. 

The session history is a list of the commands entered during the session, along with the ID, which represents the order of execution, the status, and start and end times of the command. As you enter each command, Windows PowerShell adds it to the history so that you can reuse it. 
For more information about the session history, type &quot;get-help about_history&quot;.

You cannot clear the session history except by ending the Windows PowerShell session.

To edit the session history, export the session to a CSV or XML file, edit the file, import the file, and use Add-History to append it to the current session history.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-history | export-csv c:\testing\history.csv

C:\PS&gt;import-csv history.csv | add-history</dev:code>
  			<dev:remarks>
				<maml:para>These commands add the commands typed in one Windows PowerShell session to the history of a different Windows PowerShell session. The first command gets objects representing the commands in the history and exports them to the History.csv file. The second command is typed at the command line of a different session. It uses the Import-Csv cmdlet to import the objects in the history-csv file. The pipeline operator passes the objects to the Add-History cmdlet, which adds the objects representing the commands in the History.csv file to the current session history.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>import-clixml c:\temp\history.xml | add-history -passthru | invoke-history</dev:code>
  			<dev:remarks>
				<maml:para>This command imports commands in the History.xml file, adds them to the current session history, and then executes the commands. The first command uses the Import-Clixml command to import a command history that was exported to the History.xml file. The pipeline operator (|) passes the commands to the Add-History parameter, which adds the commands to the current session history. The Passthru parameter passes the objects representing the added commands to the Invoke-History cmdlet, which executes the commands.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-history id 5 -count 5 | add-history</dev:code>
  			<dev:remarks>
				<maml:para>This command adds the first five commands in the history to the end of the history list. It uses the Get-History cmdlet to get the five commands ending in command 5. The pipeline operator (|) passes them to the Add-History cmdlet, which appends them to the current history. The Add-History command does not include any parameters, but Windows PowerShell associates the objects passed through the pipeline with the InputObject parameter.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = import-csv c:\testing\history.csv

C:\PS&gt;add-history -inputobject $a -passthru</dev:code>
  			<dev:remarks>
				<maml:para>These commands add the commands in the History.csv file to the current session history. The first command uses the Import-Csv cmdlet to import the commands in the History.csv file and store its contents in the variable $a. The second command uses the Add-History cmdlet to add the commands from History.csv to the current session history. It uses the InputObject parameter to specify the $a variable and the Passthru parameter to generate an object to display at the command line. Without the Passthru parameter, Add-History does not generate any output to display.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>add-history -inputobject (import-clixml c:\temp\history01.xml)</dev:code>
  			<dev:remarks>
				<maml:para>This command adds the commands in the History01.xml file to the current session history. It uses the InputObject parameter to pass the results of the command in parentheses to Add-History. The command in parentheses, which is executed first, imports the History01.xml file into Windows PowerShell. Add-History then adds the commands in the file to the session history.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-History</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-History</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Add-PSSnapin
		</command:name>
		<maml:description>
			<maml:para>Adds one or more Windows PowerShell snap-ins to the current console.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>add</command:verb>
		<command:noun>pssnapin</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Add-PSSnapIn cmdlet adds one or more Windows PowerShell snap-ins to the current console. After the snap-ins are added, you can use the cmdlets and providers that the snap-in supports in the current console.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Add-PSSnapin</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>The unique name of each PSSnapIn to add to the current console; for example Microsoft.Exchange or MyCompany.User. The parameter name is optional.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description><maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para></maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>The unique name of each PSSnapIn to add to the current console; for example Microsoft.Exchange or MyCompany.User. The parameter name is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>PSSnapInInfo.Name</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						The namespace-qualified name of the PSSnapIn to add; for example Microsoft.Exchange or MyCompany.User.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>PSSnapIn info object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The PSSnapIn info Object.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Add-PSSnapIn -detailed&quot;. For technical information, type &quot;Get-Help Add-PSSnapIn -full&quot;.

For detailed information about snap-ins in Windows PowerShell, type &quot;get-help about_pssnapins&quot;. For help with creating a Windows PowerShell snap-in, see the Windows PowerShell SDK.

Add-PSSnapin adds the snap-in only to the current console. To save the current console (with the added snap-in), use Export-Console. Otherwise, the snap-in will not be available if you use the console again.

You can add any Windows PowerShell snap-in that has been registered by using the .NET Framework install utility. For details, see the Windows PowerShell SDK. To get a list of snap-ins that are registered on your computer, type &quot;Get-PsSnapin -registered&quot;. 

Before adding a snap-in, Add-PSSnapIn checks the version of the snap-in to verify that it is compatible with the shell. If the snap-in fails the version check, Windows PowerShell reports an error. 

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Add-PSSnapIn by its built-in alias, &quot;asnp&quot;. For more information, type &quot;get-help About_Alias&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>add-PSSnapIn Microsoft.Exchange,Microsoft.Windows.AD</dev:code>
  			<dev:remarks>
				<maml:para>This command adds the Microsoft Exchange and Microsoft Active Directory Directory Services snap-ins to the current console.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-pssnapin -registered | add-pssnapin -passthru</dev:code>
  			<dev:remarks>
				<maml:para>This command adds all of the registered Windows PowerShell snap-ins to the console. It uses the Get-PsSnapin cmdlet with the Registered parameter to get objects representing each of the registered snap-ins. The pipeline operator (|) passes the result to Add-PsSnapin, which adds them to the conole. The Passthru parameter passes the object down the pipeline. Because there are no more command in the pipeline, the object are displayed in the console.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-PSSnapIn</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-PSSnapIn</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Console</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Export-Console
		</command:name>
		<maml:description>
			<maml:para>Exports the configuration of the current console to a file so that you can reuse or share it.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>export</command:verb>
		<command:noun>console</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Export-Console cmdlet exports the configuration of the current console to a Windows PowerShell console file (.psc1). You can use this cmdlet to save a console configuration that you changed by changing its properties or by adding a Windows PowerShell snap-in to the console.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Export-Console</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description><maml:para>Specifies a path and file name for the console file (*.psc1). Enter a path (optional) and name. Wildcards are not permitted.

If you type only a file name, Export-Console creates a file with that name and the &quot;.psc1&quot; file name extension in the current directory.

This parameter is required unless you have exported a console file during the current session. It is also required when you use the NoClobber parameter to prevent the current console file from being overwritten.

If you omit this parameter, Export-Console overwrites (replaces the content of) the console file that was used most recently during this session.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. Force allows you to overwrite the data in a console configuration file without warning, even if the file has the read-only attribute. The read-only attribute is changed and is not reset when the command completes.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>noClobber</maml:name>
				<maml:description><maml:para>Will not overwrite (replace the contents) of an existing file. By default, if a file exists in the specified path, Export-Console overwrites the file without warning.</maml:para></maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies a path and file name for the console file (*.psc1). Enter a path (optional) and name. Wildcards are not permitted.

If you type only a file name, Export-Console creates a file with that name and the &quot;.psc1&quot; file name extension in the current directory.

This parameter is required unless you have exported a console file during the current session. It is also required when you use the NoClobber parameter to prevent the current console file from being overwritten.

If you omit this parameter, Export-Console overwrites (replaces the content of) the console file that was used most recently during this session.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. Force allows you to overwrite the data in a console configuration file without warning, even if the file has the read-only attribute. The read-only attribute is changed and is not reset when the command completes.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>noClobber</maml:name>
			<maml:description>
				<maml:para>Will not overwrite (replace the contents) of an existing file. By default, if a file exists in the specified path, Export-Console overwrites the file without warning.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>none</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>FileInfo object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						File Info Object.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Export-Console -detailed&quot;. For technical information, type &quot;Get-Help Export-Console -full&quot;.

The name of the current console file is automatically stored in the $ConsoleFilename variable. If the variable has a no value, the current console is the default console for Windows PowerShell.

To use a Windows PowerShell console file in a new session, use the following syntax to start Windows Powershell:
&quot;powershell.exe -PsConsoleFile &lt;ConsoleFile&gt;.psc1&quot;.

For information about the Windows PowerShell snap-ins that you can add to your console (and use Export-Console to save), type &quot;Get-Help About_PSSnapins&quot;. 

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>export-console -path $pshome\Consoles\ConsoleS1.psc1 </dev:code>
  			<dev:remarks>
				<maml:para>This command exports the current console configuration to the ConsoleS1.psc1 file in the Consoles subdirectory of the directory stored in $pshome. By default, $pshome stores the path to the Windows PowerShell installation directory. To see the value of this variable on your computer, type &quot;$pshome&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>export-console</dev:code>
  			<dev:remarks>
				<maml:para>This command exports the current console configuration to the Windows PowerShell console file most recently used during the current session, where it overwrites the console configuration that was in the file. 

If you haven't exported a console file during the current session, you are prompted for permission to continue and then prompted for a file name.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>add-pssnapin NewPSSnapIn

export-console -path NewPsSnapinConsole.psc1

powershell.exe -PsConsoleFile NewPsSnapinConsole.psc1</dev:code>
  			<dev:remarks>
				<maml:para>These commands add the NewPsSnapin Windows PowerShell snapin to the current console, export the current console, and then start a Windows PowerShell session with the new console.

The first command uses the Add-PsSnapin cmdlet to add the NewPsSnapin snapin to the current console. You can only add snapins that are registered in your system.

The second command exports the console that includes the snap-in to the NewPsSnapinConsole.psc1 file.

The third command starts Windows PowerShell with the NewPsSnapinConsole.psc1 file.

When you add a Windows PowerShell snap-in to the console, the providers and cmdlets that the snap-in supports are available immediately. You don't need to start a new session. However, because the snap-in is added only to the current console, new sessions will not include the snap-in unless you export the current console and then specify that console when you open Windows PowerShell again.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>export-console -path Console01</dev:code>
  			<dev:remarks>
				<maml:para>This command exports the current console configuration to the Console01.psc1 file in the current directory. This command uses the Path parameter to specify a name for the console file. By default, Export-Console appends the .psc1 file name extension and saves the file in the current directory.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>export-console MyConsole

C:PS&gt;$ConsoleFilename</dev:code>
  			<dev:remarks>
				<maml:para>These commands export the current console configuration to the MyConsole.psc1 file and then use the $ConsoleFilename variable to find the current console.

The first command uses Export-Console to export the current console configuration to the MyConsole.psc1 file in the current directory. It uses the Path parameter, but omits the optional parameter name. 

The second command uses the $ConsoleFilename variable to find the name of the current console file. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>C:\Test\MyConsole.psc1</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Add-PSSnapIn</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSSnapIn</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-PSSnapIn</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   ForEach-Object
		</command:name>
		<maml:description>
			<maml:para>Performs an operation against each of a set of input objects.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>foreach</command:verb>
		<command:noun>object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Performs an operation against each of a set of input objects. The input objects can be piped to the cmdlet or specified by using the InputObject parameter.
The operation to perform is described within a script block which is provided to the cmdlet as the value of the Process parameter. The script block can contain any Windows PowerShell script. 
Within the script block, the current input object is represented by the $_ variable.
In addition to the script block that describes the operations to be carried out on each input object, you can provide two additional script blocks. One, specified as the value of the Begin parameter, runs before the first input object is processed. The other, specified as the value of the End parameter, runs after the last input object is processed. 
The results of the evaluation of all the script blocks, included the ones specified with Begin and End, are passed down the pipeline.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>ForEach-Object</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>process</maml:name>
				<maml:description><maml:para>Specifies the script block that is applied to each incoming object.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">ScriptBlock[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Accepts an object that the script block specified in the process parameter will act upon. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>begin</maml:name>
				<maml:description><maml:para>Specifies a script block to run before processing any input objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>end</maml:name>
				<maml:description><maml:para>Specifies a script block to run after processing all input objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>process</maml:name>
			<maml:description>
				<maml:para>Specifies the script block that is applied to each incoming object.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ScriptBlock[]</command:parameterValue>
			<dev:type>
				<maml:name>ScriptBlock[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Accepts an object that the script block specified in the process parameter will act upon. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>begin</maml:name>
			<maml:description>
				<maml:para>Specifies a script block to run before processing any input objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			<dev:type>
				<maml:name>scriptblock</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>end</maml:name>
			<maml:description>
				<maml:para>Specifies a script block to run after processing all input objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			<dev:type>
				<maml:name>scriptblock</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Any object or object input from the pipeline or as the value of the InputObject parameter.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The results output from the specified Begin, End and Process script blocks when run against the specified input objects.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help ForEach-Object -detailed&quot;. For technical information, type &quot;Get-Help ForEach-Object -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>30000,56798,12432 | foreach-object -process {$_/1024}</dev:code>
  			<dev:remarks>
				<maml:para>This command accepts an array of integers, divides each one of them by 1024, and displays the results.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem C:\ | foreach-object -process { $_.length / 1024 }</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves the files and directories in the root of the C: drive and returns and displays the size of each of them. The zeroes represent directories where no file size was available.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$events = get-eventlog -logname system -newest 1000
$events |
foreach-object -begin {get-date}
-process {out-file -filepath events.txt -append -inputobject $_.message}
-end {get-date}</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves the 1000 most recent events from the system log and stores them in the $events variable. It then pipes the events to the ForEach-Object cmdlet. The Begin parameter displays the current date and time. Next, the Process parameter uses the Out-File cmdlet to create a text file named events.txt and stores the message property of each of the events in that file. Last, the End parameter is used to display the date and time after all of the processing has completed.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-itemproperty -path hkcu:\Network\* |
 foreach-object {set-itemproperty -path $_.pspath -name RemotePath 
-value $_.RemotePath.ToUpper();}</dev:code>
  			<dev:remarks>
				<maml:para>This command updates a set of registry entries by using the Set-ItemProperty cmdlet. The registry entries specify the UNC path of mapped network drives on the computer. This command changes the characters in the UNC path to uppercase. In a real scenario, you might need to change the server name or another component of the path. 

Because the Set-ItemProperty cmdlet acts on a single property, the ForEach-Object cmdlet is used to call Set-ItemProperty for each property (registry entries in this case) being changed. The name of the registry entries is RemotePath and they are located in HKCU\Network\&lt;mapped drive letter&gt;. The entries are retrieved by using the Get-ItemProperty cmdlet and piped as input to ForEach-Object. In the call to Set-ItemProperty within ForEach-Object, the $_ variable holds a reference to the current registry entry being processed. The value of the PSPath property is the registry key containing the current entry. The RemotePath property is of type System.String, which includes the ToUpper method used to change the value of the entry to uppercase.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Where-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Compare-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Group-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Sort-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Command
		</command:name>
		<maml:description>
			<maml:para>Gets basic information about cmdlets and about other elements of Windows PowerShell commands.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>command</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-Command cmdlet gets basic information about cmdlets and other elements of Windows PowerShell commands, such as files, functions, and Windows PowerShell providers.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Command</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>argumentList</maml:name>
				<maml:description>
					<maml:para>Gets information about a cmdlet when it is used with the specified  parameters (&quot;arguments&quot;), such as a path. To detect parameters that are added to a cmdlet dynamically, replace &lt;Object[]&gt;
with parameters that are specific to a Windows PowerShell provider or cmdlet, for example, &quot;HKML\Software&quot; or &quot;cert:\my&quot;.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>verb</maml:name>
				<maml:description>
					<maml:para>Gets information about cmdlets with names that include the specified verb. &lt;String&gt; represents one or more verbs or verb patterns, such as &quot;remove&quot; or *et&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>noun</maml:name>
				<maml:description>
					<maml:para>Gets cmdlets with names that include the specified noun. &lt;String&gt; represents one or more nouns or noun patterns, such as &quot;process&quot; or &quot;*item*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>totalCount</maml:name>
				<maml:description>
					<maml:para>Determines how many command elements Windows PowerShell retrieves.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>syntax</maml:name>
				<maml:description>
					<maml:para>Gets only specified data about the command element.
           * For aliases, retrieves the standard name.
           * For cmdlets, retrieves the syntax.
           * For functions and filters, retrieves the function definition.
           * For scripts and applications (files), retrieves the path and filename.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>pSSnapIn</maml:name>
				<maml:description>
					<maml:para>Get the cmdlets supported by the specified Windows PowerShell snap-in. For more information, type &quot;get-help about-PSSnapins&quot;.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Command</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Gets information only about the cmdlets or command elements with the specified name. &lt;String&gt; represents all or part of the name of the cmdlet or command element. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>argumentList</maml:name>
				<maml:description>
					<maml:para>Gets information about a cmdlet when it is used with the specified  parameters (&quot;arguments&quot;), such as a path. To detect parameters that are added to a cmdlet dynamically, replace &lt;Object[]&gt;
with parameters that are specific to a Windows PowerShell provider or cmdlet, for example, &quot;HKML\Software&quot; or &quot;cert:\my&quot;.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>commandType</maml:name>
				<maml:description>
					<maml:para>Gets only the specified types of command objects. Valid values for &lt;CommandTypes&gt; are:
          Alias                  ExternalScript
          All                     Filter  
          Application          Function
          Cmdlet (default)   Script

&quot;Application&quot; represents all non-PowerShell files on the system that you can run within PowerShell, including .txt, .exe. and .dll files in the Windows PowerShell path. 

&quot;Filter&quot; and &quot;Function&quot; represent all Windows PowerShell functions.

You can use CommandType or its alias, Type.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Alias</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Function</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Filter</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Cmdlet</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ExternalScript</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Application</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Script</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>totalCount</maml:name>
				<maml:description>
					<maml:para>Determines how many command elements Windows PowerShell retrieves.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>syntax</maml:name>
				<maml:description>
					<maml:para>Gets only specified data about the command element.
           * For aliases, retrieves the standard name.
           * For cmdlets, retrieves the syntax.
           * For functions and filters, retrieves the function definition.
           * For scripts and applications (files), retrieves the path and filename.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Gets information only about the cmdlets or command elements with the specified name. &lt;String&gt; represents all or part of the name of the cmdlet or command element. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>verb</maml:name>
			<maml:description>
				<maml:para>Gets information about cmdlets with names that include the specified verb. &lt;String&gt; represents one or more verbs or verb patterns, such as &quot;remove&quot; or *et&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>noun</maml:name>
			<maml:description>
				<maml:para>Gets cmdlets with names that include the specified noun. &lt;String&gt; represents one or more nouns or noun patterns, such as &quot;process&quot; or &quot;*item*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>commandType</maml:name>
			<maml:description>
				<maml:para>Gets only the specified types of command objects. Valid values for &lt;CommandTypes&gt; are:
          Alias                  ExternalScript
          All                     Filter  
          Application          Function
          Cmdlet (default)   Script

&quot;Application&quot; represents all non-PowerShell files on the system that you can run within PowerShell, including .txt, .exe. and .dll files in the Windows PowerShell path. 

&quot;Filter&quot; and &quot;Function&quot; represent all Windows PowerShell functions.

You can use CommandType or its alias, Type.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="true">CommandTypes</command:parameterValue>
			<dev:type>
				<maml:name>CommandTypes</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Cmdlet</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Alias</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Function</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Filter</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Cmdlet</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ExternalScript</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Application</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Script</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>All</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>totalCount</maml:name>
			<maml:description>
				<maml:para>Determines how many command elements Windows PowerShell retrieves.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>-1 (all)</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>syntax</maml:name>
			<maml:description>
				<maml:para>Gets only specified data about the command element.
           * For aliases, retrieves the standard name.
           * For cmdlets, retrieves the syntax.
           * For functions and filters, retrieves the function definition.
           * For scripts and applications (files), retrieves the path and filename.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>argumentList</maml:name>
			<maml:description>
				<maml:para>Gets information about a cmdlet when it is used with the specified  parameters (&quot;arguments&quot;), such as a path. To detect parameters that are added to a cmdlet dynamically, replace &lt;Object[]&gt;
with parameters that are specific to a Windows PowerShell provider or cmdlet, for example, &quot;HKML\Software&quot; or &quot;cert:\my&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>pSSnapIn</maml:name>
			<maml:description>
				<maml:para>Get the cmdlets supported by the specified Windows PowerShell snap-in. For more information, type &quot;get-help about-PSSnapins&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>unspecified</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Takes shell objects with the &quot;Name&quot;, &quot;Command&quot;, and &quot;Verb&quot; noun-property specified or a string object.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Object </maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The type of object returned depends on the type of command element retrieved. For example, Get-Command on a cmdlet, retrieves a CmdletInfo object, while Get-Command on a DLL retrieves an ApplicationInfo object.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-Command -detailed&quot;. For technical information, type &quot;Get-Help Get-Command -full&quot;.

Without parameters, &quot;Get-Command&quot; gets information about the Windows PowerShell cmdlets. Use the parameters to qualify the elements retrieved.

By default, Get-Command returns elements in the order that it discovers them. The discovery order is also the order in which the items are run when a run command is ambiguous. For example, if the discovery order of items is notepad.exe, notepad.cmd, and notepad.ps1, and you run &quot;Notepad,&quot; the system runs Notepad.exe. The discovery order often provides valuable information. If you need to have the data in a different order, use the Sort-Object cmdlet to sort it.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Get-Command by its built-in alias, &quot;gcm&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-command</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves information about all of the Windows PowerShell cmdlets. The default display lists the command type (&quot;Cmdlet&quot;), the name of the cmdlet, and the syntax.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-command -verb set | format-list</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves information about all of the cmdlets with the verb &quot;set,&quot; and displays some of that information in a list. The list format includes fields that are omitted from the table display, including the complete syntax. To display all fields (all properties of the object), type &quot;get-command -verb set | format list *&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-command | sort-object noun | format-table -group noun</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves all of the cmdlets, sorts them alphabetically     by the noun in the cmdlet name, and then displays them in noun-based
groups. This display can help you find the cmdlets for a task. 

By default, Get-Command displays items in the order in which the system discovers them, which is also the order in which they are selected to run when a run command is ambiguous.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-command -pssnapin Microsoft.PowerShell.Security</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves information about the cmdlets in the Microsoft.PowerShell.Security PSSnapin.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-command get-childitem -ArgumentList cert: | format-list</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves information about the Get-Childitem cmdlet when Get-Childitem is used with the Windows PowerShell Certificate provider. When you compare the syntax displayed in the output with the syntax that is displayed when you omit the ArgumentList parameter, you'll see that the Certificate provider dynamically adds a parameter, CodeSigningCert, to the Get-Childitem cmdlet.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>(get-command get-childitem -ArgumentList cert:).parametersets[0].parameters | where-object { $_.IsDynamic }</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves only parameters that are added to the Get-Childitem cmdlet dynamically when it is used with the Windows PowerShell Certificate provider. This is an alternative to the method used in the previous example.

In this command, the &quot;get-command get-childitem -ArgumentList cert:&quot; is processed first. It requests information from Get-Command about the Get-Childitem cmdlet when it is used with the Certificate provider. The &quot;.parametersets[0]&quot; selects the first parameter set (set 0) of &quot;get-childitem -argumentList cert:&quot; and &quot;.parameters&quot; selects the parameters in that parameter set. The resulting parameters are piped to the Where-Object cmdlet to test each parameter (&quot;$_.&quot;) by using the IsDynamic property. To find the properties of the objects in a command, use Get-Member.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-command *</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves information about all of the elements available to Windows PowerShell, including files, functions, aliases, and cmdlets.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Help</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSDrive</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Member</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Help
		</command:name>
		<maml:description>
			<maml:para>Displays information about Windows PowerShell cmdlets and concepts.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>help</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-Help cmdlet displays information about Windows PowerShell cmdlets and concepts. You can also use &quot;Help {&lt;cmdlet name&gt; | &lt;topic-name&gt;&quot; or &quot;&lt;cmdlet-name&gt; /?&quot;. &quot;Help&quot; displays the help topics one page at a time. The &quot;/?&quot; displays help for cmdlets on a single page.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Help</maml:name>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Requests help about the specified cmdlet or conceptual topic. &lt;String&gt; represents a cmdlet name, such as Get-Member, a conceptual topic, such as &quot;About_Object&quot;, or an alias, such as &quot;ls&quot;. Wildcards are permitted. The parameter name (&quot;-Name&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>component</maml:name>
				<maml:description>
					<maml:para>Displays a list of cmdlets with the specified component value, such as &quot;Exchange.&quot; The core cmdlets do not have a value for the component property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>functionality</maml:name>
				<maml:description>
					<maml:para>Displays help for cmdlets with the specified functionality. The core cmdlets do not have a value for the functionality property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>role</maml:name>
				<maml:description>
					<maml:para>Displays help customized for the specified user role. &lt;String&gt; represents the role that the user plays in an organization. Some cmdlets display different text in their help files based on the value of this parameter. This parameter has no effect on help for the core cmdlets.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>category</maml:name>
				<maml:description>
					<maml:para>Displays help for items in the specified category.
Valid values for &lt;String&gt; are:
   * Alias:    Help for a cmdlet by alias name.
   * Cmdlet:  Help for a cmdlet by cmdlet name.
   * HelpFile: Help about concepts (&quot;About_&quot; topics.)</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>full</maml:name>
				<maml:description>
					<maml:para>Displays the entire help file for a cmdlet, including technical information about the parameters. This parameter has no effect on displays of conceptual (&quot;About_&quot;) help.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Help</maml:name>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Requests help about the specified cmdlet or conceptual topic. &lt;String&gt; represents a cmdlet name, such as Get-Member, a conceptual topic, such as &quot;About_Object&quot;, or an alias, such as &quot;ls&quot;. Wildcards are permitted. The parameter name (&quot;-Name&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>component</maml:name>
				<maml:description>
					<maml:para>Displays a list of cmdlets with the specified component value, such as &quot;Exchange.&quot; The core cmdlets do not have a value for the component property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>functionality</maml:name>
				<maml:description>
					<maml:para>Displays help for cmdlets with the specified functionality. The core cmdlets do not have a value for the functionality property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>role</maml:name>
				<maml:description>
					<maml:para>Displays help customized for the specified user role. &lt;String&gt; represents the role that the user plays in an organization. Some cmdlets display different text in their help files based on the value of this parameter. This parameter has no effect on help for the core cmdlets.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>category</maml:name>
				<maml:description>
					<maml:para>Displays help for items in the specified category.
Valid values for &lt;String&gt; are:
   * Alias:    Help for a cmdlet by alias name.
   * Cmdlet:  Help for a cmdlet by cmdlet name.
   * HelpFile: Help about concepts (&quot;About_&quot; topics.)</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>detailed</maml:name>
				<maml:description>
					<maml:para>Displays additional information about a cmdlet, including descriptions of the parameters and examples of using the cmdlet. This parameter has no effect on displays of conceptual (&quot;About_&quot;) help.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Help</maml:name>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Requests help about the specified cmdlet or conceptual topic. &lt;String&gt; represents a cmdlet name, such as Get-Member, a conceptual topic, such as &quot;About_Object&quot;, or an alias, such as &quot;ls&quot;. Wildcards are permitted. The parameter name (&quot;-Name&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>component</maml:name>
				<maml:description>
					<maml:para>Displays a list of cmdlets with the specified component value, such as &quot;Exchange.&quot; The core cmdlets do not have a value for the component property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>functionality</maml:name>
				<maml:description>
					<maml:para>Displays help for cmdlets with the specified functionality. The core cmdlets do not have a value for the functionality property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>role</maml:name>
				<maml:description>
					<maml:para>Displays help customized for the specified user role. &lt;String&gt; represents the role that the user plays in an organization. Some cmdlets display different text in their help files based on the value of this parameter. This parameter has no effect on help for the core cmdlets.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>category</maml:name>
				<maml:description>
					<maml:para>Displays help for items in the specified category.
Valid values for &lt;String&gt; are:
   * Alias:    Help for a cmdlet by alias name.
   * Cmdlet:  Help for a cmdlet by cmdlet name.
   * HelpFile: Help about concepts (&quot;About_&quot; topics.)</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>examples</maml:name>
				<maml:description>
					<maml:para>Displays examples of using the cmdlet. These examples are included the Detailed and Full views of help. This view also includes the name of the cmdlet and its brief description. To display only the examples, type &quot;(get-help &lt;cmdlet-name&gt;).examples&quot;.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Help</maml:name>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Requests help about the specified cmdlet or conceptual topic. &lt;String&gt; represents a cmdlet name, such as Get-Member, a conceptual topic, such as &quot;About_Object&quot;, or an alias, such as &quot;ls&quot;. Wildcards are permitted. The parameter name (&quot;-Name&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>component</maml:name>
				<maml:description>
					<maml:para>Displays a list of cmdlets with the specified component value, such as &quot;Exchange.&quot; The core cmdlets do not have a value for the component property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>functionality</maml:name>
				<maml:description>
					<maml:para>Displays help for cmdlets with the specified functionality. The core cmdlets do not have a value for the functionality property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>role</maml:name>
				<maml:description>
					<maml:para>Displays help customized for the specified user role. &lt;String&gt; represents the role that the user plays in an organization. Some cmdlets display different text in their help files based on the value of this parameter. This parameter has no effect on help for the core cmdlets.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>category</maml:name>
				<maml:description>
					<maml:para>Displays help for items in the specified category.
Valid values for &lt;String&gt; are:
   * Alias:    Help for a cmdlet by alias name.
   * Cmdlet:  Help for a cmdlet by cmdlet name.
   * HelpFile: Help about concepts (&quot;About_&quot; topics.)</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>parameter</maml:name>
				<maml:description>
					<maml:para>Displays a detailed description of the specified parameter. These descriptions are included in the Full view of help. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Requests help about the specified cmdlet or conceptual topic. &lt;String&gt; represents a cmdlet name, such as Get-Member, a conceptual topic, such as &quot;About_Object&quot;, or an alias, such as &quot;ls&quot;. Wildcards are permitted. The parameter name (&quot;-Name&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>component</maml:name>
			<maml:description>
				<maml:para>Displays a list of cmdlets with the specified component value, such as &quot;Exchange.&quot; The core cmdlets do not have a value for the component property.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>functionality</maml:name>
			<maml:description>
				<maml:para>Displays help for cmdlets with the specified functionality. The core cmdlets do not have a value for the functionality property.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>role</maml:name>
			<maml:description>
				<maml:para>Displays help customized for the specified user role. &lt;String&gt; represents the role that the user plays in an organization. Some cmdlets display different text in their help files based on the value of this parameter. This parameter has no effect on help for the core cmdlets.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>category</maml:name>
			<maml:description>
				<maml:para>Displays help for items in the specified category.
Valid values for &lt;String&gt; are:
   * Alias:    Help for a cmdlet by alias name.
   * Cmdlet:  Help for a cmdlet by cmdlet name.
   * HelpFile: Help about concepts (&quot;About_&quot; topics.)</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>full</maml:name>
			<maml:description>
				<maml:para>Displays the entire help file for a cmdlet, including technical information about the parameters. This parameter has no effect on displays of conceptual (&quot;About_&quot;) help.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>detailed</maml:name>
			<maml:description>
				<maml:para>Displays additional information about a cmdlet, including descriptions of the parameters and examples of using the cmdlet. This parameter has no effect on displays of conceptual (&quot;About_&quot;) help.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>examples</maml:name>
			<maml:description>
				<maml:para>Displays examples of using the cmdlet. These examples are included the Detailed and Full views of help. This view also includes the name of the cmdlet and its brief description. To display only the examples, type &quot;(get-help &lt;cmdlet-name&gt;).examples&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
			<maml:name>parameter</maml:name>
			<maml:description>
				<maml:para>Displays a detailed description of the specified parameter. These descriptions are included in the Full view of help. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						None
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>String, MamlCommandHelpInfo</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						Without parameters, Get-Help returns a string object. Get-Help &lt;cmdlet-name&gt; returns a MamlCommandHelpInfo object
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Without parameters, &quot;Get-Help&quot; displays information about the Windows PowerShell help system.

When you specify a single cmdlet or conceptual topic, such as &quot;Get-Help Set-Item&quot;, Get-Help displays help about that topic. When you specify multiple cmdlets or conceptual topics, such as &quot;Get-Help *&quot; or &quot;Get-Help -Category HelpFile&quot;, Get-Help displays a list of cmdlets and topics that meet the specification.

There are three variations of Get-Help:

-- &quot;Get-Help&quot; displays the entire help topic on a single page. 

-- &quot;Help&quot; displays the help topics one page at a time. You can use all of the Get-Help parameters with Help. The syntax is:

help {&lt;cmdlet-name&gt; | &lt;topic-name&gt;}&lt;parameters&gt;]

-- &quot;-?&quot; displays basic help for a cmdlet. Wildcards are not permitted, parameters are not supported, and you cannot use &quot;-?&quot; to display help for a conceptual topic (about-*). The syntax is:

 &lt;cmdlet-name&gt; -?


The full view of help (-full) includes a table of information about the parameters. The table includes the following fields:

-- Required:  Indicates whether the parameter is required (true) or optional (false).

-- Position:  Indicates whether the parameter is named or positional (numbered). Positional parameters must appear in a specified place in the command.

-- &quot;Named&quot; indicates that the parameter name is required, but that the parameter can appear anywhere in the command.

-- &lt;Number&gt; indicates that the parameter name is optional, but when the name is omitted, the parameter must be in the place specified by the number. For example, &quot;2&quot; indicates that when the parameter name is omitted, the parameter must be the second (2) or only unnamed parameter in the command. When the parameter name is used, the parameter can appear anywhere in the command. 

-- Default value: The parameter value that Windows PowerShell uses if you do not include the parameter in the command.

-- Accepts pipeline input: Indicates whether you can (true) or cannot (false) send objects to the parameter through a pipeline. &quot;By Property Name&quot; means that the pipelined object must have a property with the same name as the parameter name. 

-- Accepts wildcard characters: Indicates whether the value of a parameter can include wildcard characters, such as * and ?.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-help</dev:code>
  			<dev:remarks>
				<maml:para>This command displays help about the Windows PowerShell help system.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-help *</dev:code>
  			<dev:remarks>
				<maml:para>This command displays a list of all help files in the Windows PowerShell help system.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-help get-alias

C:\PS&gt;help get-alias

C:\PS&gt;get-alias -?</dev:code>
  			<dev:remarks>
				<maml:para>These commands display basic information about the get-alias cmdlet. The &quot;Get-Help&quot; and &quot;-?&quot; commands displays the information on a single page. The &quot;Help&quot; command displays the information one page at a time.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-help about_*</dev:code>
  			<dev:remarks>
				<maml:para>This command displays a list of the conceptual topics included in Windows PowerShell help. All of these topics begin with the characters &quot;about_&quot;. To display a particular help file, type &quot;get-help &lt;topic-name&gt;, for example, &quot;get-help about_signing&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-help ls -detailed</dev:code>
  			<dev:remarks>
				<maml:para>This command displays detailed help for the Get-Childitem cmdlet by specifying one of its aliases, &quot;ls.&quot; The Detailed parameter requests the detailed view of the help file, which includes parameter descriptions and examples. To see the complete help file for a cmdlet, use the Full parameter.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-help format-string -full</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the full view help for the Format-String cmdlet. The full view of help includes parameter descriptions and examples, and a table of technical details about the parameters.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-help start-service -examples</dev:code>
  			<dev:remarks>
				<maml:para>This command displays examples of using start-service in Windows PowerShell commands.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 8 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-help get-childitem -parameter f*</dev:code>
  			<dev:remarks>
				<maml:para>This command displays descriptions of the parameters of the Get-Childitem cmdlet that begin
   with &quot;f&quot; (filter and force). To see descriptions of all parameters, type &quot;get-help get-childitem parameter*&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 9 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>(get-help write-object).syntax</dev:code>
  			<dev:remarks>
				<maml:para>This command displays only the syntax of the write-object cmdlet. Syntax is one of many properties of help objects; others are description, details, examples, and parameters. To find all properties and methods of help objects, type &quot;get-help &lt;cmdlet-name&gt; | get-member&quot;, for example, &quot;get-help start-service | get member&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Command</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSDrive</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Member</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-History
		</command:name>
		<maml:description>
			<maml:para>Gets a list of the commands entered during the current session.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>history</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-History cmdlet gets the session history, that is, the list of commands entered during the current session. Windows PowerShell automatically maintains a history of each session. You can save the session history in XML or CSV format. By default, history files are saved in the home directory, but you can save the file in any location.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-History</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>id</maml:name>
				<maml:description><maml:para>Specifies the ID number of a command in the session history. Get-History gets only the specified command. If you use Id and Count, Get-History gets the most recent commands ending with the command specified by the Id parameter.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">long[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>count</maml:name>
				<maml:description><maml:para>Displays the specified number of most-recent history entries. The default is 32. If you use both Count and Id in a command, the display ends with the command specified by Id.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>id</maml:name>
			<maml:description>
				<maml:para>Specifies the ID number of a command in the session history. Get-History gets only the specified command. If you use Id and Count, Get-History gets the most recent commands ending with the command specified by the Id parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">long[]</command:parameterValue>
			<dev:type>
				<maml:name>long[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Immediate ID Predecessor</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>count</maml:name>
			<maml:description>
				<maml:para>Displays the specified number of most-recent history entries. The default is 32. If you use both Count and Id in a command, the display ends with the command specified by Id.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>32</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>HistoryInfo objects</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-History -detailed&quot;. For technical information, type &quot;Get-Help Get-History -full&quot;. 

The session history is a list of the commands entered during the session, along with the ID, which represents the order of execution, the status, and start and end times of the command. As you enter each command, Windows PowerShell adds it to the history so that you can reuse it. 

By default, the history can hold 64 commands, but you can change it by changing the value of the $MaximumHistoryCount variable. When the history is full, the oldest command entries are deleted to make room for new ones. 

You cannot clear the session history except by ending the Windows PowerShell session.

Commands are added to the history when the command finishes executing, not when it's entered. If commands take some time to complete, or are executing in a nested prompt (which complete only when you exit from the prompt level), they might appear to be out of order in the history.

In addition to using the Get-History command, you can navigate within the session history by using the up-arrow and down-arrow keys. For more information about the session history, type &quot;get-help about_history&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Get-History by its built-in aliases, &quot;h&quot;, &quot;history&quot; and &quot;ghy&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-history</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the 32 most recently submitted commands. The default display shows each command and its ID, which indicates the order of execution.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-history | where-object {$_.commandLine -like &quot;*service*&quot;}</dev:code>
  			<dev:remarks>
				<maml:para>This command gets entries from the command history that include the word, &quot;service&quot;. The first command gets the 32 most recent entries in the session history. The pipeline operator (|) passes the results to the Where-Object cmdlet, which selects only the commands that include &quot;service&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-history -id 7 -count 5 | export-csv history.csv</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the 5 most recent history entries ending with entry 7. The pipeline operator (|) passes the result to the Export-Csv cmdlet, which formats the history as comma-separated text and saves it in the History.csv file. The file includes the data that is displayed when you format the history as a list, including the status and start and end times of the command.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>        </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-history -count 1</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the last (most recently entered) command in the command history. It uses the Count parameter to display just one command. By default, Get-History displays the most recent commands. This command can be abbreviated to &quot;h -c 1&quot; and is equivalent to pressing the up-arrow key.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-history -count $MaximumHistoryCount</dev:code>
  			<dev:remarks>
				<maml:para>This command displays all of the commands saved in the session history. By default, $MaximumHistoryCount is 64, so this command can be abbreviated as &quot;h -c 64&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-history | format-list</dev:code>
  			<dev:remarks>
				<maml:para>This command displays all of the properties of entries in the session history. The pipeline operator (|) passes the result to the format list command, which displays all of the properties of each history entry, including the ID, status, and start and end times of the command.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Invoke-History</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-History</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-PSSnapin
		</command:name>
		<maml:description>
			<maml:para>Gets the Windows PowerShell snap-ins on the computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>pssnapin</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-PSSnapIn cmdlet gets objects representing each Windows PowerShell snap-in available in the current console or registered on the system. The snap-ins are listed in the order in which they appear in the console file.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-PSSnapin</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Gets only the specified Windows PowerShell snap-ins. Enter the names of one or more Windows PowerShell snap-ins. Wildcards are permitted.

The parameter name (&quot;-Name&quot;) is optional.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>registered</maml:name>
				<maml:description><maml:para>Gets only the Windows PowerShell snap-ins that have been registered on the system. The snap-ins that are installed with Windows PowerShell do not appear in this list.</maml:para></maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Gets only the specified Windows PowerShell snap-ins. Enter the names of one or more Windows PowerShell snap-ins. Wildcards are permitted.

The parameter name (&quot;-Name&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>registered</maml:name>
			<maml:description>
				<maml:para>Gets only the Windows PowerShell snap-ins that have been registered on the system. The snap-ins that are installed with Windows PowerShell do not appear in this list.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>PSSnapInInfo.Name</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						The namespace-qualified name of the PSSnapIn to add. (for example, Microsoft.Exchange, MyCompany.User).
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>PSSnapInInfo object.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						PSSnapIn Info Object.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-PSSnapIn -detailed&quot;. For technical information, type &quot;Get-Help Get-PSSnapIn -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Get-PSSnapin by its built-in alias, &quot;psnp&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-PSSnapIn</dev:code>
  			<dev:remarks>
				<maml:para>This command get the Windows PowerShell snap-ins that are currently loaded in the console. This includes the snap-ins that are installed with Windows PowerShell and those that have been added to the console.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-PSSnapIn * -registered</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the Windows PowerShell snap-ins that have been registered on the computer, including those that have already been added to the console. The output does not include snap-ins that are installed with Windows PowerShell or Windows PowerShell snap-in DLLs that have not yet been registered on the system.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-PSSnapIn smp*</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the Windows PowerShell snap-ins in the current console that have names that begin with &quot;smp&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Add-PSSnapIn</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-PSSnapIn</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Console</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Invoke-History
		</command:name>
		<maml:description>
			<maml:para>Runs commands from the session history.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>invoke</command:verb>
		<command:noun>history</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Invoke-History cmdlet runs commands from the session history. You can pass objects representing the commands from Get-History to Invoke-History, or identify commands in the current history by using their ID number. To find the identification number of a command, use Get-History.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Invoke-History</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>iD</maml:name>
				<maml:description><maml:para>Identifies a command in the history. You can type the ID number of the command or the first few characters of the command. 

If you type characters, Invoke-History matches the most recent commands first. If you omit this parameter, Invoke-History runs the last (most recent) command. The parameter name (&quot;-id&quot;) is optional. To find the ID number of a command, use Get-History.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>iD</maml:name>
			<maml:description>
				<maml:para>Identifies a command in the history. You can type the ID number of the command or the first few characters of the command. 

If you type characters, Invoke-History matches the most recent commands first. If you omit this parameter, Invoke-History runs the last (most recent) command. The parameter name (&quot;-id&quot;) is optional. To find the ID number of a command, use Get-History.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Previously executed pipeline</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>HistoryInfo Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Invoke-History takes HistoryInfo objects, such as those returned by Get-History.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						Invoke-History does not output objects. However, the command that it runs might output objects.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Invoke-History -detailed&quot;. For technical information, type &quot;Get-Help Invoke-History -full&quot;.

The session history is a list of the commands entered during the session, along with the ID, which represents the order of execution, the status, and start and end times of the command. As you enter each command, Windows PowerShell adds it to the history so that you can reuse it. 

For more information about the session history, type &quot;get-help about_history&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Invoke-History by its built-in aliases, &quot;r&quot; and &quot;ihy&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>invoke-history</dev:code>
  			<dev:remarks>
				<maml:para>This command runs the last (most recent) command in the session history. You can abbreviate this command as &quot;r&quot; (think &quot;repeat&quot; or &quot;rerun&quot;), the alias for Invoke-History. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>invoke-history -id 132</dev:code>
  			<dev:remarks>
				<maml:para>This command runs the command in the session history with ID 132. Because the name of the -id parameter is optional, you can abbreviate this command as &quot;Invoke-History 132&quot;, &quot;ihy 132&quot; or &quot;r 132&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>invoke-history get-pr</dev:code>
  			<dev:remarks>
				<maml:para>This command runs the most recent get-process command in the session history. When you type characters for the Id parameter, Invoke-History runs the first command that it finds that matches the pattern, beginning with the most recent commands. This command uses the ID parameter, but omits the optional parameter name.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>invoke-history (16..24), 27</dev:code>
  			<dev:remarks>
				<maml:para>This command runs commands 16 - 24 and 27. You can list multiple IDs and ID ranges separated by commas.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-history -id 255 -count 7 | invoke-history</dev:code>
  			<dev:remarks>
				<maml:para>This command runs the 7 commands in the history that end with command 255 (typically 249 - 255). It uses the Get-History cmdlet to retrieve the commands. The pipeline operator (|) passes the commands to Invoke-History, which executes them.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-History</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-History</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-PSSnapin
		</command:name>
		<maml:description>
			<maml:para>Removes Windows PowerShell snap-ins from the current console.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>remove</command:verb>
		<command:noun>pssnapin</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-PSSnapIn cmdlet removes a Windows PowerShell snap-in from the current console. You can use it to remove snap-ins that you have added to Windows PowerShell, but you cannot use it to remove the snap-ins that are installed with Windows PowerShell. After a snap-in is removed, it is still loaded, but the cmdlets and providers that the snap-in supports are no longer available in the console. The changes affect only the current console, unless you use Export-Console to save the console.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-PSSnapin</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>The unique-name(s) of the PSSnapIn(s) to remove from the current console file. The parameter name (&quot;-Name&quot;) is optional.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description><maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para></maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>The unique-name(s) of the PSSnapIn(s) to remove from the current console file. The parameter name (&quot;-Name&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>PSSnapInInfo.Name</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						The namespace-qualified name of the PSSnapIn to add. (i.e. Microsoft.Exchange, MyCompany.User).
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>PSSnapInInfo object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						Returns a PSSnapIn Info Object.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Remove-PSSnapIn -detailed&quot;. For technical information, type &quot;Get-Help Remove-PSSnapIn -full&quot;.

Remove-PSSnapIn does not check the version of Windows PowerShell version before removing a snap-in from the console. If a snap-in cannot be removed, a warning appears and the command fails.

To save the configuration of the current console, including snap-ins that you have added and removed, use Export-Console. To find the name of the current console, use the $console variable, which is automatically updated with the name of the current console when you start Windows PowerShell.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Remove-PSSnapin by its built-in alias, &quot;rsnp&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>remove-pssnapinn -name Microsoft.Exchange</dev:code>
  			<dev:remarks>
				<maml:para>This command removes the Micrsoft.Exchange snap-in from the current console. When the command completes, the cmdlets and providers that the snap-in supported are not available in the console.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-PSSnapIn smp* | remove-PSSnapIn

C:\PS&gt;Export-console ConsoleSansSMP.psc1</dev:code>
  			<dev:remarks>
				<maml:para>These commands remove the Windows PowerShell snap-ins whose names begin with &quot;Smp&quot; from the current console, and then save the current console.

The first command uses the Get-PsSnapin cmdlet to get objects representing the snap-ins. The pipeline operator (|) sends the results to the Remove-PsSnapin cmdlet, which removes them from the console. The providers and cmdlets that this snap-in supports are no longer available in the console.

When you pipe objects to Remove-PsSnapin, the names of the objects are associated with the Name parameter, which accepts objects from the pipeline that have a Name property.

The second command uses the Export-Console command to export the new console configuration to the ConsoleSansSMP.psc1 file. If you use this console file in Windows PowerShell, the Winddows PowerShell SMP snap-ins that you removed from the console are not loaded.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Add-PSSnapIn</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSSnapIn</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Console</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-PSDebug
		</command:name>
		<maml:description>
			<maml:para>Turns script debugging features on and off, sets the trace level and toggles strict mode.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>set</command:verb>
		<command:noun>psdebug</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Turns script debugging features on and off, sets the trace level and toggles strict mode. This cmdlet allows you to control the script debugging options of the Windows PowerShell interpreter. When the Trace parameter is set to 1, only the line of script to be executed will be emitted. When the parameter is set to 2, variable assignments, function and script calls will also be traced.
If the Step parameter is specified, the user will be presented with the same choices as the Confirm parameter before each line of the script is executed.
The behavior of the system in response to the confirmation prompt in step mode is as follows:
&quot;Yes&quot; executes the single line 
&quot;Yes to All&quot; exits step mode (the script continues to run with no confirmation prompts)
&quot;No&quot; and &quot;No To All&quot; exit the script 
&quot;Suspend&quot; launches a nested shell and then returns to the confirmation prompt when the nested shell exits.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-PSDebug</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>trace</maml:name>
				<maml:description>
					<maml:para>Specifies the trace level:
 0 - turn script tracing off
 1 - trace script lines as they are executed
 2 - trace script lines, variable assignments, function calls and scripts.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>step</maml:name>
				<maml:description>
					<maml:para>Turns on script stepping. Before each line is run, the user is prompted to stop, continue or enter a new interpreter level to inspect the state of the script.
Note that specifying Step automatically sets a Trace level of 1.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>strict</maml:name>
				<maml:description>
					<maml:para>Specfies that the interpreter should throw an exception if a variable is referenced before being assigned a value.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-PSDebug</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>off</maml:name>
				<maml:description>
					<maml:para>Turns off all script debugging features.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>trace</maml:name>
			<maml:description>
				<maml:para>Specifies the trace level:
 0 - turn script tracing off
 1 - trace script lines as they are executed
 2 - trace script lines, variable assignments, function calls and scripts.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>1</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>step</maml:name>
			<maml:description>
				<maml:para>Turns on script stepping. Before each line is run, the user is prompted to stop, continue or enter a new interpreter level to inspect the state of the script.
Note that specifying Step automatically sets a Trace level of 1.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>off</maml:name>
			<maml:description>
				<maml:para>Turns off all script debugging features.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>strict</maml:name>
			<maml:description>
				<maml:para>Specfies that the interpreter should throw an exception if a variable is referenced before being assigned a value.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Set-PsDebug  -detailed&quot;. For technical information, type &quot;Get-Help Set-PsDebug -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-psdebug -trace 2; foreach ($i in 1..3) {$i}</dev:code>
  			<dev:remarks>
				<maml:para>This command sets the trace level to 2, and then runs a script that displays the numbers 1, 2 and 3.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>DEBUG:    1+ Set-PsDebug -trace 2; foreach ($i in 1..3) {$i}
DEBUG:    1+ Set-PsDebug -trace 2; foreach ($i in 1..3) {$i}
1
DEBUG:    1+ Set-PsDebug -trace 2; foreach ($i in 1..3) {$i}
2
DEBUG:    1+ Set-PsDebug -trace 2; foreach ($i in 1..3) {$i}
3</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-psdebug -step; foreach ($i in 1..3) {$i}</dev:code>
  			<dev:remarks>
				<maml:para>This command turns on stepping and then 
runs a script that displays the numbers 1, 2 and 3.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>DEBUG:    1+ Set-PsDebug -step; foreach ($i in 1..3) {$i}
Continue with this operation?
   1+ Set-PsDebug -step; foreach ($i in 1..3) {$i}
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help
(default is &quot;Y&quot;):a
DEBUG:    1+ Set-PsDebug -step; foreach ($i in 1..3) {$i}
1
2
3</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-psdebug -off; foreach ($i in 1..3) {$i}</dev:code>
  			<dev:remarks>
				<maml:para>This command turns off all debugging features, and then
and then runs a script that displays the numbers 1, 2 and 3.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>1
2
3</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-psdebug -strict; $NewVar</dev:code>
  			<dev:remarks>
				<maml:para>This command puts the interpreter in strict mode, and attempts to access a variable that has not yet been set.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>The variable $NewVar cannot be retrieved because it has not been set yet.
At line:1 char:28
+ Set-PsDebug -strict;$NewVar &lt;&lt;&lt;&lt;</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Write-Debug</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Where-Object
		</command:name>
		<maml:description>
			<maml:para>Creates a filter that controls which objects will be passed along a command pipeline.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>where</command:verb>
		<command:noun>object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Creates a filter that controls which objects will be passed along a command pipeline. It filters objects passed to it as pipelined input or objects provided as the value of the InputObject parameter. It determines which objects to pass along the pipeline by evaluating a script block that may include a reference to an object being filtered. If the result of the evaluation is True, the object being processed is passed along the pipeline; otherwise, the object is discarded.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Where-Object</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>filterScript</maml:name>
				<maml:description><maml:para>Specifies the script block to evaluate in determining which input objects will be passed along the command pipeline.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects to be filtered. If you save the output of a command in a variable, you can use InputObject to pass the variable to Where-Object. However, typically, the InputObject parameter is not typed in the command. Instead, when you pass an object through the pipeline, Windows PowerShell associates the passed object with the InputObject parameter.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>filterScript</maml:name>
			<maml:description>
				<maml:para>Specifies the script block to evaluate in determining which input objects will be passed along the command pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			<dev:type>
				<maml:name>scriptblock</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to be filtered. If you save the output of a command in a variable, you can use InputObject to pass the variable to Where-Object. However, typically, the InputObject parameter is not typed in the command. Instead, when you pass an object through the pipeline, Windows PowerShell associates the passed object with the InputObject parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Any object from the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						Input objects that are not filtered by the cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Where-Object -detailed&quot;. For technical information, type &quot;Get-Help Write-Object -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-service | where-object {$_.Status -eq &quot;Stopped&quot;}</dev:code>
  			<dev:remarks>
				<maml:para>This command gets a list of all services that are currently stopped.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | where-object {$_.workingset -gt 25000*1024}</dev:code>
  			<dev:remarks>
				<maml:para>This command lists processes that have a working set greater than  25000K. The value of the workingset property is stored in bytes, so the 25000 is multiplied by 1024.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | where-object { $_.ProcessName -match &quot;^p.*&quot; }</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the processes with a ProcessName property that begins with a letter p. The match operator enables you to use regular expressions within a where clause.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process -name svchost | where-object {$True}</dev:code>
  			<dev:remarks>
				<maml:para>This command lists all of the processes named svchost. The where-object cmdlet evaluates the script block, which typically includes a reference to the object currently in the pipeline ($_),  and casts the results to a boolean type: True or False. If the result is True, the object is passed along the pipeline, otherwise it is discarded. In this case, the script block just returns True, so all objects are passed along the pipeline.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_where</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_regular_expression</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>

<providerHelp>
<Name>
	Alias
</Name>
<Drives>
	<Para>Alias:</Para>
</Drives>
<Synopsis>
	Provides access to the Windows PowerShell aliases and the values that they represent.
</Synopsis>

<DetailedDescription>
	<para>The Windows PowerShell Alias provider lets you get, add, change, clear, and delete aliases in Windows PowerShell. 

An alias is an alternate name or nickname for a cmdlet, function, or executable file. Windows PowerShell comes with a set of built-in aliases, and you can add your own aliases to the current console and to your Windows PowerShell profile.

The Alias provider is a flat namespace that consists only of the alias objects. The aliases have no child items.

Each alias is an instance of the System.Management.Automation.AliasInfo class.

The Alias provider exposes its data store in the Alias: drive. To work with aliases, you can change your location to the Alias: drive (&quot;set-location alias:&quot;) or work from any other Windows PowerShell drive. To reference an alias from another location, use the drive name, &quot;Alias:&quot; in the path. 

Windows PowerShell includes a set of cmdlets designed especially to view and change aliases:
Get-Alias
New-Alias
Set-Alias
Export-Alias
Import-Alias
When you use these cmdlets, you do not need to specify the Alias: drive in the name.

The Alias provider supports all of the Item cmdlets (*-Item), except for Invoke-Item, and it supports the Get-Content and Set-Content cmdlets. The Alias provider does not support the ItemProperty cmdlets (*-ItemProperty) and it does not support the Filter parameter in any cmdlet.

All changes to the aliases affect the current console only. To save the changes, add the changes to the Windows PowerShell profile, or use Export-Alias and Import-Alias.</para>
</DetailedDescription>

<Capabilities>
	<para></para>
</Capabilities>
<Filters>
	<para></para>
</Filters>
<Notes>
	
</Notes>
<Tasks>
	<Task>
  		<Title>
			Getting to the Alias: drive
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command changes the current location to the Alias: drive. You can use this command from any drive in Windows PowerShell. To return to a file system drive, type the drive name, such as &quot;set-location c:&quot;</para>
				</Introduction> 
	  			<Code>
					set-location alias:
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Getting aliases
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command gets the list of all aliases in the current session. You can use this command from any Windows PowerShell drive.</para>
				</Introduction> 
	  			<Code>
					get-item -path alias:
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command gets the &quot;ls&quot; alias. You can use this command from any Windows PowerShell drive.</para>
				</Introduction> 
	  			<Code>
					get-item -path alias:ls
				</Code>
				<Remarks>
					<para>If you are in the Alias: drive, you can omit the drive name from the path. </para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>This command gets a list of the aliases associated with the Get-Childitem cmdlet. It uses the Definition property to identify the command. </para>
				</Introduction> 
	  			<Code>
					get-item -path alias:* | where-object {$_.Definition -eq &quot;Get-Childitem}
				</Code>
				<Remarks>
					<para>When the aliased item is a cmdlet, the values of the Definition, ResolvedCommandName, ReferencedCommandName, and ResolvedCommand properties are the same. However, when the aliased item is an executable file, the Definition stores the fully qualified path to the file.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 4 --------------------------
				</Title> 
				<Introduction>
					<para>This command gets the list of all aliases when the current location is the Alias: drive. It uses a wildcard character (*) to indicate all contents of the current location.</para>
				</Introduction> 
	  			<Code>
					get-item -path *
				</Code>
				<Remarks>
					<para>In the Alias: drive, a dot (.), which represents the current location, and a wildcard character (*), which represents all items in the current location, have the same effect. For example, &quot;get-item -path .&quot; or &quot;get-item *&quot; produce the same result.</para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Creating a new alias
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command creates the alias &quot;serv&quot; for the Get-Service cmdlet. Because the current location is in the Alias: drive, the value of the Path parameter is a dot (.), which represents the current location.

This command also uses the Options dynamic parameter to set the AllScope and Constant options on the alias. The Options parameter is available in New-Item only when you're using the Alias provider.</para>
				</Introduction> 
	  			<Code>
					new-item -path . -name serv -value Get-Service -Options &quot;AllScope,Constant&quot;
				</Code>
				<Remarks>
					<para>If you are in the Alias: drive, you can omit the drive name from the path. </para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>You can create an alias for any item that invokes a command. This command creates the &quot;np&quot; alias for Notepad.exe. </para>
				</Introduction> 
	  			<Code>
					new-item -path alias:np -value c:\windows\notepad.exe
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>You can create an alias for any function. You can use this feature to create an alias that includes both a cmdlet and its parameters.

The first command creates a function called CD32 that changes the current directory to the System32 directory. The second command creates the alias &quot;go&quot; for the CD32 function. The semi-colon (;) is the command separator.

When the command completes, you can use either CD32 or &quot;go&quot; to invoke the function.</para>
				</Introduction> 
	  			<Code>
					function CD32 {set-location -path c:\windows\system32}; set-item -path alias:go -value CD32
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Displaying the properties and methods of aliases.
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Get-Item cmdlet to get all aliases. The pipeline operator sends the results to Get-Member, which displays the methods and properties of the object.</para>
				</Introduction> 
	  			<Code>
					get-item -path alias:* | get-member
				</Code>
				<Remarks>
					<para>When you pipe a collection of objects to Get-Member, such as the collection of aliases in the Alias: drive, Get-Member evaluates each object in the collection separately and returns information about each of the object types that it finds. If all of the objects are of the same type, it returns information about the single object type. In this case, all of the aliases are AliasInfo objects.

To get information about the collection of AliasInfo objects, use the InputObject parameter of Get-Member. For example, &quot;Get-Member -InputObject (Get-Item alias:*)&quot;. When you use InputObject, Get-Member evaluates the collection, not the objects in the collection.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command lists the values of the properties of the &quot;dir&quot; alias. It uses the Get-Item cmdlet to get an object that represents the &quot;dir&quot; alias. The pipeline operator sends the results to Format-List. The Format-List command uses the Property parameter with a value of all (*) to format and display the values of all of the properties of the &quot;dir&quot; alias.</para>
				</Introduction> 
	  			<Code>
					get-item alias:dir | format-list -property *
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Changing the properties of an alias.
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>You can use the Set-Item cmdlet with the Options dynamic parameter to change the value of the Options property of an alias.

This command sets the AllScope and ReadOnly options for the &quot;dir&quot; alias. The command uses Options dynamic parameter of the Set-Item cmdlet. The Options parameter is available in Set-Item only when you use it with the Alias or Function provider.</para>
				</Introduction> 
	  			<Code>
					set-item -path alias:dir -options &quot;AllScope,ReadOnly&quot;
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Set-Item cmdlet to change the &quot;gp&quot; alias so that it represents &quot;Get-Process&quot; instead of &quot;Get-ItemProperty&quot;. The Force parameter is required, because the option of &quot;gp&quot; is set to ReadOnly. The command is submitted from within the Alias: drive, so the drive is not specified in the path.</para>
				</Introduction> 
	  			<Code>
					set-item -path gp -value get-process -force
				</Code>
				<Remarks>
					<para>The change affects the four properties that define the association between the alias and the command. To see the effect of the change, type &quot;get-item -path gp | format-list -property *&quot;.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Rename-Item cmdlet to change the name of the &quot;popd&quot; alias to &quot;pop.&quot; </para>
				</Introduction> 
	  			<Code>
					rename-item -path alias:popd -newname pop
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Copying an alias
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command copies the &quot;pushd&quot; alias to &quot;push&quot;, effectively creating a new alias named &quot;push&quot; for the Push-Location cmdlet.</para>
				</Introduction> 
	  			<Code>
					copy-item -path alias:pushd -destination alias:push
				</Code>
				<Remarks>
					<para>The new alias is created with a null value for the Description property and a value of &quot;None&quot; for the Options property.

If the command is issued from within the Alias: drive, you can omit the drive name from the value of the path parameter.</para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Deleting an alias
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command deletes the &quot;serv&quot; alias from the current console. You can use this command in any Windows PowerShell drive.</para>
				</Introduction> 
	  			<Code>
					remove-item -path alias:serv
				</Code>
				<Remarks>
					<para>If you are in the Alias: drive, you can omit the drive name from the path.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command deletes aliases that begin with &quot;s&quot;. It does not delete Read-Only aliases.</para>
				</Introduction> 
	  			<Code>
					clear-item -path alias:s*
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>This command deletes all aliases from the current console, except those with a value of Constant for their Options property. Without the Force parameter, the command does not delete aliases with the value of ReadOnly for their Options property.</para>
				</Introduction> 
	  			<Code>
					remove-item alias:* -force
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
</Tasks>
<DynamicParameters>
	<DynamicParameter>
		<Name>Options</Name>

		<CmdletSupported>New-Item, Set-Item</CmdletSupported>

		<Type>
            		<Name>System.Management.Automation.ScopedItemOptions</Name>
      		</Type>

      		<Description>Determines the value of the Options property of an alias.</Description>

		<PossibleValues>
			<PossibleValue>
				<Value>None</Value>

				<Description>
					<para>No options. &quot;None&quot; is the default.</para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>Constant</Value>

				<Description>
					<para>The alias cannot be deleted and its properties cannot be changed. Constant is available only when you are creating an alias. You cannot change the option of an existing alias to Constant.</para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>Private</Value>

				<Description>
					<para>The alias is visible only in the current scope (not in child scopes).</para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>ReadOnly</Value>

				<Description>
					<para>The properties of the alias cannot be changed, except by using the Force parameter. You can use Remove-Item to delete the alias.</para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>AllScope</Value>

				<Description>
					<para>The alias is copied to any new scopes that are created.</para>
				</Description>

			</PossibleValue>
		</PossibleValues>
	</DynamicParameter>
</DynamicParameters>
<RelatedLinks>
	About_Alias
	about_provider
</RelatedLinks>
</providerHelp>

<providerHelp>
<Name>
	Environment
</Name>
<Drives>
	<Para>Env:</Para>
</Drives>
<Synopsis>
	Provides access to the Windows environment variables.
</Synopsis>

<DetailedDescription>
	<para>The Windows PowerShell Environment provider lets you get, add, change, clear, and delete Windows environment variables in Windows PowerShell. 

The Environment provider is a flat namespace that consists only objects representing the environment variables. The variables have no child items.

Each environment variable is an instance of the System.Collections.DictionaryEntry class. The name of the variable is the dictionary key and the value of the environment variable is the dictionary value. 

The Environment provider exposes its data store in the Env: drive. To work with environment variables, you can change your location to the Env: drive (&quot;set-location env:&quot;) or work from any other Windows PowerShell drive. To reference an environment variable from another location, use the drive name, &quot;Env:&quot; in the path. 

The environment variable provider supports all of the Item cmdlets (*-Item), except for Invoke-Item, and it supports the Get-Content and Set-Content cmdlets (*-Content). However, it does not support the ItemProperty cmdlets (*-ItemProperty) and it does not support the Filter parameter in any cmdlet.

Environments variables must conform to the usual naming standards. In addition, the name cannot include the equal sign (=).

Changes to the environment variables affect the current console only. To save the changes, add the changes to the Windows PowerShell profile, or use Export-Console to save the current console.</para>
</DetailedDescription>

<Capabilities>
	<para></para>
</Capabilities>
<Filters>
	<para></para>
</Filters>
<Notes>
	The Environment provider does not support any dynamic parameters.
</Notes>
<Tasks>
	<Task>
  		<Title>
			Getting to the Env: drive
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Changes the current location to the Env: drive. You can use this command from any drive in Windows PowerShell. To return to a file system drive, type the drive name, such as &quot;set-location c:&quot;</para>
				</Introduction> 
	  			<Code>
					set-location Env:
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Getting environment variables
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command lists all of the environment variables in the current session. You can use this command from any Windows PowerShell drive.</para>
				</Introduction> 
	  			<Code>
					get-childitem -path env:
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command gets the &quot;windir&quot; environment variable.</para>
				</Introduction> 
	  			<Code>
					get-childitem -path env:windir
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>This command gets the list of all environment variables in the current session and sorts them by name. By default, the environment variables appear in the order that Windows PowerShell discovers them. This command is submitted in the Env: drive.</para>
				</Introduction> 
	  			<Code>
					get-childitem  | sort-object -property name
				</Code>
				<Remarks>
					<para>When you run this command from another drive, add the Path parameter with a value of &quot;env:&quot;.</para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Creating a new environment variable
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command creates the &quot;UserMode&quot; environment variable with a value of &quot;Non-Admin&quot;. Because the current location is in the Env: drive, the value of the Path parameter is a dot (.), which represents the current location.</para>
				</Introduction> 
	  			<Code>
					new-item -path . -name UserMode -value Non-Admin
				</Code>
				<Remarks>
					<para>If you are not in the Env: drive, the value of the Path parameter would be &quot;env:&quot;.</para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Displaying the properties and methods of environment variables.
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Get-Item cmdlet to get all environment variables. The pipeline operator sends the results to Get-Member, which displays the methods and properties of the object.</para>
				</Introduction> 
	  			<Code>
					get-childitem -path Env: | get-member
				</Code>
				<Remarks>
					<para>When you pipe a collection of objects to Get-Member, such as the collection of environment variables in the Env: drive, Get-Member evaluates each object in the collection separately and returns information about each of the object types that it finds. If all of the objects are of the same type, it returns information about the single object type. In this case, all of the environment variables are DictionaryEntry objects.

To get information about the collection of DictionaryEntry objects, use the InputObject parameter of Get-Member. For example, &quot;Get-Member -InputObject (Get-Childitem Env:)&quot;. When you use InputObject, Get-Member evaluates the collection, not the objects in the collection.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command lists the values of the properties of the &quot;windir&quot; environment variable. It uses the Get-Item cmdlet to get an object that represents the &quot;windir&quot; environment variable. The pipeline operator sends the results to Format-List. The Format-List command uses the Property parameter with a value of all (*) to format and display the values of all of the properties of the &quot;dir&quot; environment variable.</para>
				</Introduction> 
	  			<Code>
					get-item Env:windir | format-list -property *
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Changing the properties of an environment variable.
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Rename-Item cmdlet to change the name of the &quot;UserMode&quot; environment variable that you created to &quot;UserRole&quot;</para>
				</Introduction> 
	  			<Code>
					rename-item -path Env:UserMode -newname UserRole
				</Code>
				<Remarks>
					<para>This change affects the Name, Key, and PSPath properties of the DictionaryEntry object.

Do not change the name of an environment variable that the system uses. Although these changes affect only the current console, they might cause the system or a program to operate incorrectly.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Set-Item cmdlet to change value of the &quot;UserRole&quot; environment variable to &quot;Administrator&quot;.</para>
				</Introduction> 
	  			<Code>
					set-item -path env:UserRole -value Administrator
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Copying an environment variable
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command copies the &quot;UserRole&quot; environment variable to &quot;UserRole2&quot;, effectively creating a new environment variable named &quot;UserRole2&quot; with the same value as the &quot;UserRole&quot; environment variable.</para>
				</Introduction> 
	  			<Code>
					copy-item -path env:UserRole -destination env:UserRole2
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Deleting an environment variable
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command deletes the &quot;UserRole2&quot; environment variable from the current console. You can use this command in any Windows PowerShell drive.</para>
				</Introduction> 
	  			<Code>
					remove-item -path Env:UserRole2
				</Code>
				<Remarks>
					<para>If you are in the Env: drive, you can omit the drive name from the path.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command deletes the &quot;UserRole&quot; environment variable.</para>
				</Introduction> 
	  			<Code>
					clear-item -path Env:UserRole
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
</Tasks>
<DynamicParameters>
</DynamicParameters>
<RelatedLinks>
	about_provider
</RelatedLinks>
</providerHelp>

<providerHelp>
<Name>
	FileSystem
</Name>
<Drives>
	<Para>C, D</Para>
</Drives>
<Synopsis>
	The PowerShell Provider for accessing files and directories from within the Windows PowerShell.
</Synopsis>

<DetailedDescription>
	<para>The Windows PowerShell FileSystem provider lets you get, add, change, clear, and delete files and directories in Windows PowerShell.. A Windows PowerShell Provider acts as an interface between WIndows PowerShell and a data store. In this case, the data store is a hierarchical collection of files and directories. The use of the FileSystem provider enables you to access the files and directories as you would any data store accessible through a Windows PowerShell Provider. As a result, you can use the same set of core cmdlets from one provider to the next, presenting you with a common experience among the various providers and reducing the time it takes to use a new provider.

The FileSystem provider exposes Windows PowerShell drives that correspond to the logical drives configured on your computer, including drives mapped to network shares. For example, a computer with one floppy disk drive, one hard disk drive, and one mapped network shared directory might have drives named A, C, and Z. The FileSystem Provider exposes PowerShell drives that correspond directly to A, C, and Z, allowing you to reference these drives from within PowerShell. For example, to reference drive C, you use C:, as shown in the following example:

Get-ChildItem C:

The command returns all the contents on the C drive, including files and directories. When you reference a specific directory or file through the FileSystem PowerShell Provider, you must provide the information necessary to identify that directory or file. This means that, in some cases, you must provide a fully qualified name. A fully qualified name includes the drive name (along with a colon), any directory and subdirectory names, and when applicable the file name. For instance, the following example shows the fully qualified name for the shell.dll file, which is located in the System32 subdirectory of the Windows directory on the C drive:

c:\windows\system32\shell.dll

As you can see, each element of the fully qualified name is separated by a backslash (\). PowerShell also allows you to use a forward slash (/) to be consistent with a variety of other shells.

In some cases, you do not need to supply a fully-qualified name when referencing a file or directory. One example of this is if you want to access a file in your current working location, you need to provide only the file name. For instance, if your current working location is c:\windows, you can view a list of all .dll files in that directory by using the following command:

   Get-ChildItem *.dll

If your working directory is something other than c:\windows, such as c:\program files\Windows PowerShell, your command might need to include the fully qualified name:

   Get-ChildItem c:\windows\*.dll

In some cases, you can use relative references to a location. If your working location is c:\windows and you want to view a list of .dll files in the c:\windows\system32 directory, you can use the following command:

   Get-ChildItem .\system32\*.dll

The period before \system32 represents the current working location.

In some situations, your current working location will be on a drive other than a FileSystem drive. If this is the case, you must always include the name of the target drive in your reference. For example, suppose that your current working location is the env: drive. To view the contents of the C drive, you would use the following command:

   Get-ChildItem c:</para>
</DetailedDescription>

<Capabilities>
	<para></para>
</Capabilities>
<Filters>
	<para></para>
</Filters>
<Notes>
	
</Notes>
<Tasks>
	<Task>
  		<Title>
			Navigating the File System 
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Retrieves the current location. </para>
				</Introduction> 
	  			<Code>
					get-location
				</Code>
				<Remarks>
					<para>Get-Location includes the functionality of commands like 'cd' in the Windows Command Prompt and 'pwd' in Unix. For additional information, type get-help get-location.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>Sets the current location.</para>
				</Introduction> 
	  			<Code>
					set-location C:
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Retrieving File and Directory Information 
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Retrieves all the files and directories in the current directory. Get-ChildItem does not recurse by default.</para>
				</Introduction> 
	  			<Code>
					get-childitem
				</Code>
				<Remarks>
					<para>Note that if there are both files and folders in the current directory when you run this command, two types of objects will be returned: a System.IO.FileInfo object and a System.IO.DirectoryInfo object.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>Retrieves all the files and directories in the current directory by using Get-ChildItem. Pipes the results to Where-Object, which examines the PSIsContainer property and lets only the objects that are not (!) containers through the pipeline. </para>
				</Introduction> 
	  			<Code>
					get-childitem | where-object {!$_.psiscontainer}
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>Retrieves all the files and directories in the current directory by using Get-ChildItem. Pipes the results to Where-Object, which examines the PSIsContainer property and lets only the objects that are containers through the pipeline.</para>
				</Introduction> 
	  			<Code>
					get-childitem | where-object {$_.psiscontainer}
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 4 --------------------------
				</Title> 
				<Introduction>
					<para>Uses the Get-Item cmdlet to retrieve information about the test.txt file. The Format-List cmdlet is used to display all of the properties of the resulting object.</para>
				</Introduction> 
	  			<Code>
					get-item -path a | format-list *
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 5 --------------------------
				</Title> 
				<Introduction>
					<para>Uses the Get-Item cmdlet to retrieve information about the test.txt file. The Format-List cmdlet is used to display all of the properties of the resulting object.</para>
				</Introduction> 
	  			<Code>
					get-item -path test.txt | format-list *
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Copying Files and Directories
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Copies the file a.txt from the C:\a directory to the C:\a\bb directory. It overwrites files in the destination directory without prompting for confirmation.</para>
				</Introduction> 
	  			<Code>
					copy-item -path C:\a\a.txt -destination C:\a\bb\a.txt
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>Copies all of the files in the C:\a\bb directory that have the file extension .txt to the C:\a\cc\ccc\ directory. It uses the original names of the files. The command overwrites existing files in the destination directory without prompting for confirmation.</para>
				</Introduction> 
	  			<Code>
					copy-item -path C:\a\bb\*.txt -destination C:\a\cc\ccc\
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>Copies all the directories and files in the C:\a directory to the C:\c directory. If any of the directories to copy already exist in the destination directory, the command will fail unless you specify the Force parameter.</para>
				</Introduction> 
	  			<Code>
					copy-item -path C:\a\* -destination C:\c -recurse
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Moving Files and Directories
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Moves the c.txt file in the C:\a directory to the C:\a\aa directory. The command will not automatically overwrite an existing file with the same name. You can force the cmdlet to overwrite an existing file by specifying the Force parameter.</para>
				</Introduction> 
	  			<Code>
					move-item -path C:\a\c.txt -destination C:\a\aa
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>Moves the directory C:\a and all its contents to the directory C:\b. </para>
				</Introduction> 
	  			<Code>
					move-item -path C:\a -destination C:\b
				</Code>
				<Remarks>
					<para>You cannot move a directory when that directory is the current location.</para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Managing File Content
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Appends the string &quot;test content&quot; to the test.txt file. The existing content in the test.txt file is not deleted.</para>
				</Introduction> 
	  			<Code>
					add-content -path test.txt -value &quot;test content&quot;
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>Retrieves the contents of the test.txt file and displays them in the console window. </para>
				</Introduction> 
	  			<Code>
					get-content -path test.txt
				</Code>
				<Remarks>
					<para>You could pipe the contents of the file as input to another cmdlet. For example, get-content -path test.txt | convertto-html, reads the contents of the test.txt file and supplys them as input to the ConvertTo-HTML cmdlet.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>Replaces the contents of the test.txt file with the string &quot;test content.&quot; This command overwrites the contents of test.txt.</para>
				</Introduction> 
	  			<Code>
					set-content -path test.txt -value &quot;test content&quot;
				</Code>
				<Remarks>
					<para>You can use the Value parameter of the New-Item cmdlet to add content to a file when you create it.</para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Managing Security Descriptors
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para></para>
				</Introduction> 
	  			<Code>
					get-acl -path test.txt | format-list -property *
				</Code>
				<Remarks>
					<para>
Returns a System.Security.AccessControl.FileSecurity object. For more information about this object, you can pipe the command as input to the Get-Member cmdlet or search on Microsoft Developer Network (MSDN).</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para></para>
				</Introduction> 
	  			<Code>
					get-acl -path test_directory | format-list -property *
				</Code>
				<Remarks>
					<para>Returns a System.Security.AccessControl.DirectorySecurity object. For more information about this object, you can pipe the command as input to the Get-Member cmdlet or search on Microsoft Developer Network (MSDN).</para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Creating Files and Directories
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Creates a directory named logfiles in C:\.</para>
				</Introduction> 
	  			<Code>
					new-item -path c:\ -name logfiles -type directory
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>Creates a file named log.txt in C:\logfiles.</para>
				</Introduction> 
	  			<Code>
					new-item -path c:\logfiles -name log.txt -type file
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>Creates a file called log2.txt in the C:\logfiles directory and adds the string &quot;test log&quot; to the file.</para>
				</Introduction> 
	  			<Code>
					new-item -path c:\logfiles -name log2.txt -type file -value &quot;test log&quot;
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Renaming Files and Directories
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Renames the file a.txt in the C:\a directory to b.txt.</para>
				</Introduction> 
	  			<Code>
					rename-item -path c:\a\a.txt -newname b.txt
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>Renames the directory C:\a\cc to C:\a\dd.</para>
				</Introduction> 
	  			<Code>
					rename-item -path c:\a\cc -newname dd
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Deleting Files and Directories
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Delete the file named test.txt in the current directory.</para>
				</Introduction> 
	  			<Code>
					remove-item -path test.txt
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>Delete all files in the current directory that have the .xml file extension.</para>
				</Introduction> 
	  			<Code>
					remove-item -path *.xml
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Starting a Program by Invoking an Associated File
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Uses the Get-Service cmdlet to retrieve information about local services, which is piped to the Export-Csv cmdlet and stored in the services.csv file. Then uses Invoke-Item to open services.csv in the program associated with the .csv file extension.</para>
				</Introduction> 
	  			<Code>
					get-service | export-csv -path services.csv
invoke-item -path services.csv
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
</Tasks>
<DynamicParameters>
	<DynamicParameter>
		<Name>Encoding</Name>

		<CmdletSupported>Add-Content, Get-Content, Set-Content</CmdletSupported>

		<Type>
            		<Name>Microsoft.PowerShell.Commands.FileSystemCmdletProviderEncoding</Name>
      		</Type>

      		<Description></Description>

		<PossibleValues>
			<PossibleValue>
				<Value>Unknown</Value>

				<Description>
					<para>The encoding type is unknown or invalid. The data can be treated as binary. </para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>String</Value>

				<Description>
					<para>Uses the encoding type for a string.</para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>Unicode</Value>

				<Description>
					<para>Encodes in UTF-16 format using the little-endian byte order. </para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>Byte</Value>

				<Description>
					<para>Encodes a set of characters into a sequence of bytes. </para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>BigEndianUnicode</Value>

				<Description>
					<para>Encodes in UTF-16 format using the big-endian byte order. </para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>UTF8</Value>

				<Description>
					<para>Encodes in UTF8 format</para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>UTF7</Value>

				<Description>
					<para>Encodes in UTF7 format</para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>ASCII</Value>

				<Description>
					<para>Uses the encoding for the ASCII (7-bit) character set. </para>
				</Description>

			</PossibleValue>
		</PossibleValues>
	</DynamicParameter>
	<DynamicParameter>
		<Name>Delimiter</Name>

		<CmdletSupported>Get-Content</CmdletSupported>

		<Type>
            		<Name>System.String</Name>
      		</Type>

      		<Description>Specifies the delimiter to use when reading the file. The default is &quot;\n&quot; (end of line).</Description>

		<PossibleValues>
		</PossibleValues>
	</DynamicParameter>
	<DynamicParameter>
		<Name>Wait</Name>

		<CmdletSupported>Get-Content</CmdletSupported>

		<Type>
            		<Name>System.Management.Automation.SwitchParameter</Name>
      		</Type>

      		<Description>Waits for content to be appended to the file. If content is appended, it returns the appended content. If the content has changed, it returns the entire file. 

When waiting, Get-Content checks the file once in each second until you interrupt it, such as by pressing Ctrl + C.</Description>

		<PossibleValues>
			<PossibleValue>
				<Value></Value>

				<Description>
					<para></para>
				</Description>

			</PossibleValue>
		</PossibleValues>
	</DynamicParameter>
</DynamicParameters>
<RelatedLinks>
	about_provider
</RelatedLinks>
</providerHelp>

<providerHelp>
<Name>
	Function
</Name>
<Drives>
	<Para>Function:</Para>
</Drives>
<Synopsis>
	Provides access to the functions defined in Windows PowerShell.
</Synopsis>

<DetailedDescription>
	<para>The Windows PowerShell Function provider lets you get, add, change, clear, and delete functions and filters in Windows PowerShell.

A function is a named block of code that performs an action. When you type the function name, the code in the function runs. A filter is named block of code that establishes conditions for an action. You can type the name of the filter in place of the condition, such as in a Where-Object command. 

In the Function: drive, functions are preceded by the label &quot;Function&quot; and filters are preceded by the label &quot;Filter&quot;, but they operate properly when used in the correct context regardless of the label.

The Function provider is a flat namespace that consists only of the function and filter objects. Neither functions nor filters have child items.

Each function is an instance of the System.Management.Automation.FunctionInfo class. Each filter is an instance of the System.Management.Automation.FilterInfo.

The examples in this section show how to manage functions, but the same methods can be used with filters.

The Function provider exposes its data store in the Function: drive. To work with functions, you can change your location to the Function: drive (&quot;set-location function:&quot;) or work from any other Windows PowerShell drive. To reference a function from another location, use the drive name, &quot;Function:&quot; in the path.

The Function provider supports all of the Item cmdlets (*-Item), except for Invoke-Item, and it supports the Get-Content and Set-Content cmdlets (*-Content). However, it does not support the ItemProperty cmdlets (*-ItemProperty) and it does not support the Filter parameter in any cmdlet.

All changes to the functions affect the current console only. To save the changes, add the function to the Windows PowerShell profile, or use Export-Console to save the current console.</para>
</DetailedDescription>

<Capabilities>
	<para></para>
</Capabilities>
<Filters>
	<para></para>
</Filters>
<Notes>
	
</Notes>
<Tasks>
	<Task>
  		<Title>
			Getting to the Function: drive
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Changes the current location to the Function: drive. You can use this command from any drive in Windows PowerShell. To return to a file system drive, type the drive name, such as &quot;set-location c:&quot;</para>
				</Introduction> 
	  			<Code>
					set-location function:
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Getting functions
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command gets the list of all functions in the current session. You can use this command from any Windows PowerShell drive.</para>
				</Introduction> 
	  			<Code>
					get-childitem -path function:
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command gets the &quot;man&quot; function from within the Function: drive. It uses the Get-Item cmdlet to get the function. The pipeline parameter sends the result to Format-Table. 

The Wrap parameter directs text that doesn't fit on the line onto the next line. The Autosize parameter resizes the table columns to accommodate the text.</para>
				</Introduction> 
	  			<Code>
					get-item -path man | format-table -wrap -autosize
				</Code>
				<Remarks>
					<para>If you are in a different drive, add the drive name (Function:) to the path.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>These commands both get the function named &quot;c:&quot;. The first command can be used in any drive. The second command is used in the Function: drive.

Because the name ends in a colon, which is the syntax for a drive, you must qualify the path with the drive name. Within the Function: drive, you can use either format. In the second command, the dot (.) represents the current location. </para>
				</Introduction> 
	  			<Code>
					c:\PS&gt; get-item -path function:c:

PS Function&gt; get-item -path .\c:
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Creating a function
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>The command uses the New-Item cmdlet to create a function called &quot;HKLM:&quot;. The expression in braces is the script block that is represented by the function name.</para>
				</Introduction> 
	  			<Code>
					new-item -path function:hklm: -value {set-location hklm:}
				</Code>
				<Remarks>
					<para>You can also create a function by just typing it at the Windows PowerShell command line. For example, &quot;function:hklm: {set-location hklm:}&quot;. If you are in the Function: drive, you can omit the drive name.

Because you cannot specify the &quot;filter&quot; label in New-Item, filters are labeled as functions, but they operate properly with any label. To create a filter with the filter label, type the filter at the command line. For example, &quot;filter:Running {$_.Status -eq &quot;Running&quot;}.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the New-Item cmdlet to create a function called Csrss. It uses the Options dynamic parameter to specify a value of ReadOnly for the Options property of the function.</para>
				</Introduction> 
	  			<Code>
					new-item -path function: -name csrss -options readonly -value {get-process csrss}
				</Code>
				<Remarks>
					<para>This command works from any location. If you are in the function drive, you can use a dot (.), which represents the current location, to specify the path.</para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Deleting a function
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command deletes the &quot;hklm:&quot; function from the current console.</para>
				</Introduction> 
	  			<Code>
					remove-item function:hklm:
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command deletes all functions from the current console, except those with a value of Constant for their Options property. Without the Force parameter, the command does not delete functions with the value of ReadOnly for their Options property.</para>
				</Introduction> 
	  			<Code>
					remove-item function:* -force
				</Code>
				<Remarks>
					<para>When you delete all functions, the command prompt changes, because the prompt function, which defines the content of the command prompt, is deleted.</para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Displaying the properties and methods of functions.
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Get-Item cmdlet to get all functions. The pipeline operator sends the results to Get-Member, which displays the methods and properties of the object.</para>
				</Introduction> 
	  			<Code>
					get-item -path function:* | get-member
				</Code>
				<Remarks>
					<para>When you pipe a collection of objects to Get-Member, such as the collection of functions in the Function: drive, Get-Member evaluates each object in the collection separately and returns information about each of the object types that it finds. If all of the objects are of the same type, it returns information about the single object type. In this case, all of the functions are FunctionInfo objects.

To get information about the collection of FunctionInfo objects, use the InputObject parameter of Get-Member. For example, &quot;Get-Member -InputObject (Get-Item function:*)&quot;. When you use InputObject, Get-Member evaluates the collection, not the objects in the collection.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command lists the values of the properties of the &quot;prompt&quot; function. It uses the Get-Item cmdlet to get an object that represents the &quot;prompt&quot; function. The pipeline operator sends the results to Format-List. The Format-List command uses the Property parameter with a value of all (*) to format and display the values of all of the properties of the &quot;prompt&quot; function.</para>
				</Introduction> 
	  			<Code>
					get-item function:prompt | format-list -property *
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Changing the properties of a function.
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>You can use the Set-Item cmdlet with the Options dynamic parameter to change the value of the Options property of a function.

This command sets the AllScope and ReadOnly options for the &quot;prompt&quot; function. This command uses Options dynamic parameter of the Set-Item cmdlet. The Options parameter is available in Set-Item only when you use it with the Alias or Function provider.</para>
				</Introduction> 
	  			<Code>
					set-item -path function:prompt -options &quot;AllScope,ReadOnly&quot;
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Set-Item cmdlet to change the &quot;prompt&quot; function so that it displays the time before the path. </para>
				</Introduction> 
	  			<Code>
					set-item -path function:prompt -value {'PS '+ $(Get-Date -format t) + &quot; &quot; + $(Get-Location) + '&gt; '}
				</Code>
				<Remarks>
					<para>The change affects both the Defintion and ScriptBlock properties of the FunctionInfo object. To see the effect of the change, type &quot;get-item -path function:prompt | format-list -property *&quot;.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Rename-Item cmdlet to change the name of the &quot;help&quot; function to &quot;gh&quot;.</para>
				</Introduction> 
	  			<Code>
					rename-item -path function:help -newname gh
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Copying a function
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command copies the &quot;prompt&quot; function to &quot;oldPrompt&quot;, effectively creating a new name for the script block associated with the prompt function. You can use this to save the original prompt function if you plan to change it.

The new Function has a value of &quot;None&quot; for the Options property. To change the value of the Options property, use Set-Item.</para>
				</Introduction> 
	  			<Code>
					copy-item -path function:prompt -destination function:oldPrompt
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
</Tasks>
<DynamicParameters>
	<DynamicParameter>
		<Name>Options</Name>

		<CmdletSupported>New-Item, Set-Item</CmdletSupported>

		<Type>
            		<Name>System.Management.Automation.ScopedItemOptions</Name>
      		</Type>

      		<Description>Determines the value of the Options property of a function.</Description>

		<PossibleValues>
			<PossibleValue>
				<Value>None</Value>

				<Description>
					<para>No options. &quot;None&quot; is the default.</para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>Constant</Value>

				<Description>
					<para>The function cannot be deleted and its properties cannot be changed. Constant is available only when you are creating a function. You cannot change the option of an existing function to Constant.</para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>Private</Value>

				<Description>
					<para>The functon is visible only in the current scope (not in child scopes).</para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>ReadOnly</Value>

				<Description>
					<para>The properties of the function cannot be changed, except by using the Force parameter. You can use Remove-Item to delete the function.</para>
				</Description>

			</PossibleValue>
			<PossibleValue>
				<Value>AllScope</Value>

				<Description>
					<para>The function is copied to any new scopes that are created.</para>
				</Description>

			</PossibleValue>
		</PossibleValues>
	</DynamicParameter>
</DynamicParameters>
<RelatedLinks>
	About_Function
	About_Filter
	about_provider
</RelatedLinks>
</providerHelp>

<providerHelp>
<Name>
	Registry
</Name>
<Drives>
	<Para>HKLM, HKCU</Para>
</Drives>
<Synopsis>
	Provides access to the system registry keys and values from within Windows PowerShell.
</Synopsis>

<DetailedDescription>
	<para>The Windows PowerShell Registry provider lets you get, add, change, clear, and delete registry keys and values in Windows PowerShell. 

Registry keys are represented as instances of the Microsoft.Win32.RegistryKey class. Registry values are represented as PSCustomObject instances.

The Registry provider lets you access a hierarchical namespace that consists of registry keys and subkeys. Registry values and data are not components of that hierarchy. Instead, they are properties of each of the keys.

The Registry provider supports all of the Item cmdlets (*-Item), such as Get-Item, Copy-Item, and Rename Item. Use the Item cmdlets when working with registry keys and subkeys. The Registry provider also supports the ItemProperty cmdlets (*-ItemProperty). Use the ItemProperty cmdlets when working with registry values and data. You cannot use the Content cmdlets (*-Content), with the Registry provider.

Each registry key is protected by a security descriptor. You can use Get-Acl to view the security descriptor of a key.</para>
</DetailedDescription>

<Capabilities>
	<para>ShouldProcess</para>
</Capabilities>
<Filters>
	<para></para>
</Filters>
<Notes>
	
</Notes>
<Tasks>
	<Task>
  		<Title>
			Navigating the Registry
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Sets the current location to the HKEY_LOCAL_MACHINE\Software registry key.</para>
				</Introduction> 
	  			<Code>
					set-location hklm:\software
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>Displays the current location.</para>
				</Introduction> 
	  			<Code>
					get-location 
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Managing Registry Keys
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Displays information about each immediate subkey of the HKEY_LOCAL_MACHINE\Software registry key.</para>
				</Introduction> 
	  			<Code>
					get-childitem -path hklm:\Software
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>Creates a new subkey named TestNew as a child of the HKCU:\Environment subkey.</para>
				</Introduction> 
	  			<Code>
					new-item -path hkcu:\Environment\TestNew
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>Remove the subkey named TestNew, which is a child of the HKEY_CURRENT_USER\Environment key.</para>
				</Introduction> 
	  			<Code>
					remove-item -path hkcu:\Environment\TestNew
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 4 --------------------------
				</Title> 
				<Introduction>
					<para>Copies the key named TestNew to a subkey named TestCopy. </para>
				</Introduction> 
	  			<Code>
					copy-item -path ` hkcu:\Environment\TestNew  hkcu:\Environment\TestNew\TestCopy
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 5 --------------------------
				</Title> 
				<Introduction>
					<para>Displays information about all subkeys below the HKEY_LOCAL_MACHINE\Software registry key.</para>
				</Introduction> 
	  			<Code>
					get-childitem -path hklm:\Software -recurse
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 6 --------------------------
				</Title> 
				<Introduction>
					<para>Moves the HKEY_CURRENT_USER\Environment\testnewcopy registry key and its properties along with all of its subkeys and their properties to HKEY_CURRENT_USER\Environment\testnewcopy.</para>
				</Introduction> 
	  			<Code>
					move-item -path hkcu:\environment\testnewcopy `
-destination hkcu:\environment\testnew
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 7 --------------------------
				</Title> 
				<Introduction>
					<para>Renames the HKEY_CURRENT_USER\Environment\testnew registry key to HKEY_CURRENT_USER\Environment\test.</para>
				</Introduction> 
	  			<Code>
					rename-item -path hkcu:\environment\testnew\ -newname test
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 8 --------------------------
				</Title> 
				<Introduction>
					<para>get-acl -path hkcu:\environment\testnew | format-list -property *</para>
				</Introduction> 
	  			<Code>
					
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Managing Registry Entries
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>Displays the Value Name and Data for each registry entry contained in the HKEY_CURRENT_USER\Environment registry key. </para>
				</Introduction> 
	  			<Code>
					get-itemproperty -path hkcu:\Environment 
				</Code>
				<Remarks>
					<para>The Default registry entry is returned only if it has a value.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>Displays the Value Name and Data for the Temp registry entry contained in the HKEY_CURRENT_USER\Environment registry key.</para>
				</Introduction> 
	  			<Code>
					get-itemproperty -path hkcu:\Environment -name Temp
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>Creates a new registry entry named pstest in the HKEY_CURRENT_USER key and sets its value to &quot;pstestvalue&quot;.</para>
				</Introduction> 
	  			<Code>
					new-itemproperty -path hkcu:\environment -name &quot;pstest&quot; -value &quot;pstestvalue&quot;
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 4 --------------------------
				</Title> 
				<Introduction>
					<para>Updates the value of the registry entry in the HKEY_CURRENT_USER\Environment key named pstest to &quot;updatedvalue&quot;.</para>
				</Introduction> 
	  			<Code>
					set-itemproperty -path hkcu:\environment -name pstest 
-value &quot;updatedvalue&quot;
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 5 --------------------------
				</Title> 
				<Introduction>
					<para>Renames the value name of the registry entry in the HKEY_CURRENT_USER\Environment key named pstest to pstestnew.</para>
				</Introduction> 
	  			<Code>
					rename-itemproperty -path hkcu:\environment -name pstest `
-newname pstestnew
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 6 --------------------------
				</Title> 
				<Introduction>
					<para>Copies the registry entry named pstestnew from the HKEY_CURRENT_USER\Environment key to the HKEY_CURRENT_USER\Environment\testnewcopy key.</para>
				</Introduction> 
	  			<Code>
					copy-itemproperty -path hkcu:\environment ` 
-destination hkcu:\environment\testnewcopy -name pstestnew
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 7 --------------------------
				</Title> 
				<Introduction>
					<para>Moves the registry entry named pstestnew from the HKEY_CURRENT_USER\environment\testnewcopy key to the HKEY_CURRENT_USER\environment\testnew key.</para>
				</Introduction> 
	  			<Code>
					move-itemproperty -path hkcu:\environment\testnewcopy ` 
-destination hkcu:\environment\testnew -name pstestnew
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 8 --------------------------
				</Title> 
				<Introduction>
					<para>Clears the value of the registry entry named pstestnew in the HKEY_CURRENT_USER\Environment\testnew key.</para>
				</Introduction> 
	  			<Code>
					clear-itemproperty -path hkcu:\environment\testnew -name pstestnew
				</Code>
				<Remarks>
					<para>You can use the Clear-Item cmdlet to clear the value of the default registry entry for a subkey. For example, clear-item -path hkcu:\environment\testnew clears the value of the default entry of the HKEY_CURRENT_USER\Environment\testnew registry key.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 9 --------------------------
				</Title> 
				<Introduction>
					<para>Removes the registry entry named pstestnew from the HKEY_CURRENT_USER\Environment\testnew registry key.</para>
				</Introduction> 
	  			<Code>
					remove-itemproperty -path hkcu:\environment\testnew `
-name pstestnew
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 10 --------------------------
				</Title> 
				<Introduction>
					<para>Updates the value of the default registry entry in the HKEY_CURRENT_USER\Environment\testnew key to &quot;default value&quot;</para>
				</Introduction> 
	  			<Code>
					set-itemproperty -path hkcu:\environment\testnew `
-name &quot;(default)&quot; -value &quot;default value&quot;
				</Code>
				<Remarks>
					<para>You can also update the default value of a registry key by using the Set-Item cmdlet. For example, set-item -path hkcu:\environment\testnew -value &quot;another default value&quot; updates the default value of the testnew key.</para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
</Tasks>
<DynamicParameters>
	<DynamicParameter>
		<Name>Type</Name>

		<CmdletSupported>Set-Item</CmdletSupported>

		<Type>
            		<Name>Microsoft.Win32.RegistryValueKind</Name>
      		</Type>

      		<Description></Description>

		<PossibleValues>
			<PossibleValue>
				<Value></Value>

				<Description>
					<para></para>
				</Description>

			</PossibleValue>
		</PossibleValues>
	</DynamicParameter>
</DynamicParameters>
<RelatedLinks>	
</RelatedLinks>
</providerHelp>

<providerHelp>
<Name>
	Variable
</Name>
<Drives>
	<Para>Variable:</Para>
</Drives>
<Synopsis>
	Provides access to the Windows PowerShell variables and their values.
</Synopsis>

<DetailedDescription>
	<para>The Windows PowerShell Variable provider lets you get, add, change, clear, and delete Windows PowerShell variables in the current console.

The Windows PowerShell Variable provider supports the variables that Windows PowerShell creates, including the automatic and preference variables, and the variables that you create.

The Variable provider is a flat namespace that consists only of the variable objects. The variables have no child items.

Most of the variables are instances of the System.Management.Automation.PSVariable class. However, there are some variations. For example, the &quot;?&quot; variable is a member of the QuestionMarkVariable class and the &quot;MaximumVariableCount&quot; variable is a member of the SessionStateCapacityVariable class.

The Variable provider exposes its data store in the Variable: drive. To work with variables, you can change your location to the Variable: drive (&quot;set-location variable:&quot;) or work from any other Windows PowerShell drive. To reference an variable from another location, use the drive name, &quot;Variable:&quot; in the path. 

Windows PowerShell includes a set of cmdlets designed especially to view and change variables:
Get-Variable
New-Variable
Set-Variable
Remove-Variable
Clear-Variable

When you use these cmdlets, you do not need to specify the Variable: drive in the name.

The Variable provider supports all of the Item cmdlets (*-Item), except for Invoke-Item, and it supports the Get-Content and Set-Content cmdlets (*-Content). However, it does not support the ItemProperty cmdlets (*-ItemProperty) and it does not support the Filter parameter in any cmdlet. 

You can also use the Windows PowerShell expression parser to create, view, and change the values of variables without using the cmdlets. When working with variables directly, use a dollar sign ($) to identify the name as a variable and the assignment operator (=) to establish and change its value. For example, &quot;$p = get-process&quot; creates the &quot;p&quot; variable and stores the results of a &quot;get-process&quot; command in it.

All changes to the variables affect the current console only. To save the changes, add the changes to the Windows PowerShell profile, or use Export-Console to save the current console.</para>
</DetailedDescription>

<Capabilities>
	<para></para>
</Capabilities>
<Filters>
	<para></para>
</Filters>
<Notes>
	The Variable provider does not support any dynamic parameters.
</Notes>
<Tasks>
	<Task>
  		<Title>
			Getting to the Variable: drive
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command changes the current location to the variable: drive. You can use this command from any drive in Windows PowerShell. To return to a file system drive, type the drive name, such as &quot;set-location c:&quot;</para>
				</Introduction> 
	  			<Code>
					set-location variable:
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Display the value of variables
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command gets the list of all variables and their values in the current session. You can use this command from any Windows PowerShell drive.</para>
				</Introduction> 
	  			<Code>
					get-childitem -path variable:
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command gets the variables with names that begin with &quot;max&quot;.You can use this command from any Windows PowerShell drive.</para>
				</Introduction> 
	  			<Code>
					get-childitem -path variable:max*
				</Code>
				<Remarks>
					<para>If you are in the variable: drive, you can omit the drive name from the path.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>This command gets the value of the WhatIfPreference by typing it at the command line.

The name of the variable is preceded by a dollar sign ($) to indicate that it is a variable. The Variable: drive name is not specified.</para>
				</Introduction> 
	  			<Code>
					$WhatIfPreference
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 4 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the LiteralPath parameter of Get-Childitem to get the value of the &quot;?&quot; variable from within the Variable: drive. Get-Childitem does not attempt to resolve any wildcards in the values of LiteralPath parameter.</para>
				</Introduction> 
	  			<Code>
					get-childitem -literalpath ?
				</Code>
				<Remarks>
					<para>To display the value of a variable with a special character name without a cmdlet, type a dollar sign ($) and the variable name. For example, to display the value of the &quot;?&quot; variable, type &quot;$?&quot;.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 5 --------------------------
				</Title> 
				<Introduction>
					<para>This command gets the variable that have the values of &quot;ReadOnly&quot; or &quot;Constant&quot; for their Options property.</para>
				</Introduction> 
	  			<Code>
					get-childitem -path variable: | where-object {$_.options -match &quot;Constant&quot; -or $_.options -match &quot;ReadOnly&quot;} | format-list -property name, value, options
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Creating a new variable
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command creates the &quot;services&quot; variable and stores the results of a Get-Service command in it. Because the current location is in the variable: drive, the value of the Path parameter is a dot (.), which represents the current location.

The parentheses around the Get-Service command insure that the command is executed before the variable is created. Without the parentheses, the value of the new variable is a &quot;Get-Service&quot; string.</para>
				</Introduction> 
	  			<Code>
					new-item -path . -name services -value (Get-Service)
				</Code>
				<Remarks>
					<para>If you are not in the variable: drive, include the Variable: drive name in the path.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command creates a &quot;services&quot; variable and stores the result of a Get-Service command in it. 

The command uses a dollar sign ($) to indicate a variable and the assignment operator (=) to assign the result of the Get-Service command to the newly created variable.</para>
				</Introduction> 
	  			<Code>
					$services = Get-Service
				</Code>
				<Remarks>
					<para>To create a variable without a value, omit the assignment.</para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Displaying the properties and methods of variables.
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Get-Item cmdlet to get all variables. The pipeline operator sends the results to Get-Member, which displays the methods and properties of the object.</para>
				</Introduction> 
	  			<Code>
					get-item -path variable:* | get-member
				</Code>
				<Remarks>
					<para>When you pipe a collection of objects to Get-Member, such as the collection of variables in the variable: drive, Get-Member evaluates each object in the collection separately and returns information about each of the object types that it finds. 

To get information about the collection of objects in the Variable drive, use the InputObject parameter of Get-Member. For example, &quot;Get-Member -InputObject (Get-Item variable:*)&quot;. When you use InputObject, Get-Member evaluates the collection, not the objects in the collection.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command lists the values of the properties of the &quot;home&quot; variable. It uses the Get-Item cmdlet to get an object that represents the &quot;home&quot; variable. The pipeline operator sends the results to Format-List. The Format-List command uses the Property parameter with a value of all (*) to format and display the values of all of the properties of the &quot;dir&quot; variable.</para>
				</Introduction> 
	  			<Code>
					get-item variable:home | format-list -property *
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Changing the properties of an variable.
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Rename-Item cmdlet to change the name of the &quot;a&quot; variable to &quot;processes.&quot;</para>
				</Introduction> 
	  			<Code>
					rename-item -path variable:a -newname processes
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Set-Item cmdlet to change the value of the ErrorActionPreference variable to &quot;Stop&quot;.</para>
				</Introduction> 
	  			<Code>
					set-item -path variable:ErrorActionPreference -value Stop
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 3 --------------------------
				</Title> 
				<Introduction>
					<para>This command changes the value of the ErrorActionPreference variable to &quot;Stop&quot;.

It uses a dollar sign ($) to indicate a variable and the assignment operator (=) to assign the value.</para>
				</Introduction> 
	  			<Code>
					$ErrorActionPreference = Stop
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Copying a variable
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Copy-Item cmdlet to copy the &quot;processes&quot; variable to &quot;old_processes&quot;. This creates a new variable named &quot;old_processes&quot; that has the same value as the &quot;processes&quot; variable.</para>
				</Introduction> 
	  			<Code>
					copy-item -path variable:processes -destination variable:old_processes
				</Code>
				<Remarks>
					<para>If the command is issued from within the variable: drive, you can omit the drive name from the value of the path parameter.</para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command copies the &quot;processes&quot; variable to &quot;old_processes&quot; without using a cmdlet. It uses the dollar sign ($) to indicate variables and the assignment operator to assign the value of $processes to old_processes. </para>
				</Introduction> 
	  			<Code>
					$old_processes = $processes
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Delete a variable
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command deletes the &quot;serv&quot; variable from the current console. You can use this command in any Windows PowerShell drive.</para>
				</Introduction> 
	  			<Code>
					remove-variable -path variable:serv
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command deletes all variables from the current console, except those with a value of Constant for their Options property. Without the Force parameter, the command does not delete variables with the value of ReadOnly for their Options property.</para>
				</Introduction> 
	  			<Code>
					remove-item variable:* -force
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
	<Task>
  		<Title>
			Set the value of a variable to NULL.
		</Title>

   		<Description>
			<para></para>		
		</Description>

		<Examples>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 1 --------------------------
				</Title> 
				<Introduction>
					<para>This command uses the Clear-Item cmdlet to change the value of the &quot;processes&quot; variable to NULL.</para>
				</Introduction> 
	  			<Code>
					clear-item -path variable:processes
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
                        <Example>
                        	<Title>
					-------------------------- EXAMPLE 2 --------------------------
				</Title> 
				<Introduction>
					<para>This command clears the value of the &quot;processes&quot; variable by assigning a null value to it. It uses the $null automatic variable to represent the NULL value.</para>
				</Introduction> 
	  			<Code>
					$processes = $null
				</Code>
				<Remarks>
					<para></para>
	  			</Remarks>
			</Example>
		</Examples>
	</Task>
</Tasks>
<DynamicParameters>
</DynamicParameters>
<RelatedLinks>
	About_Automatic_Variables
	About_Shell_Variable
	About_Provider
</RelatedLinks>
</providerHelp>

</helpItems>
