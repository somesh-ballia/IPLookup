<?xml version="1.0" encoding="utf-8" ?>

<helpItems xmlns="http://msh" schema="maml">

<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Add-Content
		</command:name>
		<maml:description>
			<maml:para>Adds content to the specified item(s).</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>add</command:verb>
		<command:noun>content</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Add-Content cmdlet appends content to a specified item or file. You can specify the content by typing the content in the command or by specifying an object that contains the content.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Add-Content</maml:name>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the items that receive the additional content. Wildcards are permitted. If you specify multiple paths, use commas to separate the paths.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
				<maml:name>value</maml:name>
				<maml:description>
					<maml:para>Specifies the content to be added. Type a quoted string, such as &quot;This data is for internal use only&quot; or specify an object that contains content, such as the DateTime object that Get-Date generates. 

You cannot specify the contents of a file by typing its path, because the path is just a string, but you can use a Get-Content command to get the content and pass it to the Value parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Adds only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Add-Content</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the items that receive the additional content. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
				<maml:name>value</maml:name>
				<maml:description>
					<maml:para>Specifies the content to be added. Type a quoted string, such as &quot;This data is for internal use only&quot; or specify an object that contains content, such as the DateTime object that Get-Date generates. 

You cannot specify the contents of a file by typing its path, because the path is just a string, but you can use a Get-Content command to get the content and pass it to the Value parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Adds only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the items that receive the additional content. Wildcards are permitted. If you specify multiple paths, use commas to separate the paths.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Adds only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
			<maml:name>value</maml:name>
			<maml:description>
				<maml:para>Specifies the content to be added. Type a quoted string, such as &quot;This data is for internal use only&quot; or specify an object that contains content, such as the DateTime object that Get-Date generates. 

You cannot specify the contents of a file by typing its path, because the path is just a string, but you can use a Get-Content command to get the content and pass it to the Value parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the items that receive the additional content. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						You can enter parameters as strings at the command line or pipe objects to the cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None by default. If -passthru is specified, the content object is passed through the pipeline.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Add-Content -detailed&quot;. For technical information, type &quot;Get-Help Add-Content -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Add-Content by its built-in alias, &quot;ac&quot;. For more information, type &quot;get-help About_Alias&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>add-content -path *.txt -exclude help* -value &quot;END&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command adds &quot;END&quot; to all text files in the current directory, except for those with file names that begin with &quot;help&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>      </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>add-content -Path file1.log, file2.log -Value (get-date) -passthru.</dev:code>
  			<dev:remarks>
				<maml:para>This command adds the date to the end of the File1.log and File2.log files and then displays the date at the command line. The command uses the Get-Date cmdlet to get the date and the Value parameter to pass the date to Add-Content. The Passthru parameter passes an object representing the added content through the pipeline. Because there is no other cmdlet to receive the passed object, it is displayed at the command line.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>add-content -path monthly.txt -value (get-content c:\rec1\weekly.txt) </dev:code>
  			<dev:remarks>
				<maml:para>This command adds the contents of the Weekly.txt file to the end of the Monthly.txt file. It uses the Get-Content cmdlet to get the contents of the Weekly.txt file and the Value parameter to pass the content of weekly.txt to Add-Content. The parentheses insure that the Get-Content command is complete before the add-content command begins.cls

You can also copy the content of Weekly.txt to a variable, such as $w, and then use the Value parameter to pass the variable to Add-Content. In that case, the command would be &quot;add-content -path monthly.txt -value $w&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Content</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Content</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Content</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Clear-Content
		</command:name>
		<maml:description>
			<maml:para>Deletes the contents of a item, such as deleting the text from a file, but does not delete the item.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>clear</command:verb>
		<command:noun>content</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Clear-Content cmdlet deletes the contents of an item, such as deleting the text from a file, but does not delete the item. As a result, the item exists, but is empty. Clear-Content is similar to Clear-Item, but works on files, instead of aliases and variables.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Clear-Content</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the paths to the items from which content is deleted. Wildcards are permitted. The paths must be paths to items, not to containers. For example, you must specify a path to one more files, not a path to a directory. Wildcards are permitted. This parameter is required, but the parameter name (&quot;-Path&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Clears only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Clear-Content</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the paths to the items from which content is deleted. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Clears only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the paths to the items from which content is deleted. Wildcards are permitted. The paths must be paths to items, not to containers. For example, you must specify a path to one more files, not a path to a directory. Wildcards are permitted. This parameter is required, but the parameter name (&quot;-Path&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Clears only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies the paths to the items from which content is deleted. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects piped into this cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified. Then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Clear-Content -detailed&quot;. For technical information, type &quot;Get-Help Clear-Content -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Clear-Content by its built-in alias, &quot;clc&quot;. For more information, see About_Alias.

If you omit the -Path parameter name, the value of -Path must be the first parameter in the command. For example, &quot;clear-content c:\mydir\*.txt&quot; If you include the parameter name, you can list the parameters in any order.

You can use Clear-Content with the PowerShell File System provider and with other providers that manipulate content. To clear items that are not considered to be content, such as items managed by the PowerShell Certificate or Registry providers, use Clear-Item.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>clear-content ..\SmpUsers\*\init.txt</dev:code>
  			<dev:remarks>
				<maml:para>This command deletes all of the content from the &quot;init.txt&quot; files in all subdirectories of the SmpUsers directory. The files are not deleted, but they are empty.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>clear-content -path * -filter *.log -force</dev:code>
  			<dev:remarks>
				<maml:para>This command deletes the contents of all files in the current directory with the &quot;.log&quot; file name extension, including files with the read-only attribute. The asterisk (*) in the path represents all items in the current directory. The Force parameter makes the command effective on read-only files. Using a filter to restrict the command to files with the &quot;.log&quot; file name extension, instead of specifying &quot;*.log&quot; in the path makes the operation faster.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>clear-content c:\Temp\* -Include Smp* -Exclude *2* -whatif</dev:code>
  			<dev:remarks>
				<maml:para>This command requests a prediction of what would happen if you submitted the command: &quot;clear-content c:\temp\* -include smp* -exclude *2*&quot;. The result lists the files that would be cleared, in this case, files in the Temp directory whose names begin with &quot;Smp&quot;, unless the file names include a &quot;2&quot;. To execute the command, run it again without the Whatif parameter.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Content</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Content</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Add-Content</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Clear-Item
		</command:name>
		<maml:description>
			<maml:para>Deletes the contents of an item, but does not delete the item.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>clear</command:verb>
		<command:noun>item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Clear-Item cmdlet deletes the value of an item, but does not delete the item. For example, Clear-Item can delete the value of a variable, but it does not delete the variable. The value that used to represent a cleared item is defined by each Windows PowerShell provider.  Clear-Item is similar to Clear-Content, but works on aliases and variables, instead of files.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Clear-Item</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the items being cleared. Wildcards are permitted. This parameter is required, but the parameter name (&quot;-Path&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Clears only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Clear-Item</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the items being cleared. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Clears only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the items being cleared. Wildcards are permitted. This parameter is required, but the parameter name (&quot;-Path&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Clears only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the items being cleared. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Any Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or:
Parameters marked as 'allow pipeline input' may come from named properties of objects piped into this cmdlet. 
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>none</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless:
If passthru is specified, then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Clear-Item -detailed&quot;. For technical information, type &quot;Get-Help Clear-Item -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

The Clear-Item cmdlet is supported only by several Windows PowerShell providers, including the Alias, Environment, Function, Registry, and Variable providers. As such, you can use Clear-Item to delete the content of items in the provider namespaces.
 
You cannot use Clear-Item to delete the contents of a file, because the Windows PowerShell FileSystem provider doesn't support this cmdlet. To clear files, use Clear-Content.

You can also refer to Clear-Item by its built-in alias, &quot;cli&quot;. For more information, type &quot;get-help About_Alias&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>clear-item Variable:TestVar1</dev:code>
  			<dev:remarks>
				<maml:para>This command deletes the value of the variable, Testvar1. The variable remains and is valid, but its value is set to null. 
  
The variable name is prefixed with &quot;Varible:&quot; to indicate the PowerShell Variable provider. To get the same result, you can switch to the PowerShell Variable provider namespace first and then perform the Clear-Item command.

    PS C:&gt; Set-location Variable:
    PS Variable:\&gt; clear-item Testvar1</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>clear-item Alias:dog* -include *1* -exclude *3* -whatif</dev:code>
  			<dev:remarks>
				<maml:para>This command asks PowerShell what would happen if you executed the command, &quot;clear-item variable:dog* -include *1* -exclude *3&quot;. In response, Windows PowerShell explains that it would delete the value of dog1:

    &quot;What if: Performing operation &quot;Clear Item&quot; on Target &quot;Item: dog1&quot;.&quot;

This command would not have any effect on dog, dog2, or dog 13. Because the Alias provider does not permit an alias without a aliased object, when you clear an alias, you also delete the alias.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>clear-item registry::HKLM\Software\MyCompany\MyKey -confirm</dev:code>
  			<dev:remarks>
				<maml:para>This command deletes all registry entries in the MyKey subkey, but only after prompting you to confirm your intent. It does not delete the MyKey subkey or affect any other registry keys or entries. You can use the Include and Exclude parameters to identify particular registry keys, but you cannot use them to identify registry entries. To delete particular registry entries, use Remove-Itemproperty. To delete the value of a registry entry, use Clear-Itemproperty.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Copy-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Clear-ItemProperty
		</command:name>
		<maml:description>
			<maml:para>Deletes the value of a property but it does not delete the property. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>clear</command:verb>
		<command:noun>itemproperty</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Clear-ItemProperty cmdlet deletes the value of a property, but it does not delete the property. You can use this cmdlet to delete the data from a registry value.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Clear-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the property being cleared. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the property to be cleared, such as the name of a registry value. Wildcards are not permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Clears only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot; or &quot;s*. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Clear-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the property being cleared. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the property to be cleared, such as the name of a registry value. Wildcards are not permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Clears only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot; or &quot;s*. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the property being cleared. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the property to be cleared, such as the name of a registry value. Wildcards are not permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Clears only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot; or &quot;s*. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the property being cleared. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters marked to allow pipeline input may take direct input or input from other Cmdlets.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified, in which case the result is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Clear-ItemProperty -detailed&quot;. For technical information, type &quot;Get-Help Clear-ItemProperty -full&quot;.

You can use Clear-ItemProperty to delete the data in registry values without deleting the value. If the data type of the value is Binary or DWORD, clearing the data sets the value to zero. Otherwise, the value is empty.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Clear-ItemProperty by its built-in alias, &quot;clp&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>clear-itemproperty -path HKLM:\Software\MyCompany\MyApp -name Options</dev:code>
  			<dev:remarks>
				<maml:para>This command deletes the data in the Options registry value in the MyApp subkey of HKEY_LOCAL_MACHINE\Software\MyCompany.

Because the command is being issued from a file system drive (C:), it uses the fully qualified path to the HKLM: drive and the Software\MyCompany\MyApp subkey. It uses the Name parameter to specify the Options value.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Copy-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Convert-Path
		</command:name>
		<maml:description>
			<maml:para>Converts a path from a Windows PowerShell path to a Windows PowerShell provider path.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>convert</command:verb>
		<command:noun>path</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Converts a path from a Windows PowerShell path to a Windows PowerShell provider path. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Convert-Path</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the Windows PowerShell path to be converted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Convert-Path</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the path to be converted. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the Windows PowerShell path to be converted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to be converted. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects piped into this Cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Convert-Path -detailed&quot;. For technical information, type &quot;Get-Help Convert-Path -full&quot;.

The path cmdlets (*-path) manipulate path names and return the names in a concise format that all Windows PowerShell providers can interpret. They are designed for use in programs and scripts where you want to display all or part of a path name in a particular format. Use them like you would use Dirname, Normpath, Realpath, Join, or other path manipulators.

You can use the path cmdlets with several providers, including the FileSystem, Registry, and Certificate providers.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>convert-path ~</dev:code>
  			<dev:remarks>
				<maml:para>This command expands the current working directory.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>convert-path HKLM:\software\microsoft</dev:code>
  			<dev:remarks>
				<maml:para>This command converts the Windows PowerShell provider path to a standard registry path.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Test-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Split-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Resolve-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Join-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Copy-Item
		</command:name>
		<maml:description>
			<maml:para>Copies an item from one location to another within a namespace.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>copy</command:verb>
		<command:noun>item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Copies an item from one location to another in a namespace. Copy-Item does not delete the items being copied. The particular items that the cmdlet can copy depend on the Windows PowerShell providers available. For example, when used with the FileSystem provider, it can copy files and directories and when used with the Registry provider, it can copy registry keys and entries.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Copy-Item</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the items to copy.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>destination</maml:name>
				<maml:description>
					<maml:para>Specifies the path to where the items are to be copied.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>container</maml:name>
				<maml:description>
					<maml:para>Preserves container objects during the copy operation.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>recurse</maml:name>
				<maml:description>
					<maml:para>Specifies a recursive copy.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Copy-Item</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the item. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>destination</maml:name>
				<maml:description>
					<maml:para>Specifies the path to where the items are to be copied.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>container</maml:name>
				<maml:description>
					<maml:para>Preserves container objects during the copy operation.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>recurse</maml:name>
				<maml:description>
					<maml:para>Specifies a recursive copy.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the items to copy.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified.</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>destination</maml:name>
			<maml:description>
				<maml:para>Specifies the path to where the items are to be copied.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>&lt;Current location&gt;</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>container</maml:name>
			<maml:description>
				<maml:para>Preserves container objects during the copy operation.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>True</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>recurse</maml:name>
			<maml:description>
				<maml:para>Specifies a recursive copy.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Allows cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>The credential is used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the item. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless the passthru parameter is specified. If the Passthru parameter is specified, the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Copy-Item  is like the 'cp' or 'copy' commands in other shells. 

For more information, type &quot;Get-Help Copy-Item -detailed&quot;. For technical information, type &quot;Get-Help Copy-Item -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>copy-item C:\Wabash\Logfiles\mar1604.log.txt -destination C:\Presentation</dev:code>
  			<dev:remarks>
				<maml:para>This command will copy the file mar1604.log.txt to the C:\Presentation directory. The command does not delete the original file.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>copy-item C:\Logfiles -destination C:\Drawings -recurse</dev:code>
  			<dev:remarks>
				<maml:para>This command copies the entire contents of the Logfiles directory into the Drawings directory. If the source directory contains files in subdirectories, those subdirectories will be copied with their file trees intact. The -container parameter is set to true by default. This preserves the directory structure.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>None.         </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>copy-item C:\Logfiles -destination C:\Drawings\Logs -recurse</dev:code>
  			<dev:remarks>
				<maml:para>This command copies the contents of the C:\Logfiles directory to the C:\Drawings\Logs directory. It will create the subdirectory \Logs if it does not already exist.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Clear-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Copy-ItemProperty
		</command:name>
		<maml:description>
			<maml:para>Copies a property and value from a specified location to another location.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>copy</command:verb>
		<command:noun>itemproperty</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Copies a property and value from a specified location to another location.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Copy-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the property to be copied.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>destination</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the destination location.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the property to be copied.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows the cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object, obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Copy-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the item property. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>destination</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the destination location.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the property to be copied.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows the cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object, obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the property to be copied.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>destination</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the destination location.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The Destination must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the property to be copied.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Allows the cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>The credential is used to validate access. If a PSCredential object, obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the item property. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters marked as allowing pipeline input may take input from other cmdlets or direct input.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless the Passthru specified is specified. If the Passthru parameter is specified, the result is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Copy-ItemProperty -detailed&quot;. For technical information, type &quot;Get-Help Copy-ItemProperty -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>copy-itemproperty -path MyApplication -destination HKLM:\Software\MyApplicationRev2 -name MyProperty</dev:code>
  			<dev:remarks>
				<maml:para>This command copies the property named MyProperty from the MyApplication registry key to the MyApplicationRev2 registry key.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Clear-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ChildItem
		</command:name>
		<maml:description>
			<maml:para>Gets the items and child items in one or more specified locations.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>childitem</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-Childitem cmdlet gets the items in one or more specified locations. If the item is a container, it gets the items inside the container, known as child items. You can use the Recurse parameter to get items in all child containers A location can be a file system location, such as a directory, or a location exposed by another provider, such as a registry hive or a certificate store.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ChildItem</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies a path to one or more locations. Wildcards are permitted. The default location is the current directory (.).</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="2">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Retrieves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted. 

The Include parameter is effective only when the command includes the Recurse parameter or the path leads to the contents of a directory, such as C:\Windows\*, where the wildcard character specifies the contents of the C:\Windows directory.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.

This parameter does not work properly in this cmdlet.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Retrieves only the names of the items in the locations. If you pipe the output of this command to another command, only the item names are sent.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>recurse</maml:name>
				<maml:description>
					<maml:para>Gets the items in the specified locations and in all child items of the locations. 

Recurse works only when the path points to a container that has child items, such as C:\Windows or C:\Windows\*, and not when it points to items that do not have child items, such as C:\Windows\*.exe.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ChildItem</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to one or more locations. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="2">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Retrieves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted. 

The Include parameter is effective only when the command includes the Recurse parameter or the path leads to the contents of a directory, such as C:\Windows\*, where the wildcard character specifies the contents of the C:\Windows directory.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.

This parameter does not work properly in this cmdlet.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Retrieves only the names of the items in the locations. If you pipe the output of this command to another command, only the item names are sent.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>recurse</maml:name>
				<maml:description>
					<maml:para>Gets the items in the specified locations and in all child items of the locations. 

Recurse works only when the path points to a container that has child items, such as C:\Windows or C:\Windows\*, and not when it points to items that do not have child items, such as C:\Windows\*.exe.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies a path to one or more locations. Wildcards are permitted. The default location is the current directory (.).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>&lt;NOTE: if not specified uses the Current location&gt;</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Retrieves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted. 

The Include parameter is effective only when the command includes the Recurse parameter or the path leads to the contents of a directory, such as C:\Windows\*, where the wildcard character specifies the contents of the C:\Windows directory.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.

This parameter does not work properly in this cmdlet.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="2">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Retrieves only the names of the items in the locations. If you pipe the output of this command to another command, only the item names are sent.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>recurse</maml:name>
			<maml:description>
				<maml:para>Gets the items in the specified locations and in all child items of the locations. 

Recurse works only when the path points to a container that has child items, such as C:\Windows or C:\Windows\*, and not when it points to items that do not have child items, such as C:\Windows\*.exe.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>codeSigningCert</maml:name>
			<maml:description>
				<maml:para>Retrieves only the certificates that have code signing authority. This parameter is valid only when using the Windows PowerShell Certificate provider. For more information, type &quot;get-help about_provider&quot; and &quot;get-help about_signing&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to one or more locations. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						String - You can type parameters as strings at the command line or pipe objects to the cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						Determined by the provider. For example, the FileSystem provider returns FileInfo objects and the Registry provider returns RegistryKey objects. When the -Name parameter is used, the output object is a string, regardless of the provider.
Strings (When the -Name parameter is set to true)
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-ChildItem -detailed&quot;. For technical information, type &quot;Get-Help Get-ChildItem -full&quot;.

Get-Childitem does not get hidden items by default. To get hidden items, use -Force.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Get-ChildItem by its built-in aliases, &quot;ls&quot;, &quot;dir&quot;, and &quot;gci&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the child items in the current location. If the location is a file system directory, it gets the files and sub-directories in the current directory. If the item does not have child items, this command returns to the command prompt without displaying anything.

The default displays lists the mode (attributes), last write time, file size (length), and the name of the file. The valid values for mode are: d (directory), a (archive), r (read-only), h (hidden), and s (system).</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem . -Include *.txt -Recurse</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves all of the .txt files in the current directory and all of the subdirectories. The dot (&quot;.&quot;) represents the current directory and the Include parameter specifies the file name extension. The Recurse parameter directs Windows PowerShell to retrieve objects recursively, and indicates that the subject of the command is the specified directory and its contents.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem c:\windows\logs\* -include *.txt -exclude A*</dev:code>
  			<dev:remarks>
				<maml:para>This command lists the .txt files in the Logs subdirectory, except for those whose names start with the letter A. It uses the wildcard character (*) to indicate the contents of the Logs subdirectory, not the directory container. Because the command does not include the Recurse parameter, Get-Childitem does not include the content of directory automatically; you need to specify it.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem registry::hklm\software</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves all of the registry keys in the HKEY_LOCAL_MACHINE\SOFTWARE key in the registry of the local computer.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem -name</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves only the names of items in the current directory. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem cert:\. -recurse -codesigningcert</dev:code>
  			<dev:remarks>
				<maml:para>This command gets all of the certificates in the certificate store that have code-signing authority. The command uses the Get-Childitem cmdlet. The path specifies the Cert: drive exposed by the Windows PowerShell certificate provider. The backslash (\) symbol specifies a subdirectory of the certificate store and the dot (.) represents the current directory, which would be the root directory of the certificate store. The Recurse parameter specifies a recursive search and the CodeSigningCertificate parameter gets only certificates with code-signing authority.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem * -Include *.exe</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves all of the items in the current directory with a &quot;.exe&quot; file name extension. The wildcard character (*) represents the contents of the current directory (not the container). When using the Include parameter without the Recurse parameter, the path must point to contents, not a container.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Location</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Process</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Content
		</command:name>
		<maml:description>
			<maml:para>Gets the content of the item at the specified location.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>content</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-Content cmdlet gets the content of the item at the location specified by the path, such as the text in a file. It reads the content one line at a time and returns an object for each line.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Content</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to an item. Get-Content retrieves the content of the item. Wildcards are permitted. The parameter name (&quot;-Path&quot; or &quot;-FilePath&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>totalCount</maml:name>
				<maml:description>
					<maml:para>Specifies how many lines of content are retrieved. The default is -1 (all lines).</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">long</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>readCount</maml:name>
				<maml:description>
					<maml:para>Specifies how many lines of content are sent through the pipeline at a time. The default value, 0, sends all of the content at one time. 

This parameter does not change the content displayed, but it does affect the time it takes to display the content. As the value of ReadCount increases, the time it takes to return the first line increases, but the total time for the operation decreases. This can make a perceptible difference in very large items.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">long</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Retrieves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. 

Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>encoding</maml:name>
				<maml:description>
					<maml:para>Specifies the type of character encoding used to display the content. This parameter works only with the Windows PowerShell FileSystem provider.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Unknown</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >String</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Unicode</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Byte</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >BigEndianUnicode</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >UTF8</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >UTF7</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Ascii</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Content</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the path to an item. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>totalCount</maml:name>
				<maml:description>
					<maml:para>Specifies how many lines of content are retrieved. The default is -1 (all lines).</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">long</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>readCount</maml:name>
				<maml:description>
					<maml:para>Specifies how many lines of content are sent through the pipeline at a time. The default value, 0, sends all of the content at one time. 

This parameter does not change the content displayed, but it does affect the time it takes to display the content. As the value of ReadCount increases, the time it takes to return the first line increases, but the total time for the operation decreases. This can make a perceptible difference in very large items.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">long</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Retrieves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. 

Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>encoding</maml:name>
				<maml:description>
					<maml:para>Specifies the type of character encoding used to display the content. This parameter works only with the Windows PowerShell FileSystem provider.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Unknown</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >String</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Unicode</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Byte</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >BigEndianUnicode</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >UTF8</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >UTF7</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Ascii</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to an item. Get-Content retrieves the content of the item. Wildcards are permitted. The parameter name (&quot;-Path&quot; or &quot;-FilePath&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>totalCount</maml:name>
			<maml:description>
				<maml:para>Specifies how many lines of content are retrieved. The default is -1 (all lines).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">long</command:parameterValue>
			<dev:type>
				<maml:name>long</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>0</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>readCount</maml:name>
			<maml:description>
				<maml:para>Specifies how many lines of content are sent through the pipeline at a time. The default value, 0, sends all of the content at one time. 

This parameter does not change the content displayed, but it does affect the time it takes to display the content. As the value of ReadCount increases, the time it takes to return the first line increases, but the total time for the operation decreases. This can make a perceptible difference in very large items.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">long</command:parameterValue>
			<dev:type>
				<maml:name>long</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>1</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Retrieves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. 

Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>encoding</maml:name>
			<maml:description>
				<maml:para>Specifies the type of character encoding used to display the content. This parameter works only with the Windows PowerShell FileSystem provider.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">FileSystemCmdletProviderEncoding</command:parameterValue>
			<dev:type>
				<maml:name>FileSystemCmdletProviderEncoding</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Unknown</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>String</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Unicode</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Byte</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>BigEndianUnicode</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>UTF8</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>UTF7</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Ascii</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to an item. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						no description
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						no description
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-Content -detailed&quot;. For technical information, type &quot;Get-Help Get-Content -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Get-Content by its built-in aliases, &quot;cat&quot;, &quot;type&quot; and &quot;gc&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-content -Path C:\Chapters\chapter1.txt</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the content of the Chapter1.txt file on the console. It uses the Path parameter to specify the name of the item. Get-Content actually passes the content down the pipeline, but because there are no other pipeline elements, the content is formatted and displayed on the console.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-content c:\Logs\Log060912.txt -totalcount 50 | set-content sample.txt</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the first 50 lines of the Log060912.txt file and stores it in the sample.txt file. The command uses the Get-Content cmdlet to get the text in the file. (The name of Path parameter, which is optional, is omitted.) The TotalCount parameter limits the retrieval to the first 50 lines. The pipeline operator (|) sends the result to Set-Content which places it in the sample.txt file. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Add-Content</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Content</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Content</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-EventLog
		</command:name>
		<maml:description>
			<maml:para>Gets information about local event logs or the entries stored in those event logs.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>eventlog</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Gets information about local event logs or the entries stored in those event logs.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-EventLog</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>logName</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the log file from which to get events.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>newest</maml:name>
				<maml:description>
					<maml:para>Gets the newest 'n' event log entries, where 
'n' represents a numerical value for the newest 
entries in the eventlog.
Event logs commonly contain tens of thousands 
of event log entries, or perhaps more, so consider 
using the -Newest parameter to limit the number 
of entries returned.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-EventLog</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>list</maml:name>
				<maml:description>
					<maml:para>Returns a list of all event logs, rather than the entries from a specific log.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>asString</maml:name>
				<maml:description>
					<maml:para>Sends the output as strings instead of objects.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>logName</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the log file from which to get events.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>list</maml:name>
			<maml:description>
				<maml:para>Returns a list of all event logs, rather than the entries from a specific log.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>asString</maml:name>
			<maml:description>
				<maml:para>Sends the output as strings instead of objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>newest</maml:name>
			<maml:description>
				<maml:para>Gets the newest 'n' event log entries, where 
'n' represents a numerical value for the newest 
entries in the eventlog.
Event logs commonly contain tens of thousands 
of event log entries, or perhaps more, so consider 
using the -Newest parameter to limit the number 
of entries returned.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Object, String</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						If the Logname parameter is specified, the output is a collection of EventLogEntry objects.

If only the List parameter is specified, the output is a collection of EventLog objects. 

If both the List and AsString parameters are specified, the output is a collection of Strings.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          The EventID property of an event consists of the two 
low-order bytes of the System.Diagnostics.EventLogEntry.EventID 
property. Windows PowerShell defines a Script Property named EventID, which overrides the EventID property and returns only the two low-order bytes. You can retrieve the original EventID property value by using the get_EventID() method.

For more information, type &quot;Get-Help Get-EventLog  -detailed&quot;. For technical information, type &quot;Get-Help Get-EventLog -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-eventlog -list</dev:code>
  			<dev:remarks>
				<maml:para>This command displays information about the event logs on the computer.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-eventlog -newest 5 -logname application</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the 5 most recent entries in the Application event log.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$events = get-eventlog -logname system -newest 1000
$events | group-object eventid</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the 1000 most recent entries from the System event log and stores them in the $events variable. The results are then pipelined to the group-object cmdlet to group them by event id.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText></maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Item
		</command:name>
		<maml:description>
			<maml:para>Gets the item at the specified location.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-Item cmdlet gets the item at the specified location. It does not get contents of the item at the location, unless you use a wildcard character (*) to request all contents of the item.

The Get-Item cmdlet is used by Windows PowerShell providers to enable you to navigate through different types of data stores.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Item</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to an item. Get-Item gets the item at the specified location. Wildcards are permitted. This parameter is required, but the parameter name (&quot;-Path&quot;) is optional.

Use a dot (.) to specify the current location. Use the wildcard character (*) to specify the all items in the current location.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Retrieves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.

The Include parameter is effective only when the command includes the contents of a item, such as C:\Windows\*, where the wildcard character specifies the contents of the C:\Windows directory.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.

The Exclude parameter is effective only when the command includes the contents of a item, such as C:\Windows\*, where the wildcard character specifies the contents of the C:\Windows directory.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Item</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the item. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Retrieves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.

The Include parameter is effective only when the command includes the contents of a item, such as C:\Windows\*, where the wildcard character specifies the contents of the C:\Windows directory.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.

The Exclude parameter is effective only when the command includes the contents of a item, such as C:\Windows\*, where the wildcard character specifies the contents of the C:\Windows directory.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to an item. Get-Item gets the item at the specified location. Wildcards are permitted. This parameter is required, but the parameter name (&quot;-Path&quot;) is optional.

Use a dot (.) to specify the current location. Use the wildcard character (*) to specify the all items in the current location.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>&lt;Current Location&gt;</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Retrieves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.

The Include parameter is effective only when the command includes the contents of a item, such as C:\Windows\*, where the wildcard character specifies the contents of the C:\Windows directory.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.

The Exclude parameter is effective only when the command includes the contents of a item, such as C:\Windows\*, where the wildcard character specifies the contents of the C:\Windows directory.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the item. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this Cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Any</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The result is always output as an object.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-Item -detailed&quot;. For technical information, type &quot;Get-Help Get-Item -full&quot;.

Get-Item does not have a Recurse parameter, because it gets only an item, not its contents. To get the contents of an item recursively, use Get-Childitem.

To navigate through the registry, use Get-Item to get registry keys and Get-ItemProperty to get registry values and data. The registry values are considered to be properties of the registry key.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Get-Item by its built-in alias, &quot;gi&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-item .</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the current directory. The dot (.) represents the item at the current location (not its contents).</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>    Directory: Microsoft.PowerShell.Core\FileSystem::C:\

Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----         7/26/2006  10:01 AM            ps-test</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-item *</dev:code>
  			<dev:remarks>
				<maml:para>This command gets all items in the current directory. The wildcard character (*) represents all contents of the current item.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>    Directory: Microsoft.PowerShell.Core\FileSystem::C:\ps-test

Mode                LastWriteTime     Length Name
----                -------------     ------ ----
d----         7/26/2006   9:29 AM            Logs
d----         7/26/2006   9:26 AM            Recs
-a---         7/26/2006   9:28 AM         80 date.csv
-a---         7/26/2006  10:01 AM         30 filenoext
-a---         7/26/2006   9:30 AM      11472 process.doc
-a---         7/14/2006  10:47 AM         30 test.txt</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-item C:\</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the current directory of the C: drive. The object that is retrieved represents only the directory, not its contents.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>   </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-item C:\*</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the items in the C: drive. The wildcard character (*) represents all items in the container, and not just the container.

In PowerShell, use a single asterisk (*) to get contents, instead of the traditional &quot;*.*&quot;. In PowerShell, the format is interpreted literally, so &quot;*.*&quot; would not retrieve directories or file names without a dot.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>(get-item C:\Windows).LastAccessTime</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the LastAccessTime property of the C:\Windows directory. LastAccessTime is just one property of file system directories. To see all of the properties of a directory, type &quot;(Get-Item &lt;directory-name&gt;) | Get-Member&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-item hklm:\software\microsoft\powershell\1\shellids\microsoft.powershell\*</dev:code>
  			<dev:remarks>
				<maml:para>This command shows the contents of the Microsoft.PowerShell registry key. You can use Get-Item with the Windows PowerShell Registry provider to get registry keys and subkeys, but you must use Get-ItemProperty to get the registry values and data.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-item c:\Windows\* -include *.* -exclude w*</dev:code>
  			<dev:remarks>
				<maml:para>This command gets items in the Windows directory with names that include a dot (.), but do not begin with w*. This command works only when the path includes a wildcard character (*) to specify the contents of the item.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Clear-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Copy-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-ItemProperty
		</command:name>
		<maml:description>
			<maml:para>Retrieves the properties of a specified item.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>itemproperty</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Retrieves the properties of a specified item.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the item or items.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the property or properties to retrieve.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Includes the specified items.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a provider-specific filter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Specifies the credential used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the item property. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the property or properties to retrieve.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Includes the specified items.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a provider-specific filter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Specifies the credential used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the item or items.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>current location</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the property or properties to retrieve.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Includes the specified items.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a provider-specific filter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Specifies the credential used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the item property. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The resultant object is available to the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-itemproperty C:\Windows</dev:code>
  			<dev:remarks>
				<maml:para>This command displays information about the C:\Windows directory.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-itemproperty C:\Test\Weather.xls | format-list</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the properties of the C:\Test\Weather.xls file. The result is piped to the format-list cmdlet to display the output as a list.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-itemproperty -path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the value name and data of each of the registry entries contained in the CurrentVersion registry subkey. Note that the command requires that there is a psdrive named HKLM: that is mapped to the HKEY_LOCAL_MACHINE hive of the registry. A drive with that name and mapping is available in Windows PowerShell by default. Alternatively, the path to this registry subkey can be specified by using the following alternate path that begins with the provider name followed by two colons: 
Registry::HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-itemproperty -path HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion `
-name &quot;ProgramFilesDir&quot; | format-list ProgramFilesDir</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the value name and data of the ProgramFilesDir registry entry contained in the CurrentVersion registry subkey. The subkey is specified in the Path parameter and the value name of the entry is specified in the Name parameter. Note that the result of the Get-ItemProperty cmdlet is piped to the Format-List cmdlet to extract information about just the registry entry of interest. By default, Windows PowerShell property information is included in the output of Get-ItemProperty.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Set-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Copy-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Location
		</command:name>
		<maml:description>
			<maml:para>Gets information about the current working location.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>location</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Gets information about the current working location.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Location</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>psProvider</maml:name>
				<maml:description>
					<maml:para>Outputs a PathInfo object representing the current working location for the specified providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>psDrive</maml:name>
				<maml:description>
					<maml:para>Outputs a PathInfo object representing the current working location for the specified drives.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Location</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>stack</maml:name>
				<maml:description>
					<maml:para>Outputs a StackInfo object representing the current stack.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>stackName</maml:name>
				<maml:description>
					<maml:para>Outputs StackInfo objects representing the specified stacks.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>psProvider</maml:name>
			<maml:description>
				<maml:para>Outputs a PathInfo object representing the current working location for the specified providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>current working provider</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>psDrive</maml:name>
			<maml:description>
				<maml:para>Outputs a PathInfo object representing the current working location for the specified drives.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>stack</maml:name>
			<maml:description>
				<maml:para>Outputs a StackInfo object representing the current stack.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>stackName</maml:name>
			<maml:description>
				<maml:para>Outputs StackInfo objects representing the specified stacks.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>PathInfo Objects or StackInfo Objects</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						PathInfo Objects (when specifying get-location with no parameters, or when using the Provider or Drive parameters) StackInfo Objects (when using the StackName or Stack parameters)
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-Location -detailed&quot;. For technical information, type &quot;Get-Help Get-Location -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

Locations can be stored on a stack and pop will access the last location on top of the stack. Push will add a location to the top of the stack.

The PSProvider, PSDrive, Stack and Stackname parameters interact in ways that depend upon the provider.  Some combinations will result in errors, such as specifying both a drive and a provider that does not provide that drive. If no parameters are specified then get-location will return the PathInfo Object for the provider that contains the current working location.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-location</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the current working location.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-location -stack</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the items on the current stack. The current location is not displayed. To display the current location, run the command without the Stack parameter.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Pop-Location</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Push-Location</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Location</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Process
		</command:name>
		<maml:description>
			<maml:para>Gets the processes that are running on the local computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>process</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-Process cmdlet retrieves a process object for each process. Without parameters, &quot;Get-Process&quot; gets all of the processes on the computer, as though you typed &quot;Get-Process *&quot;. You can also identify a particular process by process name or process ID (PID), or pass a process object through the pipeline to Get-Process. For Get-Process, the default method is by process name. For Stop-Process, the default method is by process ID.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Process</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies one or more processes by process name. You can type multiple process names (separated by commas) or use wildcard characters. The parameter name (&quot;-Name&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Process</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>id</maml:name>
				<maml:description>
					<maml:para>Specifies one or more processes by process ID (PID). To specify multiple IDs, use commas to separate the IDs. To find the PID of a process, type &quot;get-process&quot;.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Process</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Accepts a process object as input to the cmdlet. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Process[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies one or more processes by process name. You can type multiple process names (separated by commas) or use wildcard characters. The parameter name (&quot;-Name&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Accepts a process object as input to the cmdlet. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Process[]</command:parameterValue>
			<dev:type>
				<maml:name>Process[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>id</maml:name>
			<maml:description>
				<maml:para>Specifies one or more processes by process ID (PID). To specify multiple IDs, use commas to separate the IDs. To find the PID of a process, type &quot;get-process&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			<dev:type>
				<maml:name>Int32[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>PSObjects with the &quot;ProcessName&quot; or &quot;Id&quot; property specified, or all processes if neither is specified.</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Process Object(s).
For details, see the .NET framework documentation of the System.Diagnostics.Process class. These objects are sorted by ProcessName, and within ProcessName, by ID.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-Process -detailed&quot;. For technical information, type &quot;Get-Help Get-Process -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You cannot use the -Name, -ID, and -InputObject parameters in the same command.

You can also refer to Get-Process by its built-in aliases, &quot;ps&quot; and &quot;gps&quot;. For more information, see About_Alias.

You can also use the properties and methods of the WMI Win32_Process object in Windows PowerShell. For information, see Get-WmiObject and the Windows Management Instrument SDK.

The default display of a process is a table that includes the following columns:

-- Handles: The number of handles that the process has opened. 

-- NPM(K): The amount of non-paged memory that the process is using, in kilobytes. 

-- PM(K): The amount of pageable memory that the process is using, in kilobytes.

-- WS(K): The size of the working set of the process, in kilobytes. The working set consists of the pages of memory that were recently referenced by the process. 

-- VM(M): The amount of virtual memory that the process is using, in megabytes. Virtual memory includes storage in the paging files on disk.

-- CPU(s): The amount of processor time that the process has used on all processors, in seconds. 

-- ID: The process ID (PID) of the process.

-- ProcessName: The name of the process.

For explanations of the concepts related to processes, use the Glossary in Help and Support Center and help for Task Manager. 

You can also use the built-in alternate views of the processes available with Format-Table, such as &quot;StartTime&quot; and &quot;Priority&quot;, and you can design your own views. For more information, type &quot;Get-Help Format-Table -detailed&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-Process</dev:code>
  			<dev:remarks>
				<maml:para>This command gets a list of all of the running processes running on the local computer. For a definition of each column, see Additional Notes in &quot;Get-Help Get-Process -Full.&quot;</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Get-Process winword, explorer | format-list *</dev:code>
  			<dev:remarks>
				<maml:para>This command gets all available data about the Winword and Explorer processes on the computer. It uses the Name parameter to specify the processes, but it omits the optional parameter name. The pipeline operator (|) passes the data to the Format-List cmdlet, which displays all available properties (*) of the Winword and Explorer process objects.

You can also identify the processes by their process IDs. For example, &quot;get-process -id 664, 2060&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | where-object {$_.WorkingSet -gt 20000000}</dev:code>
  			<dev:remarks>
				<maml:para>This command gets all processes that have a working set greater than 20 MB. It uses the Get-Process cmdlet to get all running processes. The pipeline operator (|) passes the process objects to the Where-Object cmdlet, which selects only the object with a value greater than 20,000,000 bytes for the WorkingSet property. 

WorkingSet is one of many properties of process objects. To see all of the properties, type &quot;Get-Process | Get-Member&quot;. By default, the values of all amount properties are in bytes, even though the default display lists them in kilobytes and megabytes.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = get-process

get-process -inputobject $a | format-table -view priority</dev:code>
  			<dev:remarks>
				<maml:para>These commands list the processes on the computer grouped by priority. The first command gets all of the processes on the computer and stores them in the $a variable. The second command uses the InputObject parameter to pass the process objects stored in $a to Get-Process. The pipeline operator passes the objects to the Format-Table cmdlet, which formats the processes by using the &quot;Priority&quot; view defined in the PS1XML format files in the Windows PowerShell home directory ($pshome).</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Stop-Process</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-PSDrive
		</command:name>
		<maml:description>
			<maml:para>Gets information about Windows PowerShell drives.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>psdrive</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Gets information about Windows PowerShell drives. If no drive is specified it gets information for all Windows PowerShell drives in the current namespace scope.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-PSDrive</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the Windows PowerShell drive about which to retrieve information. To specify multiple Windows PowerShell drives, separate them by using commas.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>pSProvider</maml:name>
				<maml:description>
					<maml:para>This parameter returns the PSDriveInfo object for all of the drives exposed by the specified provider(s).</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>scope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope within which to search for the specified Windows PowerShell drive.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-PSDrive</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalName</maml:name>
				<maml:description>
					<maml:para>Specifies the new of the item. The value of LiteralName is used exactly as it is typed. No characters are interpreted as wildcards. If the name includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>pSProvider</maml:name>
				<maml:description>
					<maml:para>This parameter returns the PSDriveInfo object for all of the drives exposed by the specified provider(s).</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>scope</maml:name>
				<maml:description>
					<maml:para>Specifies the scope within which to search for the specified Windows PowerShell drive.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the Windows PowerShell drive about which to retrieve information. To specify multiple Windows PowerShell drives, separate them by using commas.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>*</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>pSProvider</maml:name>
			<maml:description>
				<maml:para>This parameter returns the PSDriveInfo object for all of the drives exposed by the specified provider(s).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>*</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>scope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope within which to search for the specified Windows PowerShell drive.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalName</maml:name>
			<maml:description>
				<maml:para>Specifies the new of the item. The value of LiteralName is used exactly as it is typed. No characters are interpreted as wildcards. If the name includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String or pipelined object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>A PSDriveInfo object.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The PSDriveInfo object contains the following properties: CurrentLocation, Name, Provider, Root, Description
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-PSDrive -detailed&quot;. For technical information, type &quot;Get-Help Get-PSDrive -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-psdrive</dev:code>
  			<dev:remarks>
				<maml:para>This command displays information about all currently visible drives.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-psdrive HK*</dev:code>
  			<dev:remarks>
				<maml:para>This command displays information about drives with names that begin with the letters HK. By default, the result will be information about drives mapped to the registry provider.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>New-PSDrive</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-PSDrive</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Help</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Command</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Member</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-PSProvider
		</command:name>
		<maml:description>
			<maml:para>Gets information about the specified Windows PowerShell provider.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>psprovider</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Gets information about the specified Windows PowerShell provider.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-PSProvider</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>psProvider</maml:name>
				<maml:description><maml:para>Specifies the name or names of the Windows PowerShell providers about which to retrieve information.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>psProvider</maml:name>
			<maml:description>
				<maml:para>Specifies the name or names of the Windows PowerShell providers about which to retrieve information.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - See note below</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>ProviderInfoObject</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						no description
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-psprovider</dev:code>
  			<dev:remarks>
				<maml:para>This command displays a list of all available Windows PowerShell providers.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-psprovider f*, r* | format-list</dev:code>
  			<dev:remarks>
				<maml:para>This command displays a list of all Windows PowerShell providers with names that begin with the letter 'f' or 'r'.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-PSDrive</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Service
		</command:name>
		<maml:description>
			<maml:para>Gets the services on the local computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>service</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-Service cmdlet gets objects representing the services on the local computer, including running and stopped services. You can direct Get-Service to get only particular services by specifying the service name or display name of the services, or you can use the InputObject parameter to supply a service object representing each of the services that you want to retrieve.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Service</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the service names of services to be retrieved. Wildcards are permitted. By default, Get-Service gets all of the services on the computer.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Retrieves only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Service</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>displayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display names of services to be retrieved. Wildcards are permitted. By default, Get-Service gets all services on the computer.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Retrieves only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Service</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Specifies the ServiceController objects to be retrieved. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ServiceController[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Retrieves only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the service names of services to be retrieved. Wildcards are permitted. By default, Get-Service gets all of the services on the computer.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>*</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Retrieves only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>displayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display names of services to be retrieved. Wildcards are permitted. By default, Get-Service gets all services on the computer.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the ServiceController objects to be retrieved. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ServiceController[]</command:parameterValue>
			<dev:type>
				<maml:name>ServiceController[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						System.ServiceProcess.ServiceController
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.ServiceProcess.ServiceController</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						System.ServiceProcess.ServiceController
Please refer to .NET library for complete details
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-Service -detailed&quot;. For technical information, type &quot;Get-Help Get-Service -full&quot;.

Get-Service can display services only when the current user has permission to see them. If Get-Service does not display services, you might not have permission to see them.

To find the service name and display name of each service on your system, type &quot;get-service&quot;. The service names appear in the &quot;Name&quot; column and the display names appear in the &quot;DisplayName&quot; column.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Get-Service by its built-in alias, &quot;gsv&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-service</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves all of the services on the system. It behaves as though you typed &quot;get-service *&quot;. The default display shows the status, service name, and display name of each service.        </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-service wmi*</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves services with service names that begin with &quot;WMI&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-service -displayname *network*</dev:code>
  			<dev:remarks>
				<maml:para>This command displays services with a display name that includes the word 
&quot;network.&quot; This command lets you find network-related services even when the service name does not include &quot;Net,&quot; such as xmlprov, the Network Provisioning Service.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$services = get-service

C:\PS&gt;get-service -inputobject $Services -include RPC*</dev:code>
  			<dev:remarks>
				<maml:para>These commands display only the services with service names that begin with &quot;RPC&quot;. The first command gets the services on the system and stores them in the $services variable. The second command gets the services in the $services variable, but includes only those that begin with &quot;RPC&quot;. It uses the InputObject parameter to pass the objects stored in the variable to Get-Service.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-service | where-object {$_.Status -eq &quot;Running&quot;}</dev:code>
  			<dev:remarks>
				<maml:para>This command displays only the services that are currently running. It uses the Get-Service cmdlet to get all of the services on the computer. The pipeline operator (|) passes the results to the Where-Object cmdlet, which selects only the services with a Status property that equals &quot;Running.&quot;

Status is only one property of service objects. To see all of the properties, type &quot;get-service | get-member&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Resume-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Start-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Stop-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Restart-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Suspend-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-WmiObject
		</command:name>
		<maml:description>
			<maml:para>Gets instances of WMI classes or information about available classes.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>wmiobject</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Gets instances of WMI classes or information about available classes. The ComputerName parameter can always be used to target a remote computer. If the List parameter is specified, the cmdlet gets information about the WMI classes available in a specified namespace. If the Query parameter is specified, the cmdlet runs a WMI query language (WQL) statement.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-WmiObject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>class</maml:name>
				<maml:description>
					<maml:para>Specifies the name of a WMI class. When this parameter is used, the cmdlet retrieves instances of the WMI class.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>property</maml:name>
				<maml:description>
					<maml:para>Specifies the WMI class property or set of properties to retrieve.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>namespace</maml:name>
				<maml:description>
					<maml:para>When used with the Class parameter, this parameter specifies the WMI repository namespace where the referenced WMI class is located. When used with the List parameter, it specifies the namespace from which to gather WMI class information.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>computerName</maml:name>
				<maml:description>
					<maml:para>Specifies the computer or computers the cmdlet will run against. The cmdlet will retrieve WMI class information and instances of WMI classes from the WMI Service (CIMOM) on the specified computers. The name of each computer can be specified as a NETBIOS name, an IP address, or a fully-qualified domain name. In addition, you can specify the local computer by using the dot (.) character.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a where clause to use as a filter. Use the syntax of the WQL language. Do not include the where keyword in the value of the parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses the specified credential to authenticate the user. You can type a user name or submit a credential object created by using Get-Credential. If you supply a user name, you will be prompted for a password. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-WmiObject</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>namespace</maml:name>
				<maml:description>
					<maml:para>When used with the Class parameter, this parameter specifies the WMI repository namespace where the referenced WMI class is located. When used with the List parameter, it specifies the namespace from which to gather WMI class information.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>computerName</maml:name>
				<maml:description>
					<maml:para>Specifies the computer or computers the cmdlet will run against. The cmdlet will retrieve WMI class information and instances of WMI classes from the WMI Service (CIMOM) on the specified computers. The name of each computer can be specified as a NETBIOS name, an IP address, or a fully-qualified domain name. In addition, you can specify the local computer by using the dot (.) character.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses the specified credential to authenticate the user. You can type a user name or submit a credential object created by using Get-Credential. If you supply a user name, you will be prompted for a password. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>list</maml:name>
				<maml:description>
					<maml:para>Used to indicate that the names of the WMI classes in the WMI repository namespace specified in the Namespace parameter should be retrieved and displayed. The Default Namespace registry entry, contained in the registry key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WBEM\Scripting is not used by this cmdlet to determine the default namespace. If you specify the List parameter, but not the Namespace parameter, the root\CIMV2 namespace is used by default.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-WmiObject</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>query</maml:name>
				<maml:description>
					<maml:para>Specifies a WMI Query Language (WQL) statement to run. Event queries are not supported.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>namespace</maml:name>
				<maml:description>
					<maml:para>When used with the Class parameter, this parameter specifies the WMI repository namespace where the referenced WMI class is located. When used with the List parameter, it specifies the namespace from which to gather WMI class information.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>computerName</maml:name>
				<maml:description>
					<maml:para>Specifies the computer or computers the cmdlet will run against. The cmdlet will retrieve WMI class information and instances of WMI classes from the WMI Service (CIMOM) on the specified computers. The name of each computer can be specified as a NETBIOS name, an IP address, or a fully-qualified domain name. In addition, you can specify the local computer by using the dot (.) character.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses the specified credential to authenticate the user. You can type a user name or submit a credential object created by using Get-Credential. If you supply a user name, you will be prompted for a password. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>class</maml:name>
			<maml:description>
				<maml:para>Specifies the name of a WMI class. When this parameter is used, the cmdlet retrieves instances of the WMI class.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>property</maml:name>
			<maml:description>
				<maml:para>Specifies the WMI class property or set of properties to retrieve.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>*</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>namespace</maml:name>
			<maml:description>
				<maml:para>When used with the Class parameter, this parameter specifies the WMI repository namespace where the referenced WMI class is located. When used with the List parameter, it specifies the namespace from which to gather WMI class information.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Root/cimv2</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>computerName</maml:name>
			<maml:description>
				<maml:para>Specifies the computer or computers the cmdlet will run against. The cmdlet will retrieve WMI class information and instances of WMI classes from the WMI Service (CIMOM) on the specified computers. The name of each computer can be specified as a NETBIOS name, an IP address, or a fully-qualified domain name. In addition, you can specify the local computer by using the dot (.) character.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>localhost</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a where clause to use as a filter. Use the syntax of the WQL language. Do not include the where keyword in the value of the parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses the specified credential to authenticate the user. You can type a user name or submit a credential object created by using Get-Credential. If you supply a user name, you will be prompted for a password. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>list</maml:name>
			<maml:description>
				<maml:para>Used to indicate that the names of the WMI classes in the WMI repository namespace specified in the Namespace parameter should be retrieved and displayed. The Default Namespace registry entry, contained in the registry key HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\WBEM\Scripting is not used by this cmdlet to determine the default namespace. If you specify the List parameter, but not the Namespace parameter, the root\CIMV2 namespace is used by default.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>query</maml:name>
			<maml:description>
				<maml:para>Specifies a WMI Query Language (WQL) statement to run. Event queries are not supported.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						no description
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The return type is a collection of WMI objects corresponding to the requested WMI class.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-WmiObject -detailed&quot;. For technical information, type &quot;Get-Help Get-WmiObject -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

To access WMI information on a remote computer, the cmdlet must run under an account that is a member of the local administrators group on the remote computer. Alternatively, the default access control on the WMI namespace of the remote repository can be changed to give other account access rights.

All the properties of a WMI class are not displayed by default. The set of properties that will be displayed for each WMI class is specified in the types.ps1xml configuration file. One of the examples included in this help topic demonstrates how to override this behavior by using the format-list cmdlet.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-wmiobject win32_process</dev:code>
  			<dev:remarks>
				<maml:para>This command displays information about all of the processes running on a computer.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-wmiobject win32_service -computername 127.0.0.1</dev:code>
  			<dev:remarks>
				<maml:para>This command displays information about the services on the local computer. It does so by specifying the IP address 127.0.0.1. This IP address can be changed to any other valid IP address on your network, enabling you to display information about the services on that remote computer. By default, the account you are running under must be a member of the local administrators group on the remote computer you specify for the command to succeed.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-wmiobject -namespace &quot;root/default&quot; -list</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the WMI classes in the root/default namespace of the local computer.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-wmiobject -query &quot;select * from win32_service where name='alerter'&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command displays information about the Alerter service.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>(get-wmiobject win32_service -filter &quot;name='alerter'&quot;).StopService()</dev:code>
  			<dev:remarks>
				<maml:para>This command stops the Alerter service. It calls the StopService method of the win32_service WMI class.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-wmiobject win32_bios | format-list *</dev:code>
  			<dev:remarks>
				<maml:para>This command displays BIOS information. It displays all of the properties of the WMI class, not just the ones specified in the types.ps1xml configuration file.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-wmiobject win32_service -credential FABRIKAM\administrator -computer fabrikam</dev:code>
  			<dev:remarks>
				<maml:para>This command displays service information on a computer named fabrikam. It specifies a user account name by using the Credential parameter, which causes a dialog to be displayed to gather the corresponding password.  </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Credential</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Invoke-Item
		</command:name>
		<maml:description>
			<maml:para>Invokes the provider-specific default action on the specified item.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>invoke</command:verb>
		<command:noun>item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Invokes the provider-specific default action on the specified item. When applied to a file system item, for example, it will either run the file or open it with the application associated with that file type.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Invoke-Item</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>The path to the item or file that is the object of the Cmdlet.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the Cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Invoke-Item</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the item. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the Cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>The path to the item or file that is the object of the Cmdlet.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Specifies only those items upon which the Cmdlet will act, excluding all others.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>The credential is used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the item. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this Cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified. Then a provider-specified object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>invoke-item C:\Test\aliasApr04.doc</dev:code>
  			<dev:remarks>
				<maml:para>This command opens the file aliasApr04.doc in Microsoft Word.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>invoke-item &quot;C:\Documents and Settings\Lister\My Documents\*.xls&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command opens all of the Microsoft Excel spreadsheets in the C:\Documents and Settings\Lister\My Documents folder. Each spreadsheet is opened in a new instance of Excel.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Clear-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Copy-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Join-Path
		</command:name>
		<maml:description>
			<maml:para>Combines a path and child-path into a single path. The provider supplies the path delimiters.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>join</command:verb>
		<command:noun>path</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Join-Path cmdlet combines a path and child-path into a single path. The provider supplies the path delimiters.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Join-Path</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description><maml:para>Specifies the main path (or paths) to which the child-path is appended. Wildcards are permitted.

The value of Path determines which provider joins the paths and adds the path delimiters. The Path parameter is required, although the parameter name (-path) is optional.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>childPath</maml:name>
				<maml:description><maml:para>Specifies the elements to append to the value of Path. Wildcards are permitted. The ChildPath parameter is required, although the parameter name (-ChildPath) is optional.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>resolve</maml:name>
				<maml:description><maml:para>Displays the items that are referenced by the joined path.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description><maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the main path (or paths) to which the child-path is appended. Wildcards are permitted.

The value of Path determines which provider joins the paths and adds the path delimiters. The Path parameter is required, although the parameter name (-path) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>childPath</maml:name>
			<maml:description>
				<maml:para>Specifies the elements to append to the value of Path. Wildcards are permitted. The ChildPath parameter is required, although the parameter name (-ChildPath) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The ChildPath must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>resolve</maml:name>
			<maml:description>
				<maml:para>Displays the items that are referenced by the joined path.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						You can enter paths as strings or send paths to the cmdlet through the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Join-Path -detailed&quot;. For technical information, type &quot;Get-Help Join-Path -full&quot;.

The path cmdlets (*-path) manipulate path names and return the names in a concise format that all Windows PowerShell providers can interpret. They are designed for use in programs and scripts where you want to display all or part of a path name in a particular format. Use them like you would use Dirname, Normpath, Realpath, Join, or other path manipulators.

You can use the path cmdlets with several providers, including the FileSystem, Registry, and Certificate providers.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>join-path -path c:\win* -childpath System*</dev:code>
  			<dev:remarks>
				<maml:para>This command uses Join-Path to combine the &quot;c:\Win*&quot; path with the &quot;System*&quot; child path. The Windows PowerShell file system provider, FileSystem joins the path and adds the &quot;\&quot; delimiter.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>c:\win*\System*</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>join-path c:\win* System* -resolve</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the files and folders that are referenced by joining the &quot;c:\Win*&quot; path and the &quot;System*&quot; child path. It displays the same files and folders as Get-Childitem, but it displays the fully-qualified path to each item. In this command, the Path and Childpath optional parameter names are omitted.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>C:\WINDOWS\system
C:\WINDOWS\system32
C:\WINDOWS\system.ini</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>PS HKLM:\&gt; join-path System *ControlSet* -resolve</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the registry keys in the HKLM\System hive that include &quot;ControlSet&quot;. This example shows how to use Join-Path with the Windows PowerShell registry provider.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>HKLM:\System\ControlSet001
HKLM:\System\ControlSet002
HKLM:\System\CurrentControlSet</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Test-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Split-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Resolve-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Convert-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Move-Item
		</command:name>
		<maml:description>
			<maml:para>Moves an item from one location to another.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>move</command:verb>
		<command:noun>item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Move-Item cmdlet moves an item, including its properties, contents, and child items, from one location to another location. The locations must be supported by the same provider. For example, it can move a file or subdirectory from one directory to another or move a registry subkey from one key to another. When you move an item, it is added to the new location and deleted from its original location.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Move-Item</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the current location of the items. The default is the current directory. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>destination</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the location where the items are being moved. The default is the current directory. Wildcards are permitted, but the result must specify a single location.

To rename the item being moved, specify a new name in the value of Destination.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Moves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Move-Item</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the current location of the items. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>destination</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the location where the items are being moved. The default is the current directory. Wildcards are permitted, but the result must specify a single location.

To rename the item being moved, specify a new name in the value of Destination.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Moves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the current location of the items. The default is the current directory. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>&lt;current location&gt;</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>destination</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the location where the items are being moved. The default is the current directory. Wildcards are permitted, but the result must specify a single location.

To rename the item being moved, specify a new name in the value of Destination.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>&lt;current location&gt;</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Moves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the current location of the items. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this Cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified. Then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Move-Item -detailed&quot;. For technical information, type &quot;Get-Help Move-Item -full&quot;.

Move-Item will move files between drives that are supported by the same provider, but it will only move directories within the same drive.

Because a Move-Item command moves the properties, contents, and child items of an item, all moves are recursive by default.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Move-Item by its built-in aliases, &quot;move&quot;, &quot;mv&quot;, and &quot;mi&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>move-item -path C:\test.txt -destination E:\Temp\tst.txt</dev:code>
  			<dev:remarks>
				<maml:para>This command moves the Test.txt file from the C: drive to the E:\Temp directory and renames it from &quot;test.txt&quot; to &quot;tst.txt&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>move-item -path C:\Temp -destination C:\Logs</dev:code>
  			<dev:remarks>
				<maml:para>This command moves the C:\Temp directory and its contents to the C:\Logs directory. The Temp directory, and all of its subdirectories and files, now appear in the Logs directory.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>move-item -path .\*.txt -destination C:\Logs</dev:code>
  			<dev:remarks>
				<maml:para>This command moves all of the text files (*.txt) in the current directory (represented by a dot (.)) to the C:\Logs directory.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>gci . -recurse -include *.txt | move-item -dest C:\ps-test\TextFiles</dev:code>
  			<dev:remarks>
				<maml:para>This command moves all of the text files from the current directory and all subdirectories, recursively, to the C:\TextFiles directory. 

The command uses the Get-Childitem cmdlet to get all of the child items in the current directory (represented by the dot (.)) and its subdirectories that have a *.txt file name extension. It uses the Recurse parameter to make the retrieval recursive and the Include parameter to limit the retrieval to *.txt files.

The pipeline operator (|) sends the results of this command to Move-Item, which moves the text files to the TextFiles directory.

If files being moved to C:\Textfiles have the same name, Move-Item displays an error and continues, but moves only one file with each name to C:\Textfiles. The other files remain in their original directories.

Also, by default, Get-Childitem does not move hidden files. To move hidden files, use the Force parameter with Get-Childitem.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>move-item hklm:\software\mycompany\* hklm:\software\mynewcompany</dev:code>
  			<dev:remarks>
				<maml:para>This command moves the registry keys and values within the MyCompany registry key in HKLM\Software to the MyNewCompany key. The wildcard character (*) indicates that the contents of the MyCompany key should be moved, not the key itself. In this command, the optional Path and Destination parameter names are omitted.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>move-item -literalpath 'Logs[Sept`06]' -destination 'Logs[2006]'</dev:code>
  			<dev:remarks>
				<maml:para>This command moves the Logs[Sept`06] directory (and its contents) into the Logs[2006] directory. 

The LiteralPath parameter is used instead of Path, because the original directory name includes the wildcard characters, [ and ]. The path is also enclosed in single quotation marks (' '), so that the backtick symbol (`) is not misinterpreted. 

The Destination parameter does not require a literal path, because the Destination variable also must be enclosed in single quotation marks, because it includes brackets that can be misinterpreted. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Clear-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Copy-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Move-ItemProperty
		</command:name>
		<maml:description>
			<maml:para>Moves a property from one location to another.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>move</command:verb>
		<command:noun>itemproperty</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Move-ItemProperty cmdlet moves a property of an item from one item to another item. For example, it can move a registry entry from one registry key to another.  When you move an item property, it is added to the new location and deleted from its original location.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Move-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the current location of the property. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>destination</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the destination location.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the property to be moved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Moves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Move-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the current location of the property. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>destination</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the destination location.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the property to be moved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Moves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the current location of the property. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>destination</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the destination location.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the property to be moved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Moves only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the current location of the property. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters marked as 'allow pipeline input' may take input from other cmdlets or direct input.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified, in which case the result is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Move-ItemProperty -detailed&quot;. For technical information, type &quot;Get-Help Move-ItemProperty -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

The names of the Path, Destination, and Name parameters are optional. If you omit the parameter names, the unnamed parameter values must appear in this order: Path, Destination, Name. If you include the parameter names, the parameters can appear in any order.

You can also refer to Move-ItemProperty by its built-in alias, &quot;mp&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>move-itemproperty HKLM:\Software\MyCompany\MyApp -Name `
Version -Destination HKLM:\Software\MyCompany\NewApp</dev:code>
  			<dev:remarks>
				<maml:para>This command moves the &quot;Version&quot; registry value, and its data, from the MyApp subkey to the NewApp subkey of the HKLM\Software\MyCompany registry key.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Clear-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Copy-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-Item
		</command:name>
		<maml:description>
			<maml:para>Creates a new item in a namespace.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>new</command:verb>
		<command:noun>item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Creates a new item in a namespace. The type of items that can be created depend upon the Windows PowerShell provider used. New-Item is used to create files and folders when using the FileSystem provider and creates new registry keys and entries when using the Registry provider. The cmdlet can also set the value of the new item. When creating a new file, for instance, you can use New-Item to add initial content to the file.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-Item</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the location of the new item. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows Cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object obtained by using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>itemType</maml:name>
				<maml:description>
					<maml:para>Specifies the provider-specified type of the new item</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
				<maml:name>value</maml:name>
				<maml:description>
					<maml:para>Specifies the value the new item.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>New-Item</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the location of the new item. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the new item.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows Cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object obtained by using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>itemType</maml:name>
				<maml:description>
					<maml:para>Specifies the provider-specified type of the new item</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
				<maml:name>value</maml:name>
				<maml:description>
					<maml:para>Specifies the value the new item.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the location of the new item. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>itemType</maml:name>
			<maml:description>
				<maml:para>Specifies the provider-specified type of the new item</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
			<maml:name>value</maml:name>
			<maml:description>
				<maml:para>Specifies the value the new item.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the new item.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Allows Cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>The credential is used to validate access. If a PSCredential object obtained by using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this Cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Any</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The new-item object is sent to the pipeline
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>new-item -path . -name testfile1.txt -type &quot;file&quot; -value &quot;This is a text string.&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command creates a text file named testfile1.txt in the current directory. The dot (.) in the value of the -path parameter indicates the current directory. The quoted text that follows the -value parameter is added to the file as content.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>new-item -path c:\ -name logfiles -lype directory</dev:code>
  			<dev:remarks>
				<maml:para>This command creates a directory named Logfiles in the C: drive. The -type parameter specifies that the new item is a directory, not a file or other file system object.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>new-item -path $profile -type file -force</dev:code>
  			<dev:remarks>
				<maml:para>The following command creates a Windows PowerShell profile in the path that is specified by the $profile variable. 

You can use the profile to customize Windows PowerShell. $profile is an automatic (built-in) variable that stores the path and file name of your Windows PowerShell profile. By default, the profile does not exist, even though Windows PowerShell stores a path and file name for it. (To see the value of the $profile variable, type &quot;$profile&quot;. To see a list of automatic variables, type &quot;get-help about_automatic_variables&quot;.) 

In this command, the $profile variable represents the path to the file. The Type parameter (or InfoType) specifies that the command creates a file (a profile is a text file). The Force parameter lets you create a file in the profile path, even when the directories in the path do not exist (PowerShell creates them). 

After you use this command to create a profile, you can enter aliases, functions, and scripts in the profile to customize your shell.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Copy-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-ItemProperty
		</command:name>
		<maml:description>
			<maml:para>Sets a new property of an item at a location.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>new</command:verb>
		<command:noun>itemproperty</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Sets a new property of an item at a location.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>The path of the item for which a new property is to be created.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>The name of the property to be created.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>propertyType</maml:name>
				<maml:description>
					<maml:para>The Type of the property. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>value</maml:name>
				<maml:description>
					<maml:para>The Value of the property. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows the cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object, obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>New-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the item property. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>The name of the property to be created.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>propertyType</maml:name>
				<maml:description>
					<maml:para>The Type of the property. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>value</maml:name>
				<maml:description>
					<maml:para>The Value of the property. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows the cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object, obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>The path of the item for which a new property is to be created.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>The name of the property to be created.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>propertyType</maml:name>
			<maml:description>
				<maml:para>The Type of the property. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>value</maml:name>
			<maml:description>
				<maml:para>The Value of the property. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Allows the cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>The credential is used to validate access. If a PSCredential object, obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the item property. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters marked as 'allow pipeline input' may take input from other cmdlets or direct input.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The new-property is available to the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help New-ItemProperty  -detailed&quot;. For technical information, type &quot;Get-Help New-ItemProperty -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>new-itemproperty SmpApplication -name config -Type int -Value 1</dev:code>
  			<dev:remarks>
				<maml:para>This example assumes working in the Registry namespace where there is a store for a &quot;SmpApplication&quot; under 
&quot;HKLM:\Software&quot;. In the store there is a new int property named &quot;Exp&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>None.</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Clear-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Copy-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-PSDrive
		</command:name>
		<maml:description>
			<maml:para>Installs a new WIndows PowerShell drive.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>new</command:verb>
		<command:noun>psdrive</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The new-drive cmdlet installs a new drive at the specified location and within the specified parameters.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-PSDrive</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>The name of the drive being added.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>psProvider</maml:name>
				<maml:description><maml:para>The name of the specific provider.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
				<maml:name>root</maml:name>
				<maml:description><maml:para>The provider internal root or path for the drive being added.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>description</maml:name>
				<maml:description><maml:para>A short description of the drive.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>scope</maml:name>
				<maml:description><maml:para>Accepts an index used to identify the scope where the drive will be installed.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description><maml:para>The credential is used to validate access. If a PSCredential object, obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>The name of the drive being added.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - A name must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>psProvider</maml:name>
			<maml:description>
				<maml:para>The name of the specific provider.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - A provider must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
			<maml:name>root</maml:name>
			<maml:description>
				<maml:para>The provider internal root or path for the drive being added.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - A root must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>description</maml:name>
			<maml:description>
				<maml:para>A short description of the drive.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>scope</maml:name>
			<maml:description>
				<maml:para>Accepts an index used to identify the scope where the drive will be installed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>local</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>The credential is used to validate access. If a PSCredential object, obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>null</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects piped into this cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>DriveInfo Object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The output object contains: CurrentLocation, Name, Provider, Root, Description, Credentials - the last is a System.Management.Automation.Credential object.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>new-Psdrive -name SmpDrive -Psprovider FileSystem -root C:\SmpPlace</dev:code>
  			<dev:remarks>
				<maml:para>This example installs the SmpDrive on the file system provider. The drive will be assigned the name SmpDrive. The drive will be rooted at &quot;C:\SmpPlace&quot;</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Name       Provider      Root                              CurrentLocation
----       --------      ----                              ---------------
SmpDrive   FileSystem    C:\SmpPlace</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-PSDrive</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-PSDrive</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-Service
		</command:name>
		<maml:description>
			<maml:para>Creates a new entry for a Windows Service in the registry and the Service Database.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>new</command:verb>
		<command:noun>service</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Creates a new entry for a Windows Service in the registry and the Service Database. The cmdlet lets you set the display name, description, startup type and dependencies of the service.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-Service</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Specifies the name of the service.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>binaryPathName</maml:name>
				<maml:description><maml:para>Specifies the path to the executable file for the service.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>displayName</maml:name>
				<maml:description><maml:para>Specifies the display name for the service.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>description</maml:name>
				<maml:description><maml:para>Specifies a description of the service.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>startupType</maml:name>
				<maml:description><maml:para>Sets the startup type of the service.</maml:para></maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Automatic</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Manual</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Disabled</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>credential</maml:name>
				<maml:description><maml:para>Specifies the credential the service will start under.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>dependsOn</maml:name>
				<maml:description><maml:para>Names of other services upon which the new service depends. Separate multiple service names by using a comma.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the service.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>binaryPathName</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the executable file for the service.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>displayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display name for the service.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the service.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>startupType</maml:name>
			<maml:description>
				<maml:para>Sets the startup type of the service.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ServiceStartMode</command:parameterValue>
			<dev:type>
				<maml:name>ServiceStartMode</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Automatic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Manual</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Disabled</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Specifies the credential the service will start under.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>LocalSystem</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>dependsOn</maml:name>
			<maml:description>
				<maml:para>Names of other services upon which the new service depends. Separate multiple service names by using a comma.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>ServiceControllerObject</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help New-Service  -detailed&quot;. For technical information, type &quot;Get-Help New-Service -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>new-service testservice &quot;C:\WINDOWS\System32\svchost.exe -k netsvcs&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command creates a new entry in the registry and Service Database for a service named &quot;testservice&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Start-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Stop-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Restart-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Resume-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Suspend-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Pop-Location
		</command:name>
		<maml:description>
			<maml:para>Changes the current location to the location most recently pushed onto the stack. You can pop the location from the default stack or from a stack that you create by using Push-Location.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>pop</command:verb>
		<command:noun>location</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Pop-Location cmdlet changes to the location most recently pushed onto the stack by using Push-Location. You can pop a location from the default stack or from a stack that you create by using Push-Location.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Pop-Location</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>stackName</maml:name>
				<maml:description><maml:para>Specifies an alternate stack. Pop-Location pops the most recently added location from this stack. This stack now becomes the current stack.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description><maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para></maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>stackName</maml:name>
			<maml:description>
				<maml:para>Specifies an alternate stack. Pop-Location pops the most recently added location from this stack. This stack now becomes the current stack.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>&lt;NOTE: if not specified uses the current working stack&gt;</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this Cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>PathInfo Object (When -passthru is used)</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Pop-Location -detailed&quot;. For technical information, type &quot;Get-Help Pop-Location -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Pop-Location by its built-in alias, &quot;popd&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>pop-location</dev:code>
  			<dev:remarks>
				<maml:para>This command changes your location to the location most recently added to the current stack.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>pop-location -stackname Stack2</dev:code>
  			<dev:remarks>
				<maml:para>This command changes your location to the location most recently added to the Stack2 stack.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>pushd HKLM:\Software\Microsoft\PowerShell

pushd Cert:\LocalMachine\TrustedPublisher

popd

popd</dev:code>
  			<dev:remarks>
				<maml:para>These commands use the Push-Location and Pop-Location cmdlets to move between locations supported by different Windows PowerShell providers. The commands use the &quot;pushd&quot; alias for Push-Location and the &quot;popd&quot; alias for Pop-Location.

The first command pushes the current file system location onto the stack and moves to the HKLM drive supported by the Windows PowerShell Registry provider. The second command pushes the registry location onto the stack and moves to a location supported by the Windows PowerShell certificate provider. 

The last two command pop those locations off of the stack. The first &quot;Popd&quot; returns to the Registry drive and the second returns to the file system drive.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>PS C:\&gt; push-location HKLM:\Software\Microsoft\PowerShell

PS HKLM:\Software\Microsoft\PowerShell&gt; push-location Cert:\LocalMachine\TrustedPublisher

PS cert:\LocalMachine\TrustedPublisher&gt; popd

PS HKLM:\Software\Microsoft\PowerShell&gt; popd

PS C:\ps-test&gt;</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Push-Location</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Location</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Location</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Push-Location
		</command:name>
		<maml:description>
			<maml:para>Pushes the current location onto the stack.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>push</command:verb>
		<command:noun>location</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Push-Location cmdlet pushes the current location onto a default stack or onto a stack that you create. If you specify a path, Push-Location pushes the current location onto the stack, and then changes to the location specified by the path. You cannot push a location onto the stack unless it is the current location.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Push-Location</maml:name>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Changes your location to the location specified by this path after it adds (pushes) the current location onto the top of the stack. Enter a path to any location whose provider supports this cmdlet. Wildcards are permitted. The parameter name (&quot;-Path&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>stackName</maml:name>
				<maml:description>
					<maml:para>Specifies the name of a stack. The current location is pushed onto this stack, and this stack becomes the current stack. If the stack does not yet exist, it is created.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Push-Location</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the new location. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>stackName</maml:name>
				<maml:description>
					<maml:para>Specifies the name of a stack. The current location is pushed onto this stack, and this stack becomes the current stack. If the stack does not yet exist, it is created.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Changes your location to the location specified by this path after it adds (pushes) the current location onto the top of the stack. Enter a path to any location whose provider supports this cmdlet. Wildcards are permitted. The parameter name (&quot;-Path&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>&lt;NOTE: if not specified uses the Current location&gt;</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>stackName</maml:name>
			<maml:description>
				<maml:para>Specifies the name of a stack. The current location is pushed onto this stack, and this stack becomes the current stack. If the stack does not yet exist, it is created.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the new location. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						no description
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						no description
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Push-Location -detailed&quot;. For technical information, type &quot;Get-Help Push-Location -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Push-Location by its built-in alias, &quot;pushd&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>push-location C:\Windows</dev:code>
  			<dev:remarks>
				<maml:para>This command pushes the current location onto the default stack and then changes the location to C:\Windows.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>push-location HKLM:\Software\Policies -stackname RegFunction</dev:code>
  			<dev:remarks>
				<maml:para>This command pushes the current location onto the RegFunction stack and changes to the HKLM:\Software\Policies location. This command shows that you can use Push-Location with the Windows PowerShell registry provider.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>push-location</dev:code>
  			<dev:remarks>
				<maml:para>This command pushes the current location onto the default stack.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>push-location ~ -stackname Stack2</dev:code>
  			<dev:remarks>
				<maml:para>This command pushes the current location onto a new stack named Stack2 and then changes to the home directory (%USERPROFILE%), which is represented in the command by the tilde symbol (~) or $home. The Stack2 stack now becomes the current stack. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Pop-Location</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Location</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Location</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-Item
		</command:name>
		<maml:description>
			<maml:para>Deletes the specified items.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>remove</command:verb>
		<command:noun>item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-Item cmdlet deletes one or more items. Because it is supported by many providers, it can delete many different types of items, including files, directories, registry keys, variables, aliases, certificates, and functions.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-Item</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the items being removed. Wildcards are permitted. The parameter name (&quot;-Path&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>recurse</maml:name>
				<maml:description>
					<maml:para>Deletes the items in the specified locations and in all child items of the locations.

The Recurse parameter in this cmdlet does not work properly.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Deletes only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;.Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Remove-Item</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the items being removed. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>recurse</maml:name>
				<maml:description>
					<maml:para>Deletes the items in the specified locations and in all child items of the locations.

The Recurse parameter in this cmdlet does not work properly.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Deletes only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;.Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the items being removed. Wildcards are permitted. The parameter name (&quot;-Path&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>recurse</maml:name>
			<maml:description>
				<maml:para>Deletes the items in the specified locations and in all child items of the locations.

The Recurse parameter in this cmdlet does not work properly.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Deletes only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;.Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the items being removed. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this Cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Remove-Item -detailed&quot;. For technical information, type &quot;Get-Help Remove-Item -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Remove-Item by any of its built-in aliases, &quot;del&quot;, &quot;erase&quot;, &quot;rmdir&quot;, &quot;rd&quot;, &quot;ri&quot;, or &quot;rm&quot; For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>remove-item C:\Test\*.*</dev:code>
  			<dev:remarks>
				<maml:para>This command deletes all of the files with names that include a dot (.) from the C:\Test directory. Because the command specifies a dot, the command does not delete directories, or files with no file name extension.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>remove-item * -include *.doc -exclude *1*</dev:code>
  			<dev:remarks>
				<maml:para>This command deletes from the current directory all files with a .doc file name extension and a name that does not include &quot;1&quot;. It uses the wildcard character (*) to specify the contents of the current directory. It uses the Include and Exclude parameters to specify the files to delete.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>remove-item -path C:\Test\hidden-RO-file.txt -force</dev:code>
  			<dev:remarks>
				<maml:para>This command deletes a file that is both hidden and read-only. It uses the Path parameter to specify the file. It uses the Force parameter to give permission to delete it. Without Force, you cannot delete read-only or hidden files.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem * -include *.csv -recurse | remove-item</dev:code>
  			<dev:remarks>
				<maml:para>This command deletes all of the CSV files in the current directory and all subdirectories recursively.

Because the Recurse parameter in this cmdlet is faulty, the command uses the Get-Childitem cmdlet to get the desired files, and the pipeline operator to pass them to the Remove-Item cmdlet.

In the Get-Childitem command, the Path parameter has a value of *, which represents the contents of the current directory. It uses the Include parameter to specify the CSV file type, and the Recurse parameter to make the retrieval recursive. 

If you try to specify the file type in the path, such as &quot;-path *.csv&quot;, the cmdlet interprets the subject of the search to be a file that has no children, and the Recurse fails.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>remove-item hklm:\software\mycompany\OldApp -recurse</dev:code>
  			<dev:remarks>
				<maml:para>This command deletes the OldApp registry key and all of its subkeys and values. It uses the Remove-Item cmdlet to remove the key. The path is specified, but the optional parameter name (Path) is omitted. 

The Recurse parameter deletes all of the contents of the OldApp subkey recursively. If the key contains subkeys, and you omit the Recurse paraemter, you are prompted to confirm that the you want to delete the contents of the key.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Copy-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-ItemProperty
		</command:name>
		<maml:description>
			<maml:para>Deletes the property and its value from an item.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>remove</command:verb>
		<command:noun>itemproperty</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-ItemProperty cmdlet deletes a property and its value from a item. You can use it to delete registry values and the data that they store.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the item whose properties are being removed. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the names of the properties to be retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Deletes only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Remove-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the item property. The value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the names of the properties to be retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Deletes only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the item whose properties are being removed. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the names of the properties to be retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Deletes only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the item property. The value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of being piped into this cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Remove-ItemProperty -detailed&quot;. For technical information, type &quot;Get-Help Remove-ItemProperty -full&quot;.

In the Windows PowerShell Registry provider, registry values are considered to be properties of a registry key or subkey. You can use the ItemProperty cmdlets to manage these values.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Remove-ItemProperty by its built-in alias, &quot;rp&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>remove-itemproperty -path HKLM:\Software\SmpApplication -name SmpProperty   </dev:code>
  			<dev:remarks>
				<maml:para>This command deletes the SmpProperty registry value, and its data, from the SmpApplication subkey of the HKEY_LOCAL_MACHINE\Software key. In the Windows PowerShell registry 

Because the command is issued from a file system drive (C:\PS&gt;), it includes the fully qualified path to the SmpApplication subkey, including the drive, HKLM:, and the Software key.

It uses the Name parameter to identify the registry value that is being deleted.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-location HKCU:\Software\MyCompany\MyApp

PS HKCU:\Software\MyCompany\MyApp&gt;remove-itemproperty -path . -Name Options -confirm</dev:code>
  			<dev:remarks>
				<maml:para>These commands delete the Options registry value, and its data, from the MyApp subkey of HKEY_CURRENT_USER\Software\MyCompany.

The first command uses the Set-Location cmdlet to change the current location to the HKEY_CURRENT_USER drive (HKCU:) and the Software\MyCompany\MyApp subkey.

The second command uses the Remove-Item cmdlet to remove the Options registry value, and its data, from the MyApp subkey. Because the Path parameter is required, the command uses a dot (.) to indicate the current location. It uses the Name parameter to specify which registry value to delete. It uses the Confirm parameter to request a user prompt before deleting the value.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Set-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Copy-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-PSDrive
		</command:name>
		<maml:description>
			<maml:para>Removes a Windows PowerShell drive from its location.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>remove</command:verb>
		<command:noun>psdrive</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Removes a Windows PowerShell drive from its location. When no drive name is specified, all drives exposed by the specified provider are removed. An error will result if the current working location is a container on a drive you are trying to remove.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-PSDrive</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the names of the Windows PowerShell drives to remove.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>psProvider</maml:name>
				<maml:description>
					<maml:para>Specifies the names of the Windows PowerShell providers. All drives associated with the provider will be removed. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>scope</maml:name>
				<maml:description>
					<maml:para>Accepts an index used to identify the scope where the drive will be installed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows Cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Remove-PSDrive</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalName</maml:name>
				<maml:description>
					<maml:para></maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>psProvider</maml:name>
				<maml:description>
					<maml:para>Specifies the names of the Windows PowerShell providers. All drives associated with the provider will be removed. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>scope</maml:name>
				<maml:description>
					<maml:para>Accepts an index used to identify the scope where the drive will be installed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows Cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the names of the Windows PowerShell drives to remove.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>psProvider</maml:name>
			<maml:description>
				<maml:para>Specifies the names of the Windows PowerShell providers. All drives associated with the provider will be removed. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>scope</maml:name>
			<maml:description>
				<maml:para>Accepts an index used to identify the scope where the drive will be installed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Allows Cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalName</maml:name>
			<maml:description>
				<maml:para></maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Remove-PSDrive  -detailed&quot;. For technical information, type &quot;Get-Help Remove-PSDrive -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>remove-psdrive -name smp</dev:code>
  			<dev:remarks>
				<maml:para>This command removes a Windows PowerShell drive named 'smp'.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-PSDrive</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-PSDrive</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Rename-Item
		</command:name>
		<maml:description>
			<maml:para>Renames an item in a Windows PowerShell provider namespace.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>rename</command:verb>
		<command:noun>item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Renames an item in a Windows PowerShell provider namespace. Using this cmdlet does not affect the content of the item being renamed.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Rename-Item</maml:name>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description><maml:para>Specifies the path to the item to rename.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>newName</maml:name>
				<maml:description><maml:para>Specifies the new name of the item.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Allows the cmdlet to override restrictions to renaming files as long as security is not compromised.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description><maml:para>Passes the object created by this cmdlet along the pipeline. By default, this cmdlet does not pass objects along the pipeline.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description><maml:para>Uses a credential to validate access. You can specify a PSCredential object obtained by using get-credential or, if a user name is supplied, you will be prompted for a password.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the item to rename.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>&lt;current location&gt;</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>newName</maml:name>
			<maml:description>
				<maml:para>Specifies the new name of the item.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The name must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Allows the cmdlet to override restrictions to renaming files as long as security is not compromised.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet along the pipeline. By default, this cmdlet does not pass objects along the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access. You can specify a PSCredential object obtained by using get-credential or, if a user name is supplied, you will be prompted for a password.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this Cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified. Then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Rename-Item  -detailed&quot;. For technical information, type &quot;Get-Help Rename-Item -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>rename-item -path c:\logfiles\daily_file.txt -newname monday_file.txt</dev:code>
  			<dev:remarks>
				<maml:para>This command renames the file daily_file.txt to monday_file.txt.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Clear-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Copy-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Rename-ItemProperty
		</command:name>
		<maml:description>
			<maml:para>Renames a property of an item.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>rename</command:verb>
		<command:noun>itemproperty</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Renames a property of an item. The value of the property is not changed.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Rename-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the item to be renamed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the current name of the property to be renamed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
				<maml:name>newName</maml:name>
				<maml:description>
					<maml:para>Specifies the new name for the property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object, obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied, there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Rename-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the item property. The value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the current name of the property to be renamed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
				<maml:name>newName</maml:name>
				<maml:description>
					<maml:para>Specifies the new name for the property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object, obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied, there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the item to be renamed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the current name of the property to be renamed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
			<maml:name>newName</maml:name>
			<maml:description>
				<maml:para>Specifies the new name for the property.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Allows cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>The credential is used to validate access. If a PSCredential object, obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied, there will be a prompt for a password.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the item property. The value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects piped into this cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Rename-ItemProperty  -detailed&quot;. For technical information, type &quot;Get-Help Rename-ItemProperty -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>rename-itemproperty -path HKLM:\Software\SmpApplication `
-name config -newname oldconfig</dev:code>
  			<dev:remarks>
				<maml:para>This command renames the config registry entry contained in the HKEY_LOCAL_MACHINE\Software\SmpApplication key to oldconfig.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Set-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Copy-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Resolve-Path
		</command:name>
		<maml:description>
			<maml:para>Resolves the wildcard characters in a path and displays the path contents.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>resolve</command:verb>
		<command:noun>path</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Interprets the wildcard characters in a path and displays the items and containers at the location specified by the path, such as the files and folders or registry keys and subkeys. The names appear just as they are represented in the drive, including capitalization..</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Resolve-Path</maml:name>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the Windows PowerShell path to resolve.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Resolve-Path</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the path to be resolved. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the Windows PowerShell path to resolve.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to be resolved. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects piped into this cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Resolve-Path -detailed&quot;. For technical information, type &quot;Get-Help Resolve-Path -full&quot;.

The path cmdlets (*-path) manipulate path names and return the names in a concise format that all Windows PowerShell providers can interpret. They are designed for use in programs and scripts where you want to display all or part of a path name in a particular format. Use them like you would use Dirname, Normpath, Realpath, Join, or other path manipulators.

You can use the path cmdlets with several providers, including the FileSystem, Registry, and Certificate providers.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>resolve-path ~ | format-list</dev:code>
  			<dev:remarks>
				<maml:para>The ~ character signifies the home path. This example will return the full home path.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Drive        : C
Provider     : System.Management.Automation.ProviderInfo
ProviderPath : C:\Documents and Settings\username
Path         : C:\Documents and Settings\username </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>resolve-path windows\*| format-list</dev:code>
  			<dev:remarks>
				<maml:para>This example starts at the current location and returns the paths to all items in the Windows folder. In this case, there is only one.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Drive        : C
Provider     : System.Management.Automation.ProviderInfo
ProviderPath : C:\Documents and Settings\username\windows\system
Path         : C:\Documents and Settings\username\windows\system   </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>resolve-path &quot;C:\windows\*&quot;| format-list</dev:code>
  			<dev:remarks>
				<maml:para>This example goes to the C:\Windows folder and returns the pathnames of everything in there. Be aware that the use of quote marks surrounding the path because it is other than the current location. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Drive        : C
Provider     : System.Management.Automation.ProviderInfo
ProviderPath : C:\windows\addins
Path         : C:\windows\addins

Drive        : C
Provider     : System.Management.Automation.ProviderInfo
ProviderPath : C:\windows\AppPatch
Path         : C:\windows\AppPatch

Drive        : C
Provider     : System.Management.Automation.ProviderInfo
ProviderPath : C:\windows\assembly
Path         : C:\windows\assembly
...       </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Test-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Split-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Convert-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Join-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Restart-Service
		</command:name>
		<maml:description>
			<maml:para>Stops and then starts one or more services.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>restart</command:verb>
		<command:noun>service</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>For each service that you restart, the Restart-Service cmdlet sends a stop message and then a start message to the Windows Service Controller. If a service was already stopped, it is started without notifying you of an error. You can specify the services by their service names or display names, or you can use the InputObject parameter to pass an object that represents each service that you want to restart.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Restart-Service</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the service names of services to be restarted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will stop and restart a service that has dependent services.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Restarts only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Restart-Service</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>displayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display names of services to be restarted. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will stop and restart a service that has dependent services.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Restarts only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Restart-Service</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Restarts the services represented by the specified ServiceController objects. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ServiceController[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will stop and restart a service that has dependent services.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Restarts only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the service names of services to be restarted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Restarts only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passthru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>displayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display names of services to be restarted. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Restarts the services represented by the specified ServiceController objects. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ServiceController[]</command:parameterValue>
			<dev:type>
				<maml:name>ServiceController[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will stop and restart a service that has dependent services.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Any object that can provide the values for Name Parameter
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified. Then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Restart-Service -detailed&quot;. For technical information, type &quot;Get-Help Restart-Service -full&quot;.

Restart-Service can control services only when the current user has permission to do so. If a command does not work correctly, you might not have the required permissions.

To find the service names and display names of the services on your system, type &quot;get-service&quot;. The service names appears in the &quot;Name&quot; column and the display names appears in the &quot;DisplayName&quot; column.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>restart-service wmi </dev:code>
  			<dev:remarks>
				<maml:para>This command restarts the Windows Management Instrumentation (WMI) service on the local computer.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>restart-service -displayname net* -exclude &quot;net logon&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command restarts the services that have a display name that begins with &quot;Net&quot;, except for the &quot;Net Logon&quot; service. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-service net* | where {$_.Status -eq &quot;Stopped&quot;} | restart-service</dev:code>
  			<dev:remarks>
				<maml:para>This command starts all of the stopped network services on the computer.

It uses the Get-Service cmdlet to get objects representing the services whose service name begins with &quot;net&quot;. (The optional Name parameter name is omitted.) The pipeline operator (|) sends the services object to the Where-Object parameter, which selects only the services with a status of &quot;stopped.&quot; Another pipeline operator sends the selected services to Restart-Service. In practice, you would use the Whatif parameter to see the effect of the command before using it.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Start-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Stop-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Suspend-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Resume-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Resume-Service
		</command:name>
		<maml:description>
			<maml:para>Resumes one or more suspended (paused) services.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>resume</command:verb>
		<command:noun>service</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Resume-Service cmdlet sends a resume message to the Windows Service Controller for each of the specified services. If they have been suspended, they will resume service. If they are currently running, the message is ignored. You can specify the services by their service names or display names, or you can use the InputObject parameter to pass a service object that represents the services that you want to resume.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Resume-Service</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the service names of the services to be resumed.

The parameter name is optional. You can use &quot;-Name&quot; or its alias, &quot;-ServiceName&quot;, or you can omit the parameter name.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Resumes only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Resume-Service</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>displayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display names of the services to be resumed. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Resumes only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Resume-Service</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Resumes the services represented by the specified ServiceController objects. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ServiceController[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Resumes only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the service names of the services to be resumed.

The parameter name is optional. You can use &quot;-Name&quot; or its alias, &quot;-ServiceName&quot;, or you can omit the parameter name.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Resumes only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passthru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>displayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display names of the services to be resumed. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Resumes the services represented by the specified ServiceController objects. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ServiceController[]</command:parameterValue>
			<dev:type>
				<maml:name>ServiceController[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						The name object
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None, unless -Passthru is set. Then the resume message is sent to the service.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Resume-Service -detailed&quot;. For technical information, type &quot;Get-Help Resume-Service -full&quot;.

The status of services that have been suspended is &quot;Paused.&quot; When services are resumed, their status is &quot;Running.&quot;

Resume-Service can control services only when the current user has permission to do so. If a command does not work correctly, you might not have the required permissions.

To find the service names and display names of the services on your system, type &quot;get-service&quot;. The service names appear in the &quot;Name&quot; column and the display names appear in the &quot;DisplayName&quot; column.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>resume-service sens</dev:code>
  			<dev:remarks>
				<maml:para>This command resumes the System Event Notification service (service name = SENS) on the local computer. It uses the Name parameter to specify the service name of the service, but omits the parameter name, because it is optional.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-service | where-object {$_.Status -eq &quot;Paused&quot;} | resume-service</dev:code>
  			<dev:remarks>
				<maml:para>This command resumes all of the suspended (paused) services on the computer. The first command gets all of the services on the computer. The pipeline operator passes the results to the Where-Object cmdlet, which selects the services with a Status property of &quot;Paused&quot;. The next pipeline operator sends the results to Resume-Service, which resumes the paused services.

In practice, you would use the Whatif parameter to determine the effect of the command before running it without &quot;Whatif&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Start-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Stop-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Restart-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Suspend-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-Content
		</command:name>
		<maml:description>
			<maml:para>Writes or replaces the content in an item with new content.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>set</command:verb>
		<command:noun>content</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-Content cmdlet is a string-processing cmdlet that writes or replaces the content in the specified item, such as a file. Whereas the Add-Content cmdlet appends content to a file, Set-Content replaces the existing content. You can type the content in the command or send content through the pipeline to Set-Content.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-Content</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the item that will receive the content. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="2">
				<maml:name>value</maml:name>
				<maml:description>
					<maml:para>Specifies the new content for the item.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Changes only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-Content</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the item that will receive the content. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="2">
				<maml:name>value</maml:name>
				<maml:description>
					<maml:para>Specifies the new content for the item.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Changes only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the item that will receive the content. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Changes only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="2">
			<maml:name>value</maml:name>
			<maml:description>
				<maml:para>Specifies the new content for the item.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the item that will receive the content. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this Cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified. Then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Set-Content -detailed&quot;. For technical information, type &quot;Get-Help Set-Content -full&quot;.

Set-Content is designed for string processing. If you pipe non-string objects to Set-Content, it convert the object to a string before writing it. To write object to files, use Out-File.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Set-Content by its built-in alias, &quot;sc&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-content -path C:\Test1\test*.txt -value &quot;Hello, World&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command replaces the contents of all files in the Test1 directory that have names beginning with &quot;test&quot; with &quot;Hello, World. This examples shows how to specify content by typing it in the command.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-date | set-content C:\Test1\date.csv</dev:code>
  			<dev:remarks>
				<maml:para>This command creates a comma-separated variable-length (csv) file that contains only the current date and time. It uses the Get-Date cmdlet to get the current system date and time. The pipeline operator passes the result to Set-Content, which creates the file and writes the content.

If the Test1 directory does not exist, the command fails, but if the file does not exist, the command will create it.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>(get-content Notice.txt) | foreach-object {$_ -replace &quot;Warning&quot;, &quot;Caution&quot;} | set-content Notice.txt</dev:code>
  			<dev:remarks>
				<maml:para>This command replaces all instances of &quot;Warning&quot; with &quot;Caution&quot; in the Notice.txt file. 

It uses the Get-Content cmdlet to get the content of Notice.txt. The pipeline operator sends the results to the ForEach-Object cmdlet, which applies the expression to each line of content in Get-Content. The expression uses the &quot;$_&quot; symbol to refer to the current item and the Replace parameter to specify the text to be replaced. 

Another pipeline operator sends the changed content to Set-Content which replaces the text in Notice.txt with the new content.

The parentheses around the Get-Content command assure that the Get operation is complete, before the Set operation begins. Otherwise, command will fail because the two functions will be trying to access the same file.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Add-Content</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Content</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Content</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-Item
		</command:name>
		<maml:description>
			<maml:para>Changes the value of an item to the value specified in the command.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>set</command:verb>
		<command:noun>item</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-Item cmdlet changes the value of an item, such as a variable or registry key, to the value specified in the command.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-Item</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the location of the new items. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
				<maml:name>value</maml:name>
				<maml:description>
					<maml:para>Specifies a new value for the item.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Changes only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-Item</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the location of the new items. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
				<maml:name>value</maml:name>
				<maml:description>
					<maml:para>Specifies a new value for the item.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Changes only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the location of the new items. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The Path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
			<maml:name>value</maml:name>
			<maml:description>
				<maml:para>Specifies a new value for the item.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>&lt;Provider specific&gt;</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Changes only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the file. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the location of the new items. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Any</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this Cmdlet
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified. Then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Set-Item -detailed&quot;. For technical information, type &quot;Get-Help Set-Item -full&quot;.

The Set-Item cmdlet is not supported by the Windows PowerShell FileSystem provider. To change the values of items in the file system, use Set-Content.

In the Registry drives, HKLM: and HKCU:, Set-Item changes the data in the (Default) value of a registry key. To create and changes the names of registry keys, use New-Item and Rename-Item. To change the names and data in registry values, use New-ItemProperty, Set-ItemProperty, and Rename-ItemProperty.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Set-Item by its built-in alias, &quot;si&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-item -path alias:np -value c:\windows\notepad.exe</dev:code>
  			<dev:remarks>
				<maml:para>This command creates an alias of &quot;np&quot; for Notepad. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-item -path env:UserRole -value Administrator</dev:code>
  			<dev:remarks>
				<maml:para>This command uses the Set-Item cmdlet to change the value of the &quot;UserRole&quot; environment variable to &quot;Administrator&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-item -path function:prompt -value {'PS '+ $(Get-Date -format t) + &quot; &quot; + $(Get-Location) + '&gt; '}</dev:code>
  			<dev:remarks>
				<maml:para>This command uses the Set-Item cmdlet to change the &quot;prompt&quot; function so that it displays the time before the path. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-item -path function:prompt -options &quot;AllScope,ReadOnly&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command sets the AllScope and ReadOnly options for the &quot;prompt&quot; function. This command uses the Options dynamic parameter of the Set-Item cmdlet. The Options parameter is available in Set-Item only when you use it with the Alias or Function provider.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Copy-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-ItemProperty
		</command:name>
		<maml:description>
			<maml:para>Sets the value of a property at the specified location.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>set</command:verb>
		<command:noun>itemproperty</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Sets the value of a property at the specified location. Works with many different properties in many different locations. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the items with the property to be set.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specfies the name of the property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
				<maml:name>value</maml:name>
				<maml:description>
					<maml:para>Specifies the value of the property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Specifies those items upon which the cmdlet is not to act and include all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the path to the items with the property to be set.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the properties to set.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Specifies those items upon which the cmdlet is not to act and include all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the item property. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specfies the name of the property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
				<maml:name>value</maml:name>
				<maml:description>
					<maml:para>Specifies the value of the property.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Specifies those items upon which the cmdlet is not to act and include all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-ItemProperty</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the item property. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Specifies the name of the properties to set.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Specifies those items upon which the cmdlet is not to act and include all others.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Allows cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>The credential is used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the items with the property to be set.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the properties to set.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Specifies those items upon which the cmdlet is not to act and include all others.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies filter elements as required and supported by providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Allows cmdlet to override restrictions such as renaming existing files as long as security is not compromised.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>The credential is used to validate access. If a PSCredential object obtained earlier using get-credential is supplied, it will be used as is. If a user name is supplied,  there will be a prompt for a password.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specfies the name of the property.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="3">
			<maml:name>value</maml:name>
			<maml:description>
				<maml:para>Specifies the value of the property.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the item property. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Any</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or:
Parameters marked as 'allow pipeline input' may come from named properties of objects being piped into this cmdlet. 
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless the Passthru parameter is specified, in which case the resultant Shell object is passed along the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Set-ItemProperty  -detailed&quot;. For technical information, type &quot;Get-Help Set-ItemProperty -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-itemproperty -name SmpProperty -Value exp</dev:code>
  			<dev:remarks>
				<maml:para>This command sets the value of the SmpProperty to exp. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Rename-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Move-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Copy-ItemProperty</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-Location
		</command:name>
		<maml:description>
			<maml:para>Sets the current working location to a specified location.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>set</command:verb>
		<command:noun>location</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The set-location Cmdlet sets the working location to a specified location. That location could be a directory, a sub-directory, a registry location, or another location stack.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-Location</maml:name>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>This parameter is used to specify the path to a new working location.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-Location</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>stackName</maml:name>
				<maml:description>
					<maml:para>The name of the stack to which the location is being set.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-Location</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to the location. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>This parameter is used to specify the path to a new working location.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>String.empty</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>stackName</maml:name>
			<maml:description>
				<maml:para>The name of the stack to which the location is being set.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>&lt;NOTE: if not specified uses the current working stack&gt;</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to the location. The value of -LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this Cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified. Then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Set-Location  -detailed&quot;. For technical information, type &quot;Get-Help Set-Location -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-location HKLM:</dev:code>
  			<dev:remarks>
				<maml:para>This will set the current location to the one specified, in this case it is the HKLM provider.              </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>None.         </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-location env: -passthru</dev:code>
  			<dev:remarks>
				<maml:para>This will set the current location to the one specified, in this case it is the environment variable provider.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Path
----
Env:\</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-location C:</dev:code>
  			<dev:remarks>
				<maml:para>This will set the current location to the one specified, in this case it is the C: drive in the file system provider.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>None.</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Location</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Pop-Location</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Push-Location</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-Service
		</command:name>
		<maml:description>
			<maml:para>Changes the display name, description, or starting mode of a service.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>set</command:verb>
		<command:noun>service</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-Service cmdlet changes the properties of a service, including the description, display name, and start type. You can specify the services by their service names or display names.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-Service</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Specifies the service names of the services to be changed. Wildcards are permitted. The parameter name is optional. You can use &quot;-Name&quot; or its alias, &quot;-ServiceName&quot;, or you can omit the parameter name.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>displayName</maml:name>
				<maml:description><maml:para>Specifies a new display name for the cmdlet.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>description</maml:name>
				<maml:description><maml:para>Specifies a new description for the service.

The service description appears in Services in Computer Management. Description is not a property of the ServiceController object that Get-Service retrieves, but the Win32_Service WMI class includes a description property. To retrieve instances of that class, use the Get-WMIObject cmdlet.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>startupType</maml:name>
				<maml:description><maml:para>Changes the starting mode of the service. Valid values for StartupType are: 

-- Automatic: Start when the system starts.
-- Manual   : Starts only when started by a user or program.
-- Disabled : Cannot be started.</maml:para></maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Automatic</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Manual</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Disabled</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the service names of the services to be changed. Wildcards are permitted. The parameter name is optional. You can use &quot;-Name&quot; or its alias, &quot;-ServiceName&quot;, or you can omit the parameter name.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>displayName</maml:name>
			<maml:description>
				<maml:para>Specifies a new display name for the cmdlet.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>description</maml:name>
			<maml:description>
				<maml:para>Specifies a new description for the service.

The service description appears in Services in Computer Management. Description is not a property of the ServiceController object that Get-Service retrieves, but the Win32_Service WMI class includes a description property. To retrieve instances of that class, use the Get-WMIObject cmdlet.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>startupType</maml:name>
			<maml:description>
				<maml:para>Changes the starting mode of the service. Valid values for StartupType are: 

-- Automatic: Start when the system starts.
-- Manual   : Starts only when started by a user or program.
-- Disabled : Cannot be started.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ServiceStartMode</command:parameterValue>
			<dev:type>
				<maml:name>ServiceStartMode</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Automatic</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Manual</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Disabled</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						None
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Set-Service -detailed&quot;. For technical information, type &quot;Get-Help Set-Service -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

 Set-Service can control services only when the current user has permission to do so. If a command does not work correctly, you might not have the required permissions. 

To find the service names and display names of the services on your system, type &quot;get-service&quot;. The service names appear in the &quot;Name&quot; column and the display names appear in the &quot;DisplayName&quot; column.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-service -name lanmanworkstation -DisplayName &quot;LanMan Workstation&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command changes the display name of the lanmanworkstation service to &quot;LanMan Workstation&quot; (the default is &quot;Workstation&quot;). It uses the Name parameter to identify the service that is being changed and the DisplayName parameter to specify a new display name for the service.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-wmiobject win32_service -filter &quot;name = 'SysmonLog'&quot;

C:\PS&gt;set-service sysmonlog -startuptype automatic

C:\PS&gt;get-wmiobject win32_service -filter &quot;name = 'SysmonLog'&quot;</dev:code>
  			<dev:remarks>
				<maml:para>These commands get the start type of the Performance Logs and Alerts (SysmonLog) service, set the start type to automatic, and then display the result of the change.

The first command uses the Get-WmiObject cmdlet to get the WMI object that represents the SysmonLog service. The default output of this command displays the start type of the service in the &quot;StartMode&quot; field. The second command uses Set-Service to change the start mode to automatic. Then, the first command is repeated to display the change.

To display the start type of all services on the computer, type &quot;get-wmiobject win32_service | format-table Name, StartMode -autosize&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>C:\PS&gt;set-service -name Schedule -description &quot;Configures and schedules tasks.&quot;

get-wmiobject win32_service | where-object {$_.Name -eq &quot;Schedule&quot;} | format-list Name, Description</dev:code>
  			<dev:remarks>
				<maml:para>These commands change the description of the Task Scheduler service on the computer, and then display the result.

The first command  uses a Set-Service command to change the description. It identifies the service by using the service name of the service, &quot;Schedule&quot;.

The second command uses the Get-WmiObject cmdlet to get an instance of the WMI Win32_Service that represents the Task Scheduler service. The first element in the command gets all instances of the Win32_service class. The pipeline operator (|) passes the result to the Where-Object cmdlet, which selects instances with a value of &quot;Schedule&quot; in the name property. Another pipeline operator sends the result to the Format-List cmdlet which formats the output as a list with only the Name and Description properties.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Start-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Stop-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Restart-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Resume-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Suspend-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Split-Path
		</command:name>
		<maml:description>
			<maml:para>Returns the specified part of a path.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>split</command:verb>
		<command:noun>path</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Split-Path cmdlet returns only the specified path of a path, such as the parent directory, a child directory, or a file name. You can use this cmdlet to display or submit only a selected part of a path in a script or application.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Split-Path</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the paths to be split. Wildcards are permitted. If the path includes spaces, enclose it in quotation marks.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>parent</maml:name>
				<maml:description>
					<maml:para>Returns only the parent containers of the item or container specified by the path. For example, in the path &quot;C:\Test\Logs\Pass1.log&quot;, it returns &quot;C:\Test\Logs&quot;. Parent is the default split location parameter.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>resolve</maml:name>
				<maml:description>
					<maml:para>Displays the items that are referenced by the path that remains after the split.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the paths to be split. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Split-Path</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the paths to be split. Wildcards are permitted. If the path includes spaces, enclose it in quotation marks.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>qualifier</maml:name>
				<maml:description>
					<maml:para>Returns only the qualifier of the specified path. For the FileSystem or registry providers, the qualifier is the drive of the provider path, such as C: or HKCU:.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>resolve</maml:name>
				<maml:description>
					<maml:para>Displays the items that are referenced by the path that remains after the split.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the paths to be split. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Split-Path</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the paths to be split. Wildcards are permitted. If the path includes spaces, enclose it in quotation marks.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>noQualifier</maml:name>
				<maml:description>
					<maml:para>Returns the path without the qualifier. For the FileSystem or registry providers, the qualifier is the drive of the provider path, such as C: or HKCU:. For example, in the path  &quot;C:\Test\Logs\Pass1.log&quot;, it returns only &quot;\Test\Logs\Pass1.log&quot;. </maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>resolve</maml:name>
				<maml:description>
					<maml:para>Displays the items that are referenced by the path that remains after the split.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the paths to be split. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Split-Path</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the paths to be split. Wildcards are permitted. If the path includes spaces, enclose it in quotation marks.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>leaf</maml:name>
				<maml:description>
					<maml:para>Returns only the last item or container in the path. For example, in the path &quot;C:\Test\Logs\Pass1.log&quot;, it returns only &quot;Pass1.log&quot;. </maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>resolve</maml:name>
				<maml:description>
					<maml:para>Displays the items that are referenced by the path that remains after the split.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the paths to be split. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Split-Path</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies the paths to be split. Wildcards are permitted. If the path includes spaces, enclose it in quotation marks.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>isAbsolute</maml:name>
				<maml:description>
					<maml:para>Returns TRUE if the path is absolute and FALSE if it is relative. An absolute path has a length greater than zero and does not use &quot;.&quot; to indicate the current path.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>resolve</maml:name>
				<maml:description>
					<maml:para>Displays the items that are referenced by the path that remains after the split.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies the paths to be split. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the paths to be split. Wildcards are permitted. If the path includes spaces, enclose it in quotation marks.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>qualifier</maml:name>
			<maml:description>
				<maml:para>Returns only the qualifier of the specified path. For the FileSystem or registry providers, the qualifier is the drive of the provider path, such as C: or HKCU:.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>parent</maml:name>
			<maml:description>
				<maml:para>Returns only the parent containers of the item or container specified by the path. For example, in the path &quot;C:\Test\Logs\Pass1.log&quot;, it returns &quot;C:\Test\Logs&quot;. Parent is the default split location parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>True</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>leaf</maml:name>
			<maml:description>
				<maml:para>Returns only the last item or container in the path. For example, in the path &quot;C:\Test\Logs\Pass1.log&quot;, it returns only &quot;Pass1.log&quot;. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>noQualifier</maml:name>
			<maml:description>
				<maml:para>Returns the path without the qualifier. For the FileSystem or registry providers, the qualifier is the drive of the provider path, such as C: or HKCU:. For example, in the path  &quot;C:\Test\Logs\Pass1.log&quot;, it returns only &quot;\Test\Logs\Pass1.log&quot;. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>isAbsolute</maml:name>
			<maml:description>
				<maml:para>Returns TRUE if the path is absolute and FALSE if it is relative. An absolute path has a length greater than zero and does not use &quot;.&quot; to indicate the current path.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>resolve</maml:name>
			<maml:description>
				<maml:para>Displays the items that are referenced by the path that remains after the split.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies the paths to be split. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this Cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Strings</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Split-Path -detailed&quot;. For technical information, type &quot;Get-Help Split-Path -full&quot;.

The split location parameters -- Qualifier, Parent, Leaf, and NoQualifier -- are exclusive. You can use only one in each command. 

The path cmdlets (*-path) manipulate path names and return the names in a concise format that all Windows PowerShell providers can interpret. They are designed for use in programs and scripts where you want to display all or part of a path name in a particular format. Use them like you would use Dirname, Normpath, Realpath, Join, or other path manipulators.

You can use the path cmdlets with several providers, including the FileSystem, Registry, and Certificate providers.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>split-path &quot;HKCU:\Software\Microsoft&quot; -qualifier</dev:code>
  			<dev:remarks>
				<maml:para>This command returns only the qualifier (the drive) of the path.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>HKCU:</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>split-path &quot;C:\Test\Logs\*.log&quot; -leaf -resolve</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the files that are reference by the split path. Because this path is split to the last item (the &quot;leaf) only the file names of the paths are displayed.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Pass1.log
Pass2.log
...</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>split-path &quot;C:\WINDOWS\system32\WindowsPowerShell\V1.0\about_*.txt&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command returns only the parent containers of the path. Because it doesn't include any parameters to specify the split, Split-Path uses the split location default, which is Parent.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>C:\WINDOWS\system32\WindowsPowerShell</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>split-path &quot;.\My Pictures\*.jpg&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command determines if the path is relative or absolute. In this case, because the path is relative to the current directory, which is represented by a dot (.), it returns FALSE ($false).</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>False</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>cd (split-path $profile)</dev:code>
  			<dev:remarks>
				<maml:para>This command changes to the directory that contains the Windows PowerShell profile. &quot;CD&quot; is an alias for the Set-Location cmdlet, which changes the current directory. The command in parentheses uses the Split-Path cmdlet to return only the parent of the path stored in the built-in $Profile variable. (The Parent parameter is the default split location parameter, so you can omit it from the command.) The parentheses direct Windows PowerShell to execute the command first. This is a handy way to navigate to a directory with a long path name.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>PS C:\Documents and Settings\NicoleH\My Documents\PSConfiguration&gt;</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Test-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Convert-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Resolve-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Join-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Start-Service
		</command:name>
		<maml:description>
			<maml:para>Starts one or more stopped services.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>start</command:verb>
		<command:noun>service</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Start-Service cmdlet sends a start message to the Windows Service Controller for each of the specified services. If a service is already running, the message is ignored without error. You can specify the services by their service names or display names, or you can use the InputObject parameter to supply a service object representing the services that you want to start.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Start-Service</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the service names for the service to be started. 

The parameter name is optional. You can use &quot;-Name&quot; or its alias, &quot;-ServiceName&quot;, or you can omit the parameter name.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Starts only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Start-Service</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>displayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display names of the services to be started. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Starts only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Start-Service</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Starts the services represented by the specified ServiceController objects. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ServiceController[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Starts only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the service names for the service to be started. 

The parameter name is optional. You can use &quot;-Name&quot; or its alias, &quot;-ServiceName&quot;, or you can omit the parameter name.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Starts only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passthru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>displayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display names of the services to be started. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Starts the services represented by the specified ServiceController objects. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ServiceController[]</command:parameterValue>
			<dev:type>
				<maml:name>ServiceController[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Any objects which provide the values for the parameters that take them.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None, unless -Passthru is set. Then the start message is sent to the service and echoed in the command line.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Start-Service -detailed&quot;. For technical information, type &quot;Get-Help Start-Service -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Start-Service by its built-in alias, &quot;sasv&quot;. For more information, see About_Alias.

Start-Service can control services only when the current user has permission to do so. If a command does not work correctly, you might not have the required permissions.

To find the service names and display names of the services on your system, type &quot;get-service&quot;. The service names appear in the &quot;Name&quot; column and the display names appear in the &quot;DisplayName&quot; column.

You can only start services that have a start type of &quot;Manual&quot; or &quot;Automatic;&quot; you cannot start services with a start type of &quot;Disabled.&quot; If a Start-Service command fails with the message &quot;Cannot start service &lt;service-name&gt; on computer,&quot; use a Get-WmiObject command to find the start type of the service and, if necessary, use a Set-Service command to change the start type of the service.

Some services, such as Performance Logs and Alerts (sysmonlog) stop automatically if they have no work to do. When Windows PowerShell starts a service that stops itself almost immediately, it displays the following message: &quot;Service &lt;display-name&gt; start failed.&quot;
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>start-service -name eventlog</dev:code>
  			<dev:remarks>
				<maml:para>This command starts EventLog service on the local computer. It uses the Name parameter to identify the service by its service name.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>start-service -displayname *remote* -whatif</dev:code>
  			<dev:remarks>
				<maml:para>This command tells what would happen if you started the services with a display name that includes &quot;remote.&quot; It uses the DisplayName parameter to specify the services by their display name, instead of their service name, and the -whatif parameter to tell what would happen if the command were executed, instead of executing the command.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$s = get-service wmi

C:\PS&gt;start-service -InputObject $s -passthru | format-list &gt;&gt; services.txt</dev:code>
  			<dev:remarks>
				<maml:para>These commands start the WMI service on the computer and add a record of the action to the services.txt file. The first command uses the Get-Service cmdlet to get an object representing the WMI service and store it in the $s variable. 

The second command uses the Start-Service cmdlet to start the WMI service. It identifies the service by using the InputObject parameter to pass the $s variable containing the WMI service object to Start-Service. Then, it uses the Passthru parameter to create an object that represents the starting of the service. Without this parameter, Start-Service does not create any output.

The pipeline operator (|) passes the object that Start-Service creates to the Format-List cmdlet, which format the object as a list of its properties. The append redirection operator (&gt;&gt;) redirects the output to the services.txt file, where it added to the end of the existing file.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code></dev:code>
  			<dev:remarks>
				<maml:para>This series of commands shows how to start a service when the start type of the service is &quot;Disabled.&quot; The first command, which uses the Start-Service cmdlet to start the Telnet service (tlntsvr), fails.

C:\PS&gt;start-service tlntsvr

Start-Service : Service 'Telnet (TlntSvr)' cannot be started due to the followng error: Cannot start service TlntSvr on computer '.'.
At line:1 char:14
+ start-service  &lt;&lt;&lt;&lt; tlntsvr

The second command uses the Get-WmiObject cmdlet to get the Tlntsvr service. This command retrieves an object with the start type property in the &quot;StartMode&quot; field. The resulting display reveals that the start type of the Tlntsvr service is &quot;Disabled.&quot;

C:\PS&gt; get-wmiobject win32_service | where {$_.Name -eq &quot;tlntsvr&quot;}

ExitCode  : 0
Name      : TlntSvr
ProcessId : 0
StartMode : Disabled
State     : Stopped
Status    : OK

The next command uses the Set-Service cmdlet to change the start type of the Tlntsvr service to &quot;Manual.&quot;

C:\PS&gt; set-service tlntsvr -startuptype manual

Now, we can resubmit the Start-Service command. This time, the command succeeds.

C:\PS&gt; start-service tlntsvr

To verify that the command succeeded use Get-Service.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Suspend-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Stop-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Restart-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Resume-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Stop-Process
		</command:name>
		<maml:description>
			<maml:para>Stops one or more running processes.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>stop</command:verb>
		<command:noun>process</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Stop-Process cmdlet stops one or more running processes. You can specify a process by process name or process ID (PID), or pass a process object to Stop-Process. For Get-Process, the default method is by process name. For Stop-Process, the default method is by process ID.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Stop-Process</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>id</maml:name>
				<maml:description>
					<maml:para>Specifies the process IDs of the processes to be stopped. To specify multiple IDs, use commas to separate the IDs. To find the PID of a process, type &quot;get-process&quot;. The parameter name (&quot;-Id&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Stop-Process</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the process names of the processes to be stopped. You can type multiple process names (separated by commas) or use wildcard characters.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Stop-Process</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Stops the processes represented by the specified process objects. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Process[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>id</maml:name>
			<maml:description>
				<maml:para>Specifies the process IDs of the processes to be stopped. To specify multiple IDs, use commas to separate the IDs. To find the PID of a process, type &quot;get-process&quot;. The parameter name (&quot;-Id&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Int32[]</command:parameterValue>
			<dev:type>
				<maml:name>Int32[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Stops the processes represented by the specified process objects. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Process[]</command:parameterValue>
			<dev:type>
				<maml:name>Process[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the process names of the processes to be stopped. You can type multiple process names (separated by commas) or use wildcard characters.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>PSObjects with the &quot;Name&quot; or &quot;Id&quot; property specified, or strings, or integers.</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None by default. When -passthru is specified,  a
PSObject is passed through. the pipeline.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Stop-Process -detailed&quot;. For technical information, type &quot;Get-Help Stop-Process -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also use the properties and methods of the WMI Win32_Process object in Windows PowerShell. For information, see Get-WmiObject and the Windows Management Instrument SDK.

You can also refer to Stop-Process by its built-in aliases, &quot;kill&quot; and &quot;spps&quot;. For more information, see About_Alias.

When stopping processes, be aware that some processes are dependent upon others, and might stop when the process that they depend upon stops. In an extreme case, stopping a process can stop Windows.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>stop-process -name notepad</dev:code>
  			<dev:remarks>
				<maml:para>This command stops all instances of the Notepad process on the computer. (Each instance of Notepad runs in its own process.) It uses the Name parameter to specify the processes, all of which have the same name. If you were to use the ID parameter to stop the same processes, you would have to list the process IDs of each instance of Notepad.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>stop-process -id 3952 -confirm -passthru</dev:code>
  			<dev:remarks>
				<maml:para>This command stops a particular instance of the Notepad process. It uses the process ID, 3952, to identify the process. The Confirm parameter directs Windows PowerShell to prompt the user before stopping the process. Because the prompt includes the process name, as well as its ID, this is best practice. The Passthru parameter passes the process object to the formatter for display. Without this parameter, there would be no display after a Stop-Process command.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Confirm
Are you sure you want to perform this action?
Performing operation &quot;Stop-Process&quot; on Target &quot;notepad (3952)&quot;.
[Y] Yes  [A] Yes to All  [N] No  [L] No to All  [S] Suspend  [?] Help
(default is &quot;Y&quot;):y
Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
     41       2      996       3212    31            3952 notepad</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>calc

c:\PS&gt;$p = get-process calc

c:\PS&gt;stop-process -inputobject $p

c:\PS&gt;get-process | where-object {$_.HasExited}</dev:code>
  			<dev:remarks>
				<maml:para>This series of commands starts and stops the Calc process and then detects processes that have stopped. 

The first command (&quot;calc&quot;) starts an instance of the calculator. The second command (&quot;$p = get-process calc&quot;), uses the Get-Process cmdlet to get an object representing the Calc process and store it in the $p variable. The third command (&quot;stop-process -inputobject $p&quot;) uses the Stop-Process cmdlet to stop the Calc process. It uses the InputObject parameter to pass the object to Stop-Process. 

The last command gets all of the process on the computer that were running, but are now stopped. It uses the Get-Process cmdlet to get all of the processes on the computer. The pipeline operator (|) passes the results to the Where-Object cmdlet which selects the ones where the value of the HasExited property is TRUE. HasExited is just one property of process objects. To find all properties, type &quot;get-process | get-member&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Process, Start-Process</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Stop-Service
		</command:name>
		<maml:description>
			<maml:para>Stops one or more running services.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>stop</command:verb>
		<command:noun>service</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Stop-Service cmdlet sends a stop message to the Windows Service Controller for each of the specified services. You can specify the services by their service names or display names, or you can use the InputObject parameter to pass a service object representing the services that you want to stop.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Stop-Service</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the service names of the services to be stopped. Wildcards are permitted.

The parameter name is optional. You can use &quot;-Name&quot; or its alias, &quot;-ServiceName&quot;, or you can omit the parameter name.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Stops only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will stop a service that has dependent services.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Stop-Service</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>displayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display names of the services to be stopped. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Stops only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will stop a service that has dependent services.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Stop-Service</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Stops the services represented by the specified ServiceController objects. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ServiceController[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Stops only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will stop a service that has dependent services.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the service names of the services to be stopped. Wildcards are permitted.

The parameter name is optional. You can use &quot;-Name&quot; or its alias, &quot;-ServiceName&quot;, or you can omit the parameter name.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Stops only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will stop a service that has dependent services.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passthru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>displayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display names of the services to be stopped. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Stops the services represented by the specified ServiceController objects. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ServiceController[]</command:parameterValue>
			<dev:type>
				<maml:name>ServiceController[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						The name object
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None, unless -Passthru is set. Then the stop message is sent to the service and echoed in the command line.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Stop-Service -detailed&quot;. For technical information, type &quot;Get-Help Stop-Service -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Stop-Service by its built-in alias, &quot;spsv&quot;. For more information, see About_Alias.

Stop-Service can control services only when the current user has permission to do so. If a command does not work correctly, you might not have the required permissions.

To find the service names and display names of the services on your system, type &quot;get-service&quot;. The service names appear in the &quot;Name&quot; column and the display names appear in the &quot;DisplayName&quot; column.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>stop-service sysmonlog</dev:code>
  			<dev:remarks>
				<maml:para>This command stops the Performance Logs and Alerts (SysmonLog) service on the local computer.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-service -displayname telnet | stop-service</dev:code>
  			<dev:remarks>
				<maml:para>This command stops the Telnet service on the local computer. The command uses the Get-Service cmdlet to get an object representing the Telnet service. The pipeline operator pipes the object to the Stop-Service cmdlet, which stops the service.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-service iisadmin | format-list -property name, dependentservices

C:PS&gt;stop-service iisadmin -force -confirm</dev:code>
  			<dev:remarks>
				<maml:para>The Stop-Service command stops the IISAdmin service on the local computer. Because stopping this service also stops the services that depend on the IISAdmin service, it is best to precede the Stop-Service command with a command that lists the services that depend on the IISAdmin service.

The first command lists the services that depend on IISAdmin. It uses the Get-Service cmdlet to get an object representing the IISAdmin service. The pipeline operator (|) passes the result to the Format-List cmdlet. The command uses the Property parameter of Format-List to list only the Name and DependentServices properties of the service.

The second command stops the IISAdmin service. The Force parameter is required to stop a service that has dependent services. The command uses the Confirm parameter to request confirmation from the user before stopping each service.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Suspend-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Start-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Restart-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Resume-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Suspend-Service
		</command:name>
		<maml:description>
			<maml:para>Suspends (pauses) one or more running services.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>suspend</command:verb>
		<command:noun>service</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Suspend-Service cmdlet sends a suspend message to the  to the Windows Service Controller for each of the specified services. While suspended, the service is still running but its action is halted until resumed, such as by using Resume-Service.You can specify the services by their service names or display names, or you can use the InputObject parameter to pass a service object representing the services that you want to suspend.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Suspend-Service</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Specifies the service names of the services to be stopped. Wildcards are permitted.

The parameter name is optional. You can use &quot;-Name&quot; or its alias, &quot;-ServiceName&quot;, or you can omit the parameter name.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Suspends only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Suspend-Service</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>displayName</maml:name>
				<maml:description>
					<maml:para>Specifies the display names of the services to be suspended. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Suspends only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Suspend-Service</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passthru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Suspends the services represented by the specified ServiceController objects. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">ServiceController[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Suspends only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the service names of the services to be stopped. Wildcards are permitted.

The parameter name is optional. You can use &quot;-Name&quot; or its alias, &quot;-ServiceName&quot;, or you can omit the parameter name.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Suspends only the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified services. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>displayName</maml:name>
			<maml:description>
				<maml:para>Specifies the display names of the services to be suspended. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passthru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Suspends the services represented by the specified ServiceController objects. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ServiceController[]</command:parameterValue>
			<dev:type>
				<maml:name>ServiceController[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						The name object
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None, unless -Passthru is set. Then the suspend message is sent to the service.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Suspend-Service -detailed&quot;. For technical information, type &quot;Get-Help Suspend-Service -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

Suspend-Service can control services only when the current user has permission to do so. If a command does not work correctly, you might not have the required permissions.

Also, Suspend-Service can only suspend services that support being suspended and resumed. To determine whether a particular service can be suspended, use the Get-Service cmdlet with the &quot;CanPauseAndContinue&quot; property. For example, &quot;get-service wmi | format-list name, canpauseandcontinue&quot;. To find all services on the computer that can be suspended, type &quot;get-service | where {$_.canpauseandcontinue -eq &quot;True&quot;}&quot;.

To find the service names and display names of the services on your system, type &quot;get-service&quot;. The service names appear in the &quot;Name&quot; column and the display names appear in the &quot;DisplayName&quot; column.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>suspend-service -displayname &quot;Telnet&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command suspends the Telnet service (Tlntsvr) service on the local computer.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>suspend-service -name lanman* -whatif</dev:code>
  			<dev:remarks>
				<maml:para>This command tells what would happen if you suspended the services that have a service name that begins with &quot;lanman.&quot; To suspend the services, rerun the command without the Whatif parameter.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-service schedule | suspend-service</dev:code>
  			<dev:remarks>
				<maml:para>This command uses the Get-Service cmdlet to get an object that represents the Task Scheduler (Schedule) service on the computer. The pipeline operator passes the result to the Suspend-Service cmdlet, which suspends the service.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-service | where-object {$_.canpauseandcontinue -eq &quot;True&quot;} | suspend-service -confirm</dev:code>
  			<dev:remarks>
				<maml:para>This command suspends all of the services on the computer that can be suspended. It uses the Get-Service cmdlet to get objects representing the services on the computer. The pipeline operator (|) passes the results to the Where-Object cmdlet which selects only the services that have a value of &quot;True&quot; for the CanPauseAndContinue property. Another pipeline operator passes the results to the Suspend-Service cmdlet. The Confirm parameter prompts you for confirmation before suspending each of the services.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Start-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Stop-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Restart-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Resume-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Service</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Test-Path
		</command:name>
		<maml:description>
			<maml:para>Determines whether all elements of a path exist.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>test</command:verb>
		<command:noun>path</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Test-Path cmdlet determines whether all elements of the path exist. It returns &quot;true&quot; ($true) if all elements exist and &quot;false&quot; ($false) if any are missing.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Test-Path</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies a path to be tested. Wildcards are permitted. If the path includes spaces, enclose it in quotation marks. The parameter name (&quot;-Path&quot;) is optional.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>pathType</maml:name>
				<maml:description>
					<maml:para>Determines the type of element that the path locates. Returns TRUE if the element is of the specified type and FALSE if it is not.

Valid values are:
-- Container: An element that contains other elements, such as a directory or registry key.

-- Leaf: An element that does not contain other elements, such as a file or registry entry.

-- Any: Either a container or a leaf.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Any</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Container</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Leaf</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>isValid</maml:name>
				<maml:description>
					<maml:para>Determines whether the syntax of the path is correct, regardless of whether the elements of the path exist. Returns TRUE if the path syntax is valid; FALSE if it is not.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Tests only the specified paths. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Test-Path</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>literalPath</maml:name>
				<maml:description>
					<maml:para>Specifies a path to be tested. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>pathType</maml:name>
				<maml:description>
					<maml:para>Determines the type of element that the path locates. Returns TRUE if the element is of the specified type and FALSE if it is not.

Valid values are:
-- Container: An element that contains other elements, such as a directory or registry key.

-- Leaf: An element that does not contain other elements, such as a file or registry entry.

-- Any: Either a container or a leaf.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Any</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Container</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Leaf</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>isValid</maml:name>
				<maml:description>
					<maml:para>Determines whether the syntax of the path is correct, regardless of whether the elements of the path exist. Returns TRUE if the path syntax is valid; FALSE if it is not.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Tests only the specified paths. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>filter</maml:name>
				<maml:description>
					<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>credential</maml:name>
				<maml:description>
					<maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies a path to be tested. Wildcards are permitted. If the path includes spaces, enclose it in quotation marks. The parameter name (&quot;-Path&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The path must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>pathType</maml:name>
			<maml:description>
				<maml:para>Determines the type of element that the path locates. Returns TRUE if the element is of the specified type and FALSE if it is not.

Valid values are:
-- Container: An element that contains other elements, such as a directory or registry key.

-- Leaf: An element that does not contain other elements, such as a file or registry entry.

-- Any: Either a container or a leaf.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">TestPathType</command:parameterValue>
			<dev:type>
				<maml:name>TestPathType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Any</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Any</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Container</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Leaf</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>isValid</maml:name>
			<maml:description>
				<maml:para>Determines whether the syntax of the path is correct, regardless of whether the elements of the path exist. Returns TRUE if the path syntax is valid; FALSE if it is not.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Tests only the specified paths. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>filter</maml:name>
			<maml:description>
				<maml:para>Specifies a filter in the provider's format or language. The value of this parameter qualifies the Path parameter. The syntax of the filter, including the use of wildcards, depends on the provider. Filters are more efficient than other parameters, because the provider applies them when retrieving the objects, rather than having Windows PowerShell filter the objects after they are retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>credential</maml:name>
			<maml:description>
				<maml:para>Uses a credential to validate access to the resource. &lt;Credential&gt; represents a user-name, such as &quot;User01&quot; or &quot;Domain01\User01&quot;, or a PSCredential object, such as the one retrieved by using the Get-Credential cmdlet. If you type a user name, you will be prompted for a password. This parameter appears, but it is not supported in any Windows PowerShell core cmdlets or providers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSCredential</command:parameterValue>
			<dev:type>
				<maml:name>PSCredential</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>literalPath</maml:name>
			<maml:description>
				<maml:para>Specifies a path to be tested. Unlike Path, the value of LiteralPath is used exactly as it is typed. No characters are interpreted as wildcards. If the path includes escape characters, enclose it in single quotation marks. Single quotation marks tell Windows PowerShell not to interpret any characters as escape sequences.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this Cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Boolean</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						Either true or false
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Test-Path -detailed&quot;. For technical information, type &quot;Get-Help Test-Path -full&quot;.

The path cmdlets (*-path) manipulate path names and return the names in a concise format that all Windows PowerShell providers can interpret. They are designed for use in programs and scripts where you want to display all or part of a path name in a particular format. Use them like you would use Dirname, Normpath, Realpath, Join, or other path manipulators.

 You can use the path cmdlets with several providers, including the FileSystem, Registry, and Certificate providers.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>test-path &quot;C:\Documents and Settings\NicoleH</dev:code>
  			<dev:remarks>
				<maml:para>This command determines whether all elements in the path exist.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>test-path $PROFILE

C:\PS&gt;test-path $PROFILE -IsValid</dev:code>
  			<dev:remarks>
				<maml:para>These commands test the path to the Windows PowerShell profile. The first command determines whether all elements in the path exist. The second command determines whether the syntax of the path is correct. In this case, the path is FALSE, but the syntax is correct (TRUE). These commands use $PROFILE, the built-in variable that points to the location for the profile even if none exists.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>test-path C:\CAD\Commercial_buildings\* -exclude *.dwg</dev:code>
  			<dev:remarks>
				<maml:para>This command determines whether there are any files in the Commercial Buildings directory other than .dwg files.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>test-path $profile -pathtype leaf</dev:code>
  			<dev:remarks>
				<maml:para>This command determines whether the path stored in the $profile variable leads to a directory or a file.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Convert-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Split-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Resolve-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Join-Path</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_namespace</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


</helpItems>
