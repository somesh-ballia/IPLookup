<?xml version="1.0" encoding="utf-8" ?>

<helpItems xmlns="http://msh" schema="maml">

<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Add-Member
		</command:name>
		<maml:description>
			<maml:para>Adds a user-defined custom member to an instance of a Windows PowerShell object. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>add</command:verb>
		<command:noun>member</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Adds a user-defined custom member to an instance of a Windows PowerShell object. Lets you add the following types of members: AliasProperty, CodeProperty, NoteProperty, ScriptProperty,PropertySet,CodeMethod,MemberSet and ScriptMethod. You set the initial value of the member by using the Value parameter. In the case of AliasProperty, ScriptProperty, CodeProperty and CodeMethod, you can supply additional information by using the SecondValue parameter.

The additional members are added to the particular instance of the object that you pipe to add-member or specify using the InputObject parameter. The additional member is only available while that instance exists. You can use the Export-Clixml cmdlet to save the instance, including the additional members, to a file. The information stored in that file can be used by the Import-Clixml cmdlet to recreate the instance of the object.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Add-Member</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>memberType</maml:name>
				<maml:description><maml:para>Specifies the type of the member to add. The valid values for this parameter are: AliasProperty, CodeProperty, NoteProperty, ScriptProperty, PropertySet, CodeMethod, MemberSet and ScriptMethod.</maml:para></maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >AliasProperty</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >CodeProperty</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Property</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >NoteProperty</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ScriptProperty</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Properties</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >PropertySet</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Method</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >CodeMethod</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ScriptMethod</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Methods</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ParameterizedProperty</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >MemberSet</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Specifies the name of the member to be added.

If you omit the &quot;-Name&quot; parameter name, the value of the -Name parameter must be the second unnamed parameter value in the command. If you include the parameter name, the parameters can appear in any order.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>value</maml:name>
				<maml:description><maml:para>Specifies the initial value of the added member. If you add an AliasProperty, CodeProperty or CodeMethod member, you can supply optional, additional information by using the SecondValue parameter.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4">
				<maml:name>secondValue</maml:name>
				<maml:description><maml:para>Specifies optional additional information about AliasProperty, ScriptProperty, CodeProperty or CodeMethod members. If used when adding an AliasProperty, this parameter must be a data type. A conversion (cast) to the specified data type is added to the value of the AliasProperty. For example, if you add an AliasProperty that provides an alternate name for a string property, you can also specify a SecondValue of System.Int32 to indicate that the value of that string property should be converted to an integer when accessed by using the corresponding AliasProperty.

You can use the SecondValue parameter to specify an additional ScriptBlock when adding a ScriptProperty member. In that case, the first ScriptBlock, specified in the Value parameter, is used to get the value of a variable and the second ScriptBlock, specified in the SecondValue parameter, is used to set the value of a variable.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the object to which the new member is added. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Adds a new member even if one with the same name already exists. Does not work for core members of a type.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description><maml:para>Passes the newly-extended object created by this cmdlet along the pipeline. By default, this cmdlet does not pass any objects along the pipeline.</maml:para></maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the object to which the new member is added. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>memberType</maml:name>
			<maml:description>
				<maml:para>Specifies the type of the member to add. The valid values for this parameter are: AliasProperty, CodeProperty, NoteProperty, ScriptProperty, PropertySet, CodeMethod, MemberSet and ScriptMethod.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSMemberTypes</command:parameterValue>
			<dev:type>
				<maml:name>PSMemberTypes</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>AliasProperty</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>CodeProperty</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Property</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>NoteProperty</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ScriptProperty</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Properties</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>PropertySet</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Method</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>CodeMethod</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ScriptMethod</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Methods</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ParameterizedProperty</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>MemberSet</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>All</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the member to be added.

If you omit the &quot;-Name&quot; parameter name, the value of the -Name parameter must be the second unnamed parameter value in the command. If you include the parameter name, the parameters can appear in any order.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>value</maml:name>
			<maml:description>
				<maml:para>Specifies the initial value of the added member. If you add an AliasProperty, CodeProperty or CodeMethod member, you can supply optional, additional information by using the SecondValue parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="4">
			<maml:name>secondValue</maml:name>
			<maml:description>
				<maml:para>Specifies optional additional information about AliasProperty, ScriptProperty, CodeProperty or CodeMethod members. If used when adding an AliasProperty, this parameter must be a data type. A conversion (cast) to the specified data type is added to the value of the AliasProperty. For example, if you add an AliasProperty that provides an alternate name for a string property, you can also specify a SecondValue of System.Int32 to indicate that the value of that string property should be converted to an integer when accessed by using the corresponding AliasProperty.

You can use the SecondValue parameter to specify an additional ScriptBlock when adding a ScriptProperty member. In that case, the first ScriptBlock, specified in the Value parameter, is used to get the value of a variable and the second ScriptBlock, specified in the SecondValue parameter, is used to set the value of a variable.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Adds a new member even if one with the same name already exists. Does not work for core members of a type.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>false</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the newly-extended object created by this cmdlet along the pipeline. By default, this cmdlet does not pass any objects along the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>false</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          You can only add members to PSObjects. To determine if a object is a PSObject, use the 'is' operator. For example, to test an object stored in the $obj variable, type &quot;$obj -is [PSObject]&quot;.

The names of the MemberType, Name, Value, and SecondValue parameters are optional. If you omit the parameter names, the unnamed parameter values must appear in this order: MemberType, Name, Value, SecondValue. If you include the parameter names, the parameters can appear in any order.

For more information, type &quot;Get-Help Add-Member -detailed&quot;. For technical information, type &quot;Get-Help Add-Member -full&quot;. 

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = (get-childitem)[0]
$a | add-member -membertype noteproperty -name status -value done
$a | get-member</dev:code>
  			<dev:remarks>
				<maml:para>This command adds a note property to a DirectoryInfo object returned by Get-ChildItem. It names the new property status and assigns it a value of done. The last line of the command pipes the updated object to Get-Member to demonstrate that the property has been added.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = (get-childitem)[0]
$a | add-member -membertype aliasproperty -name filelength -value length 
$a.filelength</dev:code>
  			<dev:remarks>
				<maml:para>This command adds an alias property to a DirectoryInfo object returned by Get-ChildItem. It names the new property filelength and makes it an alias for the length property. The last line of the command returns the value of the new property.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = &quot;a string&quot;
$a = $a | add-member noteproperty StringUse Display -passthru
$a.StringUse</dev:code>
  			<dev:remarks>
				<maml:para>This command adds a property to a string. Because the string is a non-PSObject, it is necessary to specify the Passthru parameter to store the extended string back into the variable. In the final line of the command, the new property is displayed.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = &quot;this is a string&quot;
$a = add-member -inputobject $a -membertype scriptmethod -name words `
-value {$this.split()} -passthru
$a.words()</dev:code>
  			<dev:remarks>
				<maml:para>This command adds a script method to a string object. The script method exposes the Split() method of the System.String .Net Framework Class Library class to make it convenient to return the individual words in a string by called a method named words on the string object. Note that the Passthru parameter was specified to force Add-Member to return the extended string object as output to be stored in the $a variable.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$event = get-eventlog -logname system -newest 1
$event.TimeWritten | get-member
add-member -inputobject $event -membertype aliasproperty -name When `
-value TimeWritten -secondvalue System.String
$event.When | get-member</dev:code>
  			<dev:remarks>
				<maml:para>This command adds an AliasProperty to an EventLogEntry object returned by the Get-EventLog cmdlets. The AliasProperty is named 'When' and is an alias for the TimeWritten property of the object. The SecondValue parameter is used to specify that the property value should be converted to type System.String when accessed by using the AliasProperty; the TimeWritten property is a DateTime object.

The first line of the command uses the Get-EventLog cmdlet to retrieve the most recent event from the System event log and stores it in the $event variable. The second line of the command accesses the TimeWritten property of that event and pipes it to the Get-Member cmdlet to demonstrate that the property is a DateTime type. Add-Member is then used to add an AliasProperty member to the instance of the EventLogEntry object stored in the $event variable. The Name parameter is used to set the name of the new member to 'When' and the Value parameter is used to specify that it is an alias for the 'TimeWritten' property. The SecondValue parameter is used to indicate that, when this new member is used, the value it returns should be cast from its original System.DateTime type to a System.String type. The final line of the command accesses the new member and pipes it to the Get-Member cmdlet to confirm that it is of type System.String.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Member</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-CLIXML</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-CLIXML</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Clear-Variable
		</command:name>
		<maml:description>
			<maml:para>Deletes the value of a variable.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>clear</command:verb>
		<command:noun>variable</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Clear-Variable cmdlet deletes the data stored in an variable, but it does not delete the variable. As a result, the value of the variable is NULL (empty). If the variable has a specified data or object type, Clear-Variable preserves the type of the object stored in the variable.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Clear-Variable</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Specifies the name of the variable to be cleared. Wildcards are permitted. This parameter is required, but the parameter name (&quot;-Name&quot;) is optional.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description><maml:para>Clears only the specified items. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description><maml:para>Omits the specified items. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>scope</maml:name>
				<maml:description><maml:para>Specifies the scope in which this alias is valid. Valid values are &quot;Global&quot;, &quot;Local&quot;, or &quot;Script&quot;, or a number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent). &quot;Local&quot; is the default. For more information, type &quot;get-help about_scope&quot;.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description><maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para></maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Clears only the specified items. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>scope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope in which this alias is valid. Valid values are &quot;Global&quot;, &quot;Local&quot;, or &quot;Script&quot;, or a number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent). &quot;Local&quot; is the default. For more information, type &quot;get-help about_scope&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>local</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the variable to be cleared. Wildcards are permitted. This parameter is required, but the parameter name (&quot;-Name&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The Name must be specified</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects piped into this cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified. Then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Clear-Variable -detailed&quot;. For technical information, type &quot;Get-Help Clear-Variable -full&quot;.

To delete a variable, along with its value, use Remove-Variable or Remove-Item.

Clear-Variable will not delete the values of variables that are set as constants or owned by the system, even if you use the -Force parameter.

If the variable that you are clearing does not exist, the cmdlet has no effect. It does not create a variable with a null value.

You can also refer to Clear-Variable by its built-in alias, &quot;clv&quot;. For more information, see About_Alias.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>clear-variable my* -global</dev:code>
  			<dev:remarks>
				<maml:para>This command deletes the value of the global variables that begin with &quot;my&quot;. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a=3

C:\PS&gt;&amp;{ clear-variable a }

C:\PS&gt;$a
3</dev:code>
  			<dev:remarks>
				<maml:para>These commands demonstrate that clearing a variable in a child scope does not clear the value in the parent scope. The first command sets the value of the variable $a to 3. The second command uses the invoke operator (&amp;) to run a Clear-Variable command in a new scope. The variable is cleared in the child scope (although it didn't exist), but it is not cleared in the local scope. The third command, which gets the value of $a, shows that the value 3 is unaffected.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>clear-variable -name processes</dev:code>
  			<dev:remarks>
				<maml:para>This command deletes the value of the $processes variable. The $processes variable still exists, but the value is null.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Compare-Object
		</command:name>
		<maml:description>
			<maml:para>Compares two sets of objects.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>compare</command:verb>
		<command:noun>object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Compares two sets of objects. One set of objects is the Reference set and the other is the Difference set. 

The result of the comparison indicates whether a property value appeared only in the object from the Reference set (indicated by the &lt;= symbol), only in the object from the Difference set (indicated by the =&gt; symbol) or, if the IncludeEqual parameter is specified, in both objects (indicated by the == symbol).</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Compare-Object</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>referenceObject</maml:name>
				<maml:description><maml:para>Objects used as a reference for comparison.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="2">
				<maml:name>differenceObject</maml:name>
				<maml:description><maml:para>Objects to compare to those specified as reference objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">PSObject[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>syncWindow</maml:name>
				<maml:description><maml:para>Defines a search region where an attempt is made to re-sync the order if there is no match.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>property</maml:name>
				<maml:description><maml:para>Specifies the properties of the reference and difference objects to compare. </maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>caseSensitive </maml:name>
				<maml:description><maml:para>Indicates that comparisons should be case-sensitive.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>culture </maml:name>
				<maml:description><maml:para>Specifies the culture to use for comparisons.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>excludeDifferent </maml:name>
				<maml:description><maml:para>Displays only the characteristics of compared objects that are equal.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>includeEqual </maml:name>
				<maml:description><maml:para>Displays characteristics of compared objects that are equal. By default, only characteristics that differ between the reference and difference object are displayed.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru </maml:name>
				<maml:description><maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para></maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>referenceObject</maml:name>
			<maml:description>
				<maml:para>Objects used as a reference for comparison.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			<dev:type>
				<maml:name>PSObject[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="2">
			<maml:name>differenceObject</maml:name>
			<maml:description>
				<maml:para>Objects to compare to those specified as reference objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSObject[]</command:parameterValue>
			<dev:type>
				<maml:name>PSObject[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>syncWindow</maml:name>
			<maml:description>
				<maml:para>Defines a search region where an attempt is made to re-sync the order if there is no match.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>5</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>property</maml:name>
			<maml:description>
				<maml:para>Specifies the properties of the reference and difference objects to compare. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>caseSensitive </maml:name>
			<maml:description>
				<maml:para>Indicates that comparisons should be case-sensitive.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>culture </maml:name>
			<maml:description>
				<maml:para>Specifies the culture to use for comparisons.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>&lt;default culture&gt;</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>excludeDifferent </maml:name>
			<maml:description>
				<maml:para>Displays only the characteristics of compared objects that are equal.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>True</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>includeEqual </maml:name>
			<maml:description>
				<maml:para>Displays characteristics of compared objects that are equal. By default, only characteristics that differ between the reference and difference object are displayed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru </maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Any pipeline object.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Objects</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The cmdlet returns the result of a comparison.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Compare-Object -detailed&quot;. For technical information, type &quot;Get-Help Compare-Object -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>compare-object -referenceobject $(get-content C:\test\testfile1.txt) -differenceobject $(get-content C:\test\testfile2.txt)</dev:code>
  			<dev:remarks>
				<maml:para>This command compares the contents of two text files. It displays only those lines which appear in one or the other file, but not in both files.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>compare-object -referenceobject $(get-content C:\Test\testfile1.txt) -differenceobject $(get-content C:\Test\testfile2.txt) -includeequal</dev:code>
  			<dev:remarks>
				<maml:para>This command compares each line of content in two text files. It displays all lines of content from both files indicating whether each line appears in only textfile1.txt or textfile2.txt or appears in both of the files.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$processes_before = get-process
notepad
$processes_after  = get-process
compare-object -referenceobject $processes_before -differenceobject $processes_after</dev:code>
  			<dev:remarks>
				<maml:para>This command compares two sets of process objects. The Get-Process cmdlet is used to retrieve the processes running on the computer and store them in the $processes_before variable. An instance of Notepad is then started. The Get-Process cmdlet is used again to retrieve the processes running on the computer and store them in the $processes_after variable. In the last line, Compare-Object is used to compare the two sets of process objects, displaying the differences between them, which includes the new instance of Notepad at least.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Group-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Measure-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Sort-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ForEach-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Tee-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Where-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   ConvertTo-Html
		</command:name>
		<maml:description>
			<maml:para>Creates an HTML page that represents an object or a set of objects.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>convertto</command:verb>
		<command:noun>html</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Creates an HTML page that represents objects. The cmdlet returns a complete HTML page.  The input objects are represented in a single HTML table within that page. The object property names appear as the HTML table column headings and each of the rows in the table list the corresponding property values. Properties without values are represented as blank cells in the table.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>ConvertTo-Html</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>property</maml:name>
				<maml:description><maml:para>Specifies the properties of the input object to represent within the HTML table.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects to represent as an HTML table. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>body</maml:name>
				<maml:description><maml:para>Specifies the text to include within the &lt;body&gt; element of the HTML output.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>head</maml:name>
				<maml:description><maml:para>Specifies the text to include within the &lt;head&gt; element of the HTML output.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>title</maml:name>
				<maml:description><maml:para>Specifies the text to include within the &lt;title&gt; element of the HTML output.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to represent as an HTML table. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>property</maml:name>
			<maml:description>
				<maml:para>Specifies the properties of the input object to represent within the HTML table.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>body</maml:name>
			<maml:description>
				<maml:para>Specifies the text to include within the &lt;body&gt; element of the HTML output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>head</maml:name>
			<maml:description>
				<maml:para>Specifies the text to include within the &lt;head&gt; element of the HTML output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>title</maml:name>
			<maml:description>
				<maml:para>Specifies the text to include within the &lt;title&gt; element of the HTML output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Strings</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help ConvertTo-HTML -detailed&quot;. For technical information, type &quot;Get-Help ConvertTo-HTML -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-date | convertto-html</dev:code>
  			<dev:remarks>
				<maml:para>This command uses the Get-Date cmdlet to create a DateTime object and pipe it to the ConvertTo-HTML cmdlet. The cmdlet creates an HTML page that includes an HTML table that represents the object. The HTML output is displayed at the console</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-date | convertto-html -title &quot;Date Table&quot; | 
foreach { $_ -replace &quot;&gt;&lt;&quot;,&quot;&gt;`n&lt;&quot; }</dev:code>
  			<dev:remarks>
				<maml:para>This command uses the Get-Date cmdlet to create DateTime object. It pipes the result to the ConvertTo-HTML cmdlet. Formatting instructions are applied by using the foreach-object cmdlet. It creates a tag set for each value in the DateTime object.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | convertto-html -properties Name,Path,Company '
-title &quot;Process Information&quot; &gt; proc.htm
invoke-item proc.htm</dev:code>
  			<dev:remarks>
				<maml:para>This command uses the Get-Process cmdlet to retrieve a set of objects that contain information about the processes running on the computer. It pipes those objects to the ConvertTo-HTML cmdlet, which creates an HTML page that includes an HTML table that represents the objects. The Properties parameter is used to specify the properties of the objects that are represented in the table. The Title parameter specifies the title of the HTML page. The redirection operator (&gt;) is used to send the resulting HTML to a file named proc.htm. Finally, the Invoke-Item cmdlet is used to open the proc.htm file in the application associated with the .htm file name extension. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Export-Clixml</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Csv</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Export-Alias
		</command:name>
		<maml:description>
			<maml:para>Exports information about currently-defined aliases to a file.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>export</command:verb>
		<command:noun>alias</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Exports information about currently-defined aliases within a specified namespace scope to a file. If the output file specified does not exist, the cmdlet will create it. It can export the alias information to comma-separated value (CSV) format or script (Script) format. Both formats include the following header information preceded by the # comment symbol: Alias File, Exported by, Date/Time and Machine. 
The CSV format includes the name of the alias, the name of the corresponding cmdlet, the description of the alias if there is one, and the scope. The Script format includes the same information, but provides it as a set-alias command with the alias information provided as the value of the parameters to Set-Alias.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Export-Alias</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>path</maml:name>
				<maml:description><maml:para>Specifies the path to the file in which to store alias information. You can use wildcards, but the resulting path value must resolve to a single file name.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Specifies the names of the aliases to export. To enter multiple alias names, separate them by using commas. If you do not specify an alias name or names, the cmdlet exports information about all of the current aliases.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description><maml:para>Indicates that the object created by this cmdlet should be passed along the pipeline. By default, this cmdlet does not pass any objects along the pipeline.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>as</maml:name>
				<maml:description><maml:para>Determines whether the aliases are output in comma-separated value (CSV) format or in script (Script) format.</maml:para></maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Csv</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Script</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>append</maml:name>
				<maml:description><maml:para>Appends the output to the specified file, rather than overwriting the existing contents of that file. </maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>description</maml:name>
				<maml:description><maml:para>Enables you to add a description to the exported file. The description appears at the top of the file, following the header information. It is preceded by a # symbol.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>scope</maml:name>
				<maml:description><maml:para>Specifies the scope from which the aliases should be exported. This can be a named scope like &quot;global&quot;, &quot;local&quot;, or &quot;script&quot;; or it can be a number that indicates the level of scope to include in the export. A scope value of 0 indicates the current scope and increasing the value by 1 indicates that the scope should be the parent scope of the current scope. </maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Forces the cmdlet to clear the read-only attribute of the output file if it is set. After the command is complete, the read-only attribute will be reset if possible.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>noClobber</maml:name>
				<maml:description><maml:para>Ensures that the cmdlet cannot overwrite an existing file. If the NoClobber parameter is not specified, Export-Alias overwrites the specified export file without warning. If both Append and NoClobber are specified, the output is appended to the existing file.</maml:para></maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the file in which to store alias information. You can use wildcards, but the resulting path value must resolve to a single file name.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the names of the aliases to export. To enter multiple alias names, separate them by using commas. If you do not specify an alias name or names, the cmdlet exports information about all of the current aliases.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>*</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Indicates that the object created by this cmdlet should be passed along the pipeline. By default, this cmdlet does not pass any objects along the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>as</maml:name>
			<maml:description>
				<maml:para>Determines whether the aliases are output in comma-separated value (CSV) format or in script (Script) format.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ExportAliasFormat</command:parameterValue>
			<dev:type>
				<maml:name>ExportAliasFormat</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>&quot;CSV&quot;</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Csv</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Script</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>append</maml:name>
			<maml:description>
				<maml:para>Appends the output to the specified file, rather than overwriting the existing contents of that file. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>description</maml:name>
			<maml:description>
				<maml:para>Enables you to add a description to the exported file. The description appears at the top of the file, following the header information. It is preceded by a # symbol.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>scope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope from which the aliases should be exported. This can be a named scope like &quot;global&quot;, &quot;local&quot;, or &quot;script&quot;; or it can be a number that indicates the level of scope to include in the export. A scope value of 0 indicates the current scope and increasing the value by 1 indicates that the scope should be the parent scope of the current scope. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>All locally visible aliases</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Forces the cmdlet to clear the read-only attribute of the output file if it is set. After the command is complete, the read-only attribute will be reset if possible.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>noClobber</maml:name>
			<maml:description>
				<maml:para>Ensures that the cmdlet cannot overwrite an existing file. If the NoClobber parameter is not specified, Export-Alias overwrites the specified export file without warning. If both Append and NoClobber are specified, the output is appended to the existing file.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.AliasInfo</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						An alias object that can supply a name or names if they are not supplied by the path.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.AliasInfo</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified. Then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Export-Alias  -detailed&quot;. For technical information, type &quot;Get-Help Export-Alias -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

Export-Alias does not support exporting aliases to a non-file system path.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>export-alias -path alias.txt
notepad alias.txt</dev:code>
  			<dev:remarks>
				<maml:para>This command exports current alias information to a file named alias.txt in the current directory. It then opens the result in Notepad.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>export-alias -path alias.txt -noclobber</dev:code>
  			<dev:remarks>
				<maml:para>This command attempts to export current alias information to a file named alias.txt. Because the NoClobber parameter is specified, the command will not complete successfully if a file named alias.txt already exists in the current directory.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>export-alias -path alias.txt -append -description &quot;Appended Alias Info&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command exports current alias information to a file named alias.txt. It includes a description in the header comment of the file and appends the exported information if the file named alias.txt exists and has content.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>export-alias -path alias.txt -as script
notepad alias.txt</dev:code>
  			<dev:remarks>
				<maml:para>This command exports current alias information to a file named alias.txt. It overwrites any previous contents in that file if it exists. The alias information is exported as a series of commands that use the Set-Alias cmdlet. In the second line, the command opens the resulting exported file using Notepad. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Import-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Export-Clixml
		</command:name>
		<maml:description>
			<maml:para>Creates an XML-based representation of an object or objects and stores it in a file.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>export</command:verb>
		<command:noun>clixml</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Creates an XML-based representation of an object or objects and stores it in a file. You can then use the Import-CLIXML cmdlet to recreate the saved object based on the contents of that file.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Export-Clixml</maml:name>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1">
				<maml:name>path</maml:name>
				<maml:description><maml:para>Specifies the path to the file where the XML representation of the object will be stored.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the object to be converted. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>depth</maml:name>
				<maml:description><maml:para>Specifies how many levels of contained objects should be included in the XML representation. The object being exported might have properties that are themselves objects. If you want to save an XML representation of the properties of those contained objects, you must specify a depth of 2. The contained object may itself include properties that are objects. To save a representation of the properties of those objects you will have to increase the depth to 3 and so on. If the object being exported has a type-specific depth specified in the *.types.psxml files, it will be used if you do not specify the Depth parameter.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Causes the cmdlet to clear the read-only attribute of the output file if necessary.  The cmdlet will attempt to reset the read-only attribute when the command completes.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>encoding</maml:name>
				<maml:description><maml:para>Specifies the type of encoding for the target file. Valid values are: ASCII, UTF8, UTF7, UTF32, Unicode, BigEndianUnicode, Default, and OEM.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>noClobber</maml:name>
				<maml:description><maml:para>Ensures that the cmdlet does not overwrite the contents of an existing file. By default, if a file exists in the specified path, Export-Clixml overwrites the file without warning.</maml:para></maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the file where the XML representation of the object will be stored.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the object to be converted. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>depth</maml:name>
			<maml:description>
				<maml:para>Specifies how many levels of contained objects should be included in the XML representation. The object being exported might have properties that are themselves objects. If you want to save an XML representation of the properties of those contained objects, you must specify a depth of 2. The contained object may itself include properties that are objects. To save a representation of the properties of those objects you will have to increase the depth to 3 and so on. If the object being exported has a type-specific depth specified in the *.types.psxml files, it will be used if you do not specify the Depth parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Causes the cmdlet to clear the read-only attribute of the output file if necessary.  The cmdlet will attempt to reset the read-only attribute when the command completes.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>encoding</maml:name>
			<maml:description>
				<maml:para>Specifies the type of encoding for the target file. Valid values are: ASCII, UTF8, UTF7, UTF32, Unicode, BigEndianUnicode, Default, and OEM.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>noClobber</maml:name>
			<maml:description>
				<maml:para>Ensures that the cmdlet does not overwrite the contents of an existing file. By default, if a file exists in the specified path, Export-Clixml overwrites the file without warning.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Any object or objects
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The output is an XML file.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Export-Clixml -detailed&quot;. For technical information, type &quot;Get-Help Export-Clixml -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>&quot;This is a test&quot; | export-clixml smpl.xml</dev:code>
  			<dev:remarks>
				<maml:para>This command creates an XML file that stores a representation of the string, &quot;This is a test&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-acl C:\test.txt | export-clixml -Path testacl.xml
$testacl = import-clixml testacl.xml</dev:code>
  			<dev:remarks>
				<maml:para>This command stores a representation of the object returned by the Get-Acl cmdlet, which contains information about the security descriptor on the C:\test.txt file. The output from Get-Acl is piped to Export-Clixml, which stores an XML-based representation of the object in a file named testacl.xml. In the second line of the command, the Import-Clixml cmdlet is used to retrieve the stored representation and recreate the object, storing it in the $testacl variable.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Import-Clixml</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Csv</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertTo-Html</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Export-Csv
		</command:name>
		<maml:description>
			<maml:para>Creates a comma-separated values (CSV) file that represents the input objects. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>export</command:verb>
		<command:noun>csv</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Creates a comma-separated values (CSV) file that represents the input objects. 

Unless the NoTypeInformation parameter is specified, the first line of the CSV file contains the string '#TYPE ' followed by the fully-qualified name of the type being represented. For example: #TYPE System.Diagnostics.Process.

The next line of the CSV file represents column headers. It contains a comma-separated list of the names of all the properties of the first input object. 

Additional lines of the file contain comma-separated lists of the values of each of the properties named in the column header line for each input object.

The first object establishes the column headers. The headers are not modified in response to subsequent input objects. If those objects do not include some of the properties in the column header line, no value is written for that property of that object. Instead, two commas are written to indicate a missing property and ensure proper alignment of property values with the property names in the column headers.

Property values that contain commas, double quotes,  leading or trailing spaces, or line breaks, are put in double quotes before being written to the CSV file. Any double quotes contained in a property are redoubled to indicate that they are literal.

You can use the Import-CSV cmdlet to use the information in the CSV file to recreate the input objects.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Export-Csv</maml:name>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1">
				<maml:name>path</maml:name>
				<maml:description><maml:para>Specifies the path to the CSV to create.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Accepts objects that the cmdlet will represents as a CSV file. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Overwrites the file specified in path without prompting.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>encoding</maml:name>
				<maml:description><maml:para>Sets the type of encoding for the exported CSV file. Values can be: Unicode, UTF7, UTF8, ASCII.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>noTypeInformation</maml:name>
				<maml:description><maml:para>Omits the #TYPE header from the CSV file. If this parameter is not specified, the first line of the CSV file contains the string &quot;#TYPE &quot; followed by the fully-qualified name of the type of the object. If this parameter is specified, no type information is included in the CSV file.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>noClobber</maml:name>
				<maml:description><maml:para>Will not overwrite (replace the contents) of an existing file. By default, if a file exists in the specified path, Export-Csv overwrites the file without warning.</maml:para></maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="false" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the CSV to create.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Accepts objects that the cmdlet will represents as a CSV file. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overwrites the file specified in path without prompting.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>encoding</maml:name>
			<maml:description>
				<maml:para>Sets the type of encoding for the exported CSV file. Values can be: Unicode, UTF7, UTF8, ASCII.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>ASCII</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>noTypeInformation</maml:name>
			<maml:description>
				<maml:para>Omits the #TYPE header from the CSV file. If this parameter is not specified, the first line of the CSV file contains the string &quot;#TYPE &quot; followed by the fully-qualified name of the type of the object. If this parameter is specified, no type information is included in the CSV file.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>noClobber</maml:name>
			<maml:description>
				<maml:para>Will not overwrite (replace the contents) of an existing file. By default, if a file exists in the specified path, Export-Csv overwrites the file without warning.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Any object(s)</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>CSV list</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The CSV list is sent to the file designated in the -Path parameter.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          The ToString method is called on each property of each input object to retrieve a string version of the value of the properties.

For more information, type &quot;Get-Help Export-Csv -detailed&quot;. For technical information, type &quot;Get-Help Export-Csv -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process wmiprvse | select-object basePriority,ID,SessionID,WorkingSet | export-csv -path data.csv</dev:code>
  			<dev:remarks>
				<maml:para>This command selects a few properties of the wmiprvse process and exports them to a CSV format file named data.csv.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Import-Csv</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Clixml</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertTo-Html</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Format-Custom
		</command:name>
		<maml:description>
			<maml:para>Uses a customized view to format the output.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>format</command:verb>
		<command:noun>custom</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Format-Custom cmdlet formats the output of a command as defined in an alternate view. Format-Custom is designed to display views that are not just tables or just lists. You can use the views defined in the *format.PS1XML files in the Windows PowerShell directory or you can create your own views in new PS1XML files and use the Update-FormatData cmdlet to add them to Windows PowerShell.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Format-Custom</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>property</maml:name>
				<maml:description><maml:para>Specifies the object properties that appear in the display and the order in which they appear. Wildcards are permitted.

If you omit this parameter, the properties that appear in the display depend on the object being displayed. The parameter name (&quot;-Property&quot;) is optional. You cannot use the Property and View parameters in the same command.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects to be formatted. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>view</maml:name>
				<maml:description><maml:para>Specifies the name of an alternate format or &quot;view.&quot; If you omit this parameter, Format-Custom uses a default custom view. You cannot use the Property and View parameters in the same command.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>groupBy</maml:name>
				<maml:description><maml:para>Formats the output in groups based on a shared property or value. Enter an expression or a property of the output.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>expand</maml:name>
				<maml:description><maml:para>Formats the collection object, as well as the objects in the collection. This parameter is designed to format objects that support the ICollection (System.Collections) interface.

Valid values are:
-- Enum (default): Displays the properties of the objects in the collection. 
-- Core: Displays the properties of the collection object. 
-- Both: Displays the properties of the collection object and the properties of objects in the collection.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>displayError</maml:name>
				<maml:description><maml:para>Displays errors at the command line.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>showError</maml:name>
				<maml:description><maml:para>Sends errors through the pipeline.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>depth</maml:name>
				<maml:description><maml:para>Specifies the number of columns in the display.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>property</maml:name>
			<maml:description>
				<maml:para>Specifies the object properties that appear in the display and the order in which they appear. Wildcards are permitted.

If you omit this parameter, the properties that appear in the display depend on the object being displayed. The parameter name (&quot;-Property&quot;) is optional. You cannot use the Property and View parameters in the same command.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to be formatted. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>view</maml:name>
			<maml:description>
				<maml:para>Specifies the name of an alternate format or &quot;view.&quot; If you omit this parameter, Format-Custom uses a default custom view. You cannot use the Property and View parameters in the same command.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>groupBy</maml:name>
			<maml:description>
				<maml:para>Formats the output in groups based on a shared property or value. Enter an expression or a property of the output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>expand</maml:name>
			<maml:description>
				<maml:para>Formats the collection object, as well as the objects in the collection. This parameter is designed to format objects that support the ICollection (System.Collections) interface.

Valid values are:
-- Enum (default): Displays the properties of the objects in the collection. 
-- Core: Displays the properties of the collection object. 
-- Both: Displays the properties of the collection object and the properties of objects in the collection.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>displayError</maml:name>
			<maml:description>
				<maml:para>Displays errors at the command line.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>showError</maml:name>
			<maml:description>
				<maml:para>Sends errors through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>depth</maml:name>
			<maml:description>
				<maml:para>Specifies the number of columns in the display.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>ComplexSpecificParameters.maxDepthAllowable</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Any object may be input.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Objects</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						FormatInfoData objects determine the display format.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Format-Custom is designed to display views that are not just tables or just lists. To display an alternate table view, use Format-Table. To display an alternate list view, use Format-List.

For more information, type &quot;Get-Help Format-Custom -detailed&quot;. For technical information, type &quot;Get-Help Format-Custom -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Format-Custom by its built-in alias, &quot;fc&quot;. For more information, see About_Alias.

The Groupby parameter assumes that the objects are sorted. Before using Format-Custom to group the objects, use Sort-Object to sort them.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-command start-transcript | format-custom -view MyView</dev:code>
  			<dev:remarks>
				<maml:para>This command formats information about the Start-Transcript cmdlet in the format defined by the MyView view, a custom view created by the user. To run this command successfully, you must first create a new PS1XML file, define the MyView view, and then use the Update-FormatData command to add the PS1XML file to Windows PowerShell.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process Winlogon | format-custom</dev:code>
  			<dev:remarks>
				<maml:para>This command formats information about the Winlogon process in an alternate customized view. Because the command does not use the View parameter, Format-Custom uses a default custom view to format the data.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Format-List</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Format-Wide</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Format-Table</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Format-List
		</command:name>
		<maml:description>
			<maml:para>Formats the output as a list of properties in which each property appears on a new line.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>format</command:verb>
		<command:noun>list</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Format-List cmdlet formats the output of a command as a list of properties in which each property is displayed on a separate line. Because more space is available for each item in a list than in a table, Windows PowerShell displays more properties of the object in the list, and the property values are less likely to be truncated. You can use a command to format all properties of an object as a list (format-list *) to find all of the properties of the object.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Format-List</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>property</maml:name>
				<maml:description><maml:para>Specifies the object properties that appear in the display and the order in which they appear. Wildcards are permitted.  

If you omit this parameter, the properties that appear in the display depend on the object being displayed. The parameter name (&quot;-Property&quot;) is optional. You cannot use the Property and View parameters in the same command.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>view</maml:name>
				<maml:description><maml:para>Specifies the name of an alternate list format or &quot;view.&quot; You cannot use the Property and View parameters in the same command.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>groupBy</maml:name>
				<maml:description><maml:para>Formats the output in groups based on a shared property or value. Enter an expression or a property of the output. </maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects to be formatted. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>expand</maml:name>
				<maml:description><maml:para>Formats the collection object, as well as the objects in the collection. This parameter is designed to format objects that support the ICollection (System.Collections) interface.

Valid values are:
-- Enum (default): Displays the properties of the objects in the collection. 
-- Core: Displays the properties of the collection object. 
-- Both: Displays the properties of the collection object and the properties of objects in the collection.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>displayError</maml:name>
				<maml:description><maml:para>Displays errors at the command line.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>showError</maml:name>
				<maml:description><maml:para>Sends errors through the pipeline.</maml:para></maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>property</maml:name>
			<maml:description>
				<maml:para>Specifies the object properties that appear in the display and the order in which they appear. Wildcards are permitted.  

If you omit this parameter, the properties that appear in the display depend on the object being displayed. The parameter name (&quot;-Property&quot;) is optional. You cannot use the Property and View parameters in the same command.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>view</maml:name>
			<maml:description>
				<maml:para>Specifies the name of an alternate list format or &quot;view.&quot; You cannot use the Property and View parameters in the same command.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>groupBy</maml:name>
			<maml:description>
				<maml:para>Formats the output in groups based on a shared property or value. Enter an expression or a property of the output. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to be formatted. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>expand</maml:name>
			<maml:description>
				<maml:para>Formats the collection object, as well as the objects in the collection. This parameter is designed to format objects that support the ICollection (System.Collections) interface.

Valid values are:
-- Enum (default): Displays the properties of the objects in the collection. 
-- Core: Displays the properties of the collection object. 
-- Both: Displays the properties of the collection object and the properties of objects in the collection.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>displayError</maml:name>
			<maml:description>
				<maml:para>Displays errors at the command line.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>showError</maml:name>
			<maml:description>
				<maml:para>Sends errors through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Formatted objects</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          The format cmdlets, such as format-list, arrange the data to be displayed, but do not display it. The data is displayed by the output features of Windows PowerShell, and by the out-* cmdlets, such as Out-Host, Out-File, and Out-Printer.

If you do not use a format cmdlet, Windows PowerShell applies that default format for each object that it displays.

For more information, type &quot;Get-Help Format-List -detailed&quot;. For technical information, type &quot;Get-Help Format-List -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Format-List by its built-in alias, &quot;FL&quot;. For more information, see About_Alias.

The Groupby parameter assumes that the objects are sorted. Before using Format-Custom to group the objects, use Sort-Object to sort them.

The View parameter lets you specify an alternate format for the table. You can use the views defined in the *.format.PS1XML files in the Windows PowerShell directory or you can create your own views in new PS1XML files and use the Update-FormatData cmdlet to include them in Windows PowerShell. 

The alternate view for the View parameter must use list format; if not, the command fails. If the alternate view is a table, use Format-Table. If the alternate view is neither list nor table, use Format-Custom.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-service | format-list</dev:code>
  			<dev:remarks>
				<maml:para>This command formats information about services on the computer as a list. By default, the services are formatted as a table. The Get-Service cmdlet gets objects representing the services on the computer. The pipeline operator (|) passes the results through the pipeline to Format-List. Then, the Format-List command formats the service information in a list and sends it to the outputter for display.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = get-childitem $pshome\*.ps1xml

C:\PS&gt;format-list -InputObject $a</dev:code>
  			<dev:remarks>
				<maml:para>These commands display information about the PS1XML files in the Windows PowerShell directory as a list. The first command gets the objects representing the files and stores them in the $a variable. The second command uses Format-List to format information about objects stored in $a. This command uses the InputObject parameter to pass the variable to Format-List, which then sends the formatted output to the outputter for display.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | format-list -property name, basepriority, priorityclass</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the name, base priority, and priority class of each process on the computer. It uses the Get-Process cmdlet to get an object representing each process. The pipeline operator (|) passes the process objects through the pipeline to Format-List. Format-List formats the processes as a list of the specified properties. The &quot;-property&quot; parameter name is optional, so you can omit it. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process winlogon | format-list -property *</dev:code>
  			<dev:remarks>
				<maml:para>This command displays all of the properties of the Winlogon process. It uses the Get-Process cmdlet to get an object representing the Winlogon process. The pipeline operator (|) passes the Winlogon process object through the pipeline to Format-List. The command uses the Property parameter to specify the properties and the * to indicate all properties. Because the name of the -property parameter is optional, you can omit it, and type the command as: &quot;format-list *&quot;. Format-List automatically sends the results to the outputter for display.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Format-Custom</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Format-Table</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Format-Wide</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-File</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Format-Table
		</command:name>
		<maml:description>
			<maml:para>Formats the output as a table.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>format</command:verb>
		<command:noun>table</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Format-Table cmdlet formats the output of a command as a table with a selected properties of the object in each column. The object type determines the default layout and properties that are displayed in each column, but you can use the Property parameter to select the properties that you want to see.

You can also use Format-Table to add calculated properties to an object before displaying it. To do so, you use the Property parameter to specify a hash table. The hash table must include two keys: Label and Expression. The Label key is assigned the name of the calculated property. The Expression key is assigned a script block that is evaluated to determine the value of the property.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Format-Table</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>property</maml:name>
				<maml:description><maml:para>Specifies the object properties that appear in the display and the order in which they appear. Wildcards are permitted.  

If you omit this parameter, the properties that appear in the display depend on the object being displayed. The parameter name (&quot;-Property&quot;) is optional. You cannot use the Property and View parameters in the same command.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>autosize</maml:name>
				<maml:description><maml:para>Adjusts the column size and number of columns based on the width of the data. By default, the column size and number are determined by the view.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>hideTableHeaders</maml:name>
				<maml:description><maml:para>Omits the column headings from the table.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>groupBy</maml:name>
				<maml:description><maml:para>Formats the output in groups based on a shared property or value. Enter an expression or a property of the output.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>wrap</maml:name>
				<maml:description><maml:para>Displays text that exceeds the column width on the next line. By default, text that exceeds the column width is truncated.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>view</maml:name>
				<maml:description><maml:para>Specifies the name of an alternate table format or &quot;view.&quot; You cannot use the Property and View parameters in the same command.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects to be formatted. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>expand</maml:name>
				<maml:description><maml:para>Formats the collection object, as well as the objects in the collection. This parameter is designed to format objects that support the ICollection (System.Collections) interface.

Valid values are:
-- Enum (default): Displays the properties of the objects in the collection. 
-- Core: Displays the properties of the collection object. 
-- Both: Displays the properties of the collection object and the properties of objects in the collection.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>displayError</maml:name>
				<maml:description><maml:para>Displays errors at the command line.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>showError</maml:name>
				<maml:description><maml:para>Sends errors through the pipeline.</maml:para></maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>property</maml:name>
			<maml:description>
				<maml:para>Specifies the object properties that appear in the display and the order in which they appear. Wildcards are permitted.  

If you omit this parameter, the properties that appear in the display depend on the object being displayed. The parameter name (&quot;-Property&quot;) is optional. You cannot use the Property and View parameters in the same command.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>autosize</maml:name>
			<maml:description>
				<maml:para>Adjusts the column size and number of columns based on the width of the data. By default, the column size and number are determined by the view.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>hideTableHeaders</maml:name>
			<maml:description>
				<maml:para>Omits the column headings from the table.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>groupBy</maml:name>
			<maml:description>
				<maml:para>Formats the output in groups based on a shared property or value. Enter an expression or a property of the output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>wrap</maml:name>
			<maml:description>
				<maml:para>Displays text that exceeds the column width on the next line. By default, text that exceeds the column width is truncated.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>view</maml:name>
			<maml:description>
				<maml:para>Specifies the name of an alternate table format or &quot;view.&quot; You cannot use the Property and View parameters in the same command.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to be formatted. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>expand</maml:name>
			<maml:description>
				<maml:para>Formats the collection object, as well as the objects in the collection. This parameter is designed to format objects that support the ICollection (System.Collections) interface.

Valid values are:
-- Enum (default): Displays the properties of the objects in the collection. 
-- Core: Displays the properties of the collection object. 
-- Both: Displays the properties of the collection object and the properties of objects in the collection.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>displayError</maml:name>
			<maml:description>
				<maml:para>Displays errors at the command line.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>showError</maml:name>
			<maml:description>
				<maml:para>Sends errors through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Formatted objects</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Format-Table -detailed&quot;. For technical information, type &quot;Get-Help Format-Table -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Format-Table by its built-in alias, &quot;FT&quot;. For more information, see About_Alias.

The -Groupby parameter assumes that the objects are sorted. Before using Format-Custom to group the objects, use Sort-Object to sort them.

The View parameter lets you specify an alternate format for the table. You can use the views defined in the *.format.PS1XML files in the Windows PowerShell directory or you can create your own views in new PS1XML files and use the Update-FormatData cmdlet to include them in Windows PowerShell. 

The alternate view for the View parameter must use table format; if not, the command fails. If the alternate view is a list, use Format-List. If the alternate view is neither list nor table, use Format-Custom.

You can use Format-Table to add a calculated property to an object. You can also add a calculated property by using Add-Member or Select-Object. For details, see the help for these cmdlets.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-pssnapin | format-table -auto</dev:code>
  			<dev:remarks>
				<maml:para>This command formats information about Windows PowerShell snap-ins in a table. By default, they are formatted in a list. The Get-PsSnapin cmdlets gets objects representing the snap-ins. The pipeline operator (|) passes the object to the Format-Table command. Format-Table formats the objects in a table. The Autosize parameter adjusts the column widths to minimize truncation.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | format-table -groupby basepriority -wrap</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the processes on the computer in groups with the same base priority class. The Get-Process cmdlets gets objects representing each process on the computer. The pipeline operator (|) passes the object to the Format-Table command. The Groupby parameter arranges the data about the processes into groups based on the value of their basepriority property. The Wrap parameter assures that data is displayed on the next line, instead of being truncated.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | sort-object starttime | format-table -view starttime</dev:code>
  			<dev:remarks>
				<maml:para>This command displays information about the processes on the computer in group based on the start date of the process. It uses the Get-Process cmdlet to get objects representing the processes on the computer. The pipeline operator (|) sends the output of Get-Process to the Sort-Object cmdlet, which sorts it based on the StartTime property. Another pipeline operator sends the sorted results to Format-Table. 

The View parameter is used to select the StartTime view that is defined in the DotNetTypes.format.ps1xml for System.Diagnostics.Process objects, like those returned by Get-Process. This view converts the StartTime of the process to a short date and then groups the processes by start date.

The DotNetTypes.format.ps1xml also contains a Priority view for processes and you can create your own format.ps1xml files with customized views.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-service | format-table -property Name, DependentServices</dev:code>
  			<dev:remarks>
				<maml:para>This command displays all of the services on the computer in a table with two columns, &quot;Name&quot; and &quot;DependentServices&quot;. The command uses the Get-Service cmdlet to get all of the services on the computer. The pipeline operator (|) sends the results to the Format-Table cmdlet, which formats the output in a table. The Property parameter specifies the properties that appear in the table as columns. The name of the Property parameter is optional, so you can omit it (&quot;format-table Name, DependentServices&quot;).

Property and DependentServices are just two of the properties of service objects. To see all of the properties, type &quot;get-service | get-member&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process notepad | format-table ProcessName, @Label=&quot;TotalRunningTime&quot;; Expression={(get-date) - $_.StartTime}}</dev:code>
  			<dev:remarks>
				<maml:para>This command shows how to use a calculated property in a table. The command displays a table with the process name and total running time of all Notepad processes on the local computer. The total running time is calculated by subtracting the start time of each process from the current time.

The command uses the Get-Process cmdlet to get all processes named &quot;Notepad&quot; on the local computer. The pipeline operator (|) sends the results to Format-Table, which displays a table with two columns: ProcessName, a standard property of processes, and &quot;TotalRunningTime,&quot; a calculated property.

The TotalRunningTime property is specified by a hash table with two keys, &quot;Label&quot; and &quot;Expression&quot;. The name of the property is assigned to the &quot;Label&quot; key. The calculation is assigned to the &quot;Expression&quot; key. The expression gets the StartTime property of each process object and subtracts it from the result of a Get-Date command, which gets the current date (and time).</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$processes = get-wmiobject -ComputerName Server01 `
win32_process -filter &quot;name='notepad.exe'&quot; 
$processes | format-table ProcessName, @{ Label = &quot;Total  Running Time&quot;; `
Expression={(get-date) - $_.ConvertToDateTime($_.CreationDate)}}</dev:code>
  			<dev:remarks>
				<maml:para>This command is similar to the previous command, except that it uses the Get-WmiObject cmdlet and the Win32_Processes class to display information about Notepad processes on a remote computer.

This command uses the Get-WmiObject cmdlet to retrieve instances of the Win32_Process WMI class that describes all of the processes on the Server01 computer that are named Notepad.exe. The command stores the process information in the $processes variable. The pipeline operator (|) sends the process information in the $processes variable to the Format-Table cmdlet which displays the ProcessName of each process along with a new calculated property. 

The name of the new calculated property,&quot;Total Running Time,&quot; is assigned to the &quot;Label&quot; key. The script block that is assigned to the Expression key calculates how long the process has been running by subtracting the creation date of the process from the current date. The Get-Date cmdlet gets the current date. The ConvertToDateTime method converts the CreationDate property of the Win32_process object from a WMI CIM_DATETIME object to a .NET DateTime object that can be compared with the output of Get-Date. Then, the converted creation date is subtracted from the current date. The result is the value of &quot;Total Running Time.&quot;

The backtick symbols (`) are line continuation characters.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Format-Custom</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Format-List</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Format-Wide</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-File</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Format-Wide
		</command:name>
		<maml:description>
			<maml:para>Formats objects as a wide table that displays only one property of each object.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>format</command:verb>
		<command:noun>wide</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Format-Wide cmdlet formats objects as a wide table that displays only one property of each object. You can use the Property parameter to determine which property is displayed.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Format-Wide</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>property</maml:name>
				<maml:description><maml:para>Specifies the object properties that appear in the display and the order in which they appear. Wildcards are permitted.  

If you omit this parameter, the properties that appear in the display depend on the object being displayed. The parameter name (&quot;-Property&quot;) is optional. You cannot use the Property and View parameters in the same command.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>autosize</maml:name>
				<maml:description><maml:para>Adjusts the column size and number of columns based on the width of the data. By default, the column size and number are determined by the view. You cannot use the Autosize and Column parameters in the same command.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>column</maml:name>
				<maml:description><maml:para>Specifies the number of columns in the display. You cannot use the Autosize and Column parameters in the same command.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>groupBy</maml:name>
				<maml:description><maml:para>Formats the output in groups based on a shared property or value. Enter an expression or a property of the output.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>view</maml:name>
				<maml:description><maml:para>Specifies the name of an alternate table format or &quot;view.&quot; You cannot use the Property and View parameters in the same command.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects to be formatted. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>expand</maml:name>
				<maml:description><maml:para>Formats the collection object, as well as the objects in the collection. This parameter is designed to format objects that support the ICollection (System.Collections) interface.

Valid values are:
-- Enum (default): Displays the properties of the objects in the collection. 
-- Core: Displays the properties of the collection object. 
-- Both: Displays the properties of the collection object and the properties of objects in the collection.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>displayError</maml:name>
				<maml:description><maml:para>Displays errors at the command line.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>showError</maml:name>
				<maml:description><maml:para>Sends errors through the pipeline.</maml:para></maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>property</maml:name>
			<maml:description>
				<maml:para>Specifies the object properties that appear in the display and the order in which they appear. Wildcards are permitted.  

If you omit this parameter, the properties that appear in the display depend on the object being displayed. The parameter name (&quot;-Property&quot;) is optional. You cannot use the Property and View parameters in the same command.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>autosize</maml:name>
			<maml:description>
				<maml:para>Adjusts the column size and number of columns based on the width of the data. By default, the column size and number are determined by the view. You cannot use the Autosize and Column parameters in the same command.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>column</maml:name>
			<maml:description>
				<maml:para>Specifies the number of columns in the display. You cannot use the Autosize and Column parameters in the same command.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>2</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>groupBy</maml:name>
			<maml:description>
				<maml:para>Formats the output in groups based on a shared property or value. Enter an expression or a property of the output.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>view</maml:name>
			<maml:description>
				<maml:para>Specifies the name of an alternate table format or &quot;view.&quot; You cannot use the Property and View parameters in the same command.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to be formatted. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>expand</maml:name>
			<maml:description>
				<maml:para>Formats the collection object, as well as the objects in the collection. This parameter is designed to format objects that support the ICollection (System.Collections) interface.

Valid values are:
-- Enum (default): Displays the properties of the objects in the collection. 
-- Core: Displays the properties of the collection object. 
-- Both: Displays the properties of the collection object and the properties of objects in the collection.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>displayError</maml:name>
			<maml:description>
				<maml:para>Displays errors at the command line.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>showError</maml:name>
			<maml:description>
				<maml:para>Sends errors through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Formatted objects</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Format-Wide -detailed&quot;. For technical information, type &quot;Get-Help Format-Wide -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Format-Wide by its built-in alias, &quot;fw&quot;. For more information, see About_Alias.

The -Groupby parameter assumes that the objects are sorted. Before using Format-Custom to group the objects, use Sort-Object to sort them.

The -View parameter lets you specify an alternate format for the table. You can use the views defined in the *.format.PS1XML files in the Windows PowerShell directory or you can create your own views in new PS1XML files and use the Update-FormatData cmdlet to include them in Windows PowerShell. 

The alternate view for the View parameter must use table format; if not, the command fails. If the alternate view is a list, use Format-List. If the alternate view is neither list nor table, use Format-Custom.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem | format-wide -column 3</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the names of files in the current directory in three columns across the screen. The Get-Childitem cmdlet gets objects representing each file in the directory. The pipeline operator (|) passes the file objects through the pipeline to Format-Wide, which formats them for output. The Column parameter specifies the number of columns.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem HKCU:\software\microsoft | format-wide -property pschildname -autosize</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the names of registry keys in the HKEY_CURRENT_USER\Software\Microsoft key. The Get-Childitem cmdlet gets objects representing the keys. The path is specified as &quot;HKCU:&quot;, one of the drives exposed by the Windows PowerShell registry provider, followed by the key path. The pipeline operator (|) passes the registry key objects through the pipeline to Format-Wide, which formats them for output. The Property parameter specifies the name property and the Autosize parameter adjusts the columns for readability.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Format-Custom</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Format-Table</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Format-List</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-File</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Alias
		</command:name>
		<maml:description>
			<maml:para>Gets the aliases for the current session.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>alias</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-Alias cmdlet gets the alternate names for cmdlets, functions, and executable files that have been established for the current session. This collection includes built-in aliases, aliases that you have set or imported, and aliases that you have added to your Windows PowerShell profile. If you specify one or more aliases, Get-Alias gets the alias object and displays its properties, including the object that was aliases, such as the full name of a cmdlet. This feature is made available by the Windows PowerShell Alias provider.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Alias</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Specifies the alias to retrieve. By default, Get-Alias retrieves all aliases defined for the current session. The parameter name (&quot;-Name&quot;) is optional.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>scope</maml:name>
				<maml:description><maml:para>Specifies the scope in which this alias is valid. Valid values are &quot;Global&quot;, &quot;Local&quot;, or &quot;Script&quot;, or a number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent). &quot;Local&quot; is the default. For more information, type &quot;get-help about_scope&quot;.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description><maml:para>Omits the specified items. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the alias to retrieve. By default, Get-Alias retrieves all aliases defined for the current session. The parameter name (&quot;-Name&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>*</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>scope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope in which this alias is valid. Valid values are &quot;Global&quot;, &quot;Local&quot;, or &quot;Script&quot;, or a number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent). &quot;Local&quot; is the default. For more information, type &quot;get-help about_scope&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>All locally visible aliases</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>aliasInfoObject</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-Alias -detailed&quot;. For technical information, type &quot;Get-Help Get-Alias -full&quot;.

An alias is an alternate name or nickname for a cmdlet, function, or an executable file. To run the cmdlet, function, or executable, you can use its full name or any alias. For more information, type &quot;get-help about_alias&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Get-Alias by its built-in alias, &quot;gal&quot;.

To create a new alias, use Set-Alias or New-Alias. To delete an alias, use Remove-Item.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-alias</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves all aliases for the current session. The default display includes the CommandType (always &quot;Alias&quot;), the name of the alias (in the Name column), and the cmdlet that is aliased (in the &quot;Definition&quot; column).</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-alias -name g*, s*</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves all aliases that begin with &quot;g&quot; or &quot;s&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-alias | where-object {$_.Definition -match &quot;Get-Childitem&quot;}</dev:code>
  			<dev:remarks>
				<maml:para>In its simplest form, the Get-Alias cmdlet retrieves the cmdlet name when you know the alias. However, you can use this command format to find the aliases when you know the cmdlet name.

The name of the aliased cmdlet is stored in the Definition property of the alias. So, to find the aliases for a given cmdlet, you search for aliases with a Definition property that matches the cmdlet name.

First, the command retrieves all aliases (&quot;get-alias&quot;), and then it pipes the results to the Where-Object cmdlet. The &quot;{$_.definition -match &quot;get-childitem&quot;}&quot; element tells Where-Object to retrieve only the aliases in which the value of the Definition property is &quot;Get-Childitem&quot;.

The result is a list of all of the aliases for the Get-Childitem cmdlet.

Definition is just one property of the AliasInfo objects that Get-Alias retrieves. To find all properties and methods of AliasInfo objects, type &quot;get-alias | get-member&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-alias | where-object {$_.Options -match &quot;ReadOnly&quot;}</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves all aliases in which the value of the Options property is ReadOnly. This command provides a quick way to find the aliases that are built into Windows PowerShell, because they have the ReadOnly option.

First, the command retrieves all aliases (&quot;get-alias&quot;), and then it pipes the results to the Where-Object cmdlet. The &quot;{$_.Options -match &quot;ReadOnly&quot;}&quot; element tells Where-Object to retrieve only the aliases in which a value of the Options property is &quot;ReadOnly&quot;.

Options is just one property of the AliasInfo objects that Get-Alias retrieves. To find all properties and methods of AliasInfo objects, type &quot;get-alias | get-member&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>(get-alias | where-object {$_.Options -match &quot;ReadOnly&quot;}).count</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the number of aliases with the ReadOnly option. It saves you from tedious counting and lets you compare sets of objects with different properties.

This command is identical to the command in the previous example, except that the previous command is now enclosed within parentheses and is followed by the &quot;.count&quot; property.

Windows PowerShell first executes the command within the parentheses. Then, instead of displaying the results, it counts the results and displays the number counted.

To count the number of objects retrieved by any command, just enclose the command in parentheses and append &quot;.count.&quot;</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-alias | out-string -stream | select-string &quot;Get-Command&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command displays aliases that includes the phrase &quot;Get-Childitem&quot;. Unlike the previous command, this one finds the phrase in any property of the alias. It also demonstrates the difference between working with objects and working with strings.

The command uses the Get-Alias cmdlet to get a set of AliasInfo objects; one for each alias in the shell. 

The pipeline operator (|) sends the output to Out-String, which converts the objects to a series of strings. It uses the Stream parameter to send each string individually, instead of a single string. Another pipeline operator sends the strings to Select-String, which selects the strings that contain &quot;Get-Command&quot; anywhere in the string. 

If you omit the Stream parameter, the command displays all of the aliases, because Select-String finds &quot;Get-Command&quot; in the single string that Out-String returns, and the formatter displays the string as a table.

For information about Out-String, type &quot;Get-Help Out-String -detailed&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Set-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Culture
		</command:name>
		<maml:description>
			<maml:para>Gets information about the regional settings on a computer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>culture</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Gets information about the regional settings on a computer. This includes information such as the current language and keyboard layout.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Culture</maml:name>
		</command:syntaxItem>
	</command:syntax>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Globalization.CultureInfo object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-Culture -detailed&quot;. For technical information, type &quot;Get-Help Get-Culture -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-culture</dev:code>
  			<dev:remarks>
				<maml:para>This command displays information about the regional settings on the computer.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-UICulture</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Date
		</command:name>
		<maml:description>
			<maml:para>Gets the current date and time.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>date</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Gets the current date and time.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Date</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>date</maml:name>
				<maml:description>
					<maml:para>Specifies a date and time. By default, Get-Date gets the current system date and time.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>displayHint</maml:name>
				<maml:description>
					<maml:para>Determines which elements of the date and time are displayed. (This does not affect the DateTime object that Get-Date retrieves.)

Valid values are: 

-- date: displays only the date
-- time: displays only the time
-- datetime: displays the date and time</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Date</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Time</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DateTime</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>format</maml:name>
				<maml:description>
					<maml:para>Displays the date and time in the .NET format indicated by the format specifier. &lt;String&gt; represents the format specifier. For a list of available format specifiers, see the System.Globalization.DateTimeFormatInfo Class topic in MSDN.

When you use -format, Windows PowerShell retrieves only the properties of the DateTime object that it needs to display the date in the format that you specify. As a result, some properties and methods of DateTime objects might not be available.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>year</maml:name>
				<maml:description>
					<maml:para>Specifies the year that is displayed. Enter a value from 1 - 9999. This value is displayed instead of the current year. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>month</maml:name>
				<maml:description>
					<maml:para>Specifies the month that is displayed. Enter a value from 1 - 12. This value is displayed instead of the current month. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>day</maml:name>
				<maml:description>
					<maml:para>Specifies the day of the month that is displayed. Enter a value from 1 - 31. This value is displayed instead of the current day. 

If you specify a value that is greater than the number of days in the month, Windows PowerShell adds the number of days to the month and displays the result. For example, &quot;get-date -month 2 -day 31&quot; displays &quot;March 3&quot;, not &quot;February 31&quot;.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>hour</maml:name>
				<maml:description>
					<maml:para>Specifies the hour that is displayed. Enter a value from 1 - 23. This value is displayed instead of the current hour. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>minute</maml:name>
				<maml:description>
					<maml:para>Specifies the minute that is displayed. Enter a value from 1 - 59. This value is displayed instead of the current minute. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>second</maml:name>
				<maml:description>
					<maml:para>Specifies the second that is displayed. Enter a value from 1 - 59. This value is displayed instead of the current second.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Date</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>date</maml:name>
				<maml:description>
					<maml:para>Specifies a date and time. By default, Get-Date gets the current system date and time.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>displayHint</maml:name>
				<maml:description>
					<maml:para>Determines which elements of the date and time are displayed. (This does not affect the DateTime object that Get-Date retrieves.)

Valid values are: 

-- date: displays only the date
-- time: displays only the time
-- datetime: displays the date and time</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Date</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Time</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DateTime</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>uFormat</maml:name>
				<maml:description>
					<maml:para>Displays the date and time in Unix format. For a list of the format specifiers, see Additional Notes.

When you use -uformat, Windows PowerShell retrieves only the properties of the DateTime object that it needs to display the date in the format that you specify. As a result, some properties and methods of DateTime objects might not be available.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>year</maml:name>
				<maml:description>
					<maml:para>Specifies the year that is displayed. Enter a value from 1 - 9999. This value is displayed instead of the current year. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>month</maml:name>
				<maml:description>
					<maml:para>Specifies the month that is displayed. Enter a value from 1 - 12. This value is displayed instead of the current month. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>day</maml:name>
				<maml:description>
					<maml:para>Specifies the day of the month that is displayed. Enter a value from 1 - 31. This value is displayed instead of the current day. 

If you specify a value that is greater than the number of days in the month, Windows PowerShell adds the number of days to the month and displays the result. For example, &quot;get-date -month 2 -day 31&quot; displays &quot;March 3&quot;, not &quot;February 31&quot;.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>hour</maml:name>
				<maml:description>
					<maml:para>Specifies the hour that is displayed. Enter a value from 1 - 23. This value is displayed instead of the current hour. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>minute</maml:name>
				<maml:description>
					<maml:para>Specifies the minute that is displayed. Enter a value from 1 - 59. This value is displayed instead of the current minute. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>second</maml:name>
				<maml:description>
					<maml:para>Specifies the second that is displayed. Enter a value from 1 - 59. This value is displayed instead of the current second.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>date</maml:name>
			<maml:description>
				<maml:para>Specifies a date and time. By default, Get-Date gets the current system date and time.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			<dev:type>
				<maml:name>DateTime</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>displayHint</maml:name>
			<maml:description>
				<maml:para>Determines which elements of the date and time are displayed. (This does not affect the DateTime object that Get-Date retrieves.)

Valid values are: 

-- date: displays only the date
-- time: displays only the time
-- datetime: displays the date and time</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DisplayHintType</command:parameterValue>
			<dev:type>
				<maml:name>DisplayHintType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Date</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Time</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DateTime</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>format</maml:name>
			<maml:description>
				<maml:para>Displays the date and time in the .NET format indicated by the format specifier. &lt;String&gt; represents the format specifier. For a list of available format specifiers, see the System.Globalization.DateTimeFormatInfo Class topic in MSDN.

When you use -format, Windows PowerShell retrieves only the properties of the DateTime object that it needs to display the date in the format that you specify. As a result, some properties and methods of DateTime objects might not be available.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>uFormat</maml:name>
			<maml:description>
				<maml:para>Displays the date and time in Unix format. For a list of the format specifiers, see Additional Notes.

When you use -uformat, Windows PowerShell retrieves only the properties of the DateTime object that it needs to display the date in the format that you specify. As a result, some properties and methods of DateTime objects might not be available.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>year</maml:name>
			<maml:description>
				<maml:para>Specifies the year that is displayed. Enter a value from 1 - 9999. This value is displayed instead of the current year. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>month</maml:name>
			<maml:description>
				<maml:para>Specifies the month that is displayed. Enter a value from 1 - 12. This value is displayed instead of the current month. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>day</maml:name>
			<maml:description>
				<maml:para>Specifies the day of the month that is displayed. Enter a value from 1 - 31. This value is displayed instead of the current day. 

If you specify a value that is greater than the number of days in the month, Windows PowerShell adds the number of days to the month and displays the result. For example, &quot;get-date -month 2 -day 31&quot; displays &quot;March 3&quot;, not &quot;February 31&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>hour</maml:name>
			<maml:description>
				<maml:para>Specifies the hour that is displayed. Enter a value from 1 - 23. This value is displayed instead of the current hour. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>minute</maml:name>
			<maml:description>
				<maml:para>Specifies the minute that is displayed. Enter a value from 1 - 59. This value is displayed instead of the current minute. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>second</maml:name>
			<maml:description>
				<maml:para>Specifies the second that is displayed. Enter a value from 1 - 59. This value is displayed instead of the current second.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						This cmdlet will take parameters of the specified data type. If -To is used or the input is a string, it will be evaluated using the DateTime.Parse() method.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						A DateTime object. If you use the -DisplayHint (format) parameter, 

As an option, a message that contains the DisplayHint may be shown if the format or uformat parameters are used, the output object is a string formatted according to one of those formats.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-Date -detailed&quot;. For technical information, type &quot;Get-Help Get-Date -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

Uformat Values:

The following are the values of the -Uformat parameter. The format for the command is:

get-date -uformat %&lt;value&gt;

For example, 
get-date -format %d

Date-Time:
Date and time - full  
(default) (Friday, June 16, 2006 10:31:27 AM) c     Date and time - abbreviated (Fri Jun 16 10:31:27 2006)

Date:
D    Date in mm/dd/yy format (06/14/06)
x    Date in standard format for locale (09/12/07 for English-US)

Year:
C   Century (20 for 2006)
Y   Year in 4-digit format (2006)
y   Year in 2-digit format (06)
G   Same as 'Y'
g   Same as 'y'

Month: 
b   Month name - abbreviated (Jan)
B   Month name - full (January)
h   Same as 'b'
M   Month number (06)

Week:
W  Week of the year (00-52)
V   Week of the year (01-53)
U   Same as 'W'


Day:
a   Day of the week - abbreviated name (Mon)
A   Day of the week - full name (Monday)
u   Day of the week - number (Monday = 1)
d   Day of the month - 2 digits (05)
e   Day of the month - digit preceded by a space ( 5)
j    Day of the year - (1-366)
w   Same as 'u'

Time:
p   AM or PM
r   Time in 12-hour format (09:15:36 AM)
R   Time in 24-hour format - no seconds (17:45)
T   Time in 24 hour format (17:45:52)
X   Same as 'T'
Z   Time zone offset from UTC (-07)

Hour: 
H   Hour in 24-hour format (17)
I    Hour in 12 hour format (05)
k   Same as 'H'
l    Same as 'I' (Upper-case I = Lower-case L)

Minutes &amp; Seconds:
m   Minutes (35)
S   Seconds (05)
s   Seconds elapsed since January 1, 1970 00:00:00 (1150451174.95705)

Special Characters:
n   newline character (\n)
t   Tab character (\t)
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-date -DisplayHint date</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves a DateTime object, but displays only the date. It uses the -DisplayHint parameter to indicate that only the date is to be displayed. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Tuesday, June 13, 2006</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-date -format g</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves the current date and time, and formats it in short date and short time format. It uses the .NET &quot;g&quot; format specifier (General (short date and short time)) to specify the format.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>6/13/2006 12:43 PM</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-date -uformat &quot;%Y / %m / %d / %A / %Z&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves the current date and time, and formats it as specified by the command. In this case, the format includes the full year (%Y), the two-digit numeric month (%m), the date (%d), the full day of the week (%A), and the offset from UTC (&quot;Zulu&quot;).</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>2006 / 06 / 13 / Tuesday / -07</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>(get-date -year 2000 -month 12 -day 31).dayofyear</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the day of the year for the current date. For example, December 31 is the 365th day of 2006, but it's the 366th day of 2000.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>366</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = get-date
$a.IsDaylightSavingTime()</dev:code>
  			<dev:remarks>
				<maml:para>These commands tell you whether the current date and time are adjusted for daylight savings time in the current locale. 

The first command creates a variable named $a and then assigns the object retrieved by Get-Date to the $a variable. Then it uses the IsDaylightSavingTime method on the object in $a.

To see the properties and methods of the DateTime object, type &quot;get-date get-member&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>True</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = get-date
$a.ToUniversalTime()</dev:code>
  			<dev:remarks>
				<maml:para>These commands convert the current date and time to UTC time.

The first command creates a variable named $a and then assigns the object retrieved by Get-Date to the $a variable. Then it uses the ToUniversalTime method on the object in $a.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Tuesday, June 13, 2006 8:09:19 PM</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = get-wmiobject win32_bios -computer server01

$a | format-list -property Name, @{Label=&quot;BIOS Age&quot;; `
Expression={(get-date) - $_.ConvertToDateTime($_.ReleaseDate)}}</dev:code>
  			<dev:remarks>
				<maml:para>Windows Management Instrumentation (WMI) uses a different date-time object than the .NET date-time object that Get-Date returns. To use date-time information from WMI in a command with date-time information from Get-Date, you have to use the ConvertToDateTime method to convert WMI CIM_DATETIME objects to a .NET DateTime objects.

The commands in this example display the name and age of the BIOS on a remote computer, Server01. The first command uses the Get-WmiObject cmdlet to get an instance of the Win32_BIOS class on Server01 and then stores it in the $a variable.

The second command uses the pipeline operator (|) to send the WMI object stored in $a to the Format-List cmdlet. The -Property parameter of Format-List is used to specify two properties to display in the list, &quot;Name&quot; and &quot;BIOS Age&quot;. The &quot;BIOS Age&quot; property is specified in a hash table. The table includes the Label key, which specifies the name of the property, and the Expression key which contains the expression that calculates the BIOS age. The expression uses the ConvertToDateTime method to convert each instance of ReleaseDate to a .NET DateTime object. Then, the value is subtracted from the value of the Get-Date cmdlet, which, without parameters, gets the current date.

The backtick character (`) is the line continuation character in Windows PowerShell.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Name     : Default System BIOS
BIOS Age : 1345.17:31:07.1091047</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Set-Date</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-TimeSpan</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Host
		</command:name>
		<maml:description>
			<maml:para>Gets a reference to the current console host object. Displays Windows Powershell version and regional information by default.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>host</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Gets a reference to the current console host object. Displays Windows Powershell version and regional information by default. This cmdlet can be used to access objects that enable you to manipulate the console user interface.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Host</maml:name>
		</command:syntaxItem>
	</command:syntax>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						Property data of the PSHost object.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-Host -detailed&quot;. For technical information, type &quot;Get-Help Get-Host -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

The automatic variable $host contains a reference to the current console host object.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-host</dev:code>
  			<dev:remarks>
				<maml:para>This command displays information about the current shell.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$h = get-host
$win = $h.ui.rawui.windowsize
$win.height = 10
$win.width  = 10
$h.ui.rawui.set_windowsize($win)</dev:code>
  			<dev:remarks>
				<maml:para>This command resizes the Windows PowerShell window to 10 pixels by 10 pixels.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Read-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Member
		</command:name>
		<maml:description>
			<maml:para>Gets information about objects or collections of objects.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>member</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Gets information about the members of objects. Get-Member can accept input from the pipeline or as the value of the InputObject parameter. You can use the MemberType parameter to specify the type of members you want information about. 

If you pipeline input to Get-Member, it outputs a MemberDefinition object for each distinct type of input object.  For example, if you pipe the output of Get-ChildItem to Get-Member in a directory that includes at least one subdirectory and one file, it returns two MemberDefinition objects. One includes information about the FileInfo object and the other includes information about the DirectoryInfo object. Get-Member outputs only two MemberDefinition objects, regardless of how many files or subdirectories are in the directory. 

The output of Get-Member is different if you supply input by using the InputObject parameter. In that case, Get-Member returns a single MemberDefinition object that represents either the single input object or the collection class that contains the set of input objects.

To retrieve information about static members, you must specify the Static parameter.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Member</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Specifies the member names to retrieve information about.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects to retrieve information about. Using this parameter to provide input to Get-Member results in different output than pipelining the same input. When you pipeline input to Get-Member, if the input is a container, the cmdlet returns information about each unique type of element in the container. If you provide the same input by using the InputObject parameter, the cmdlet returns information about the container object itself. If you want to use pipelining to retrieve information about a container, you must proceed the pipelined input by a comma (,). For example, if you information about processes stored in a variable named $process, you would type ,$process | get-member to retrieve information about the container.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>memberType</maml:name>
				<maml:description><maml:para>Indicates type of members to retrieve information about. Valid member types are: AliasProperty, CodeProperty, Property, NoteProperty, ScriptProperty, Properties, PropertySet, Method, CodeMethod, ScriptMethod, Methods, ParameterizedProperty, MemberSet, and All.</maml:para></maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >AliasProperty</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >CodeProperty</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Property</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >NoteProperty</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ScriptProperty</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Properties</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >PropertySet</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Method</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >CodeMethod</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ScriptMethod</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Methods</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ParameterizedProperty</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >MemberSet</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>static</maml:name>
				<maml:description><maml:para>Specifies that static properties and methods should be retrieved.</maml:para></maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the member names to retrieve information about.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>*</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to retrieve information about. Using this parameter to provide input to Get-Member results in different output than pipelining the same input. When you pipeline input to Get-Member, if the input is a container, the cmdlet returns information about each unique type of element in the container. If you provide the same input by using the InputObject parameter, the cmdlet returns information about the container object itself. If you want to use pipelining to retrieve information about a container, you must proceed the pipelined input by a comma (,). For example, if you information about processes stored in a variable named $process, you would type ,$process | get-member to retrieve information about the container.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>memberType</maml:name>
			<maml:description>
				<maml:para>Indicates type of members to retrieve information about. Valid member types are: AliasProperty, CodeProperty, Property, NoteProperty, ScriptProperty, Properties, PropertySet, Method, CodeMethod, ScriptMethod, Methods, ParameterizedProperty, MemberSet, and All.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="true">PSMemberTypes</command:parameterValue>
			<dev:type>
				<maml:name>PSMemberTypes</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>All</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>AliasProperty</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>CodeProperty</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Property</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>NoteProperty</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ScriptProperty</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Properties</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>PropertySet</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Method</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>CodeMethod</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ScriptMethod</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Methods</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ParameterizedProperty</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>MemberSet</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>All</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>static</maml:name>
			<maml:description>
				<maml:para>Specifies that static properties and methods should be retrieved.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Any object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Any object may be input, or designated with the InputObject parameter.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						Each type of member will be shown as a member of the appropriate class.  Each object will also have a hidden note with TypeName as a key and the value of the type that the member is from, in order to distinguish which type each member was found in.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-Member -detailed&quot;. For technical information, type &quot;Get-Help Get-Member -full&quot;. When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | get-member -MemberType property</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the properties of a .Net Framework Class Library System.Diagnostics.Process object (the type of objects returned by the get-process Cmdlet).</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$alias = get-alias
$alias | get-member
get-member -inputobject $alias</dev:code>
  			<dev:remarks>
				<maml:para>This command displays information about the AliasInfo object that is returned by the Get-Alias cmdlet. It stores the alias information in the $alias variable. The $alias variable is piped to the Get-Member cmdlet to display information about the members of the AliasInfo objects.  It then uses the InputObject parameter, supplying the $alias parameter as the value,  to demonstrate that when that method of input is used, information about the container object, a System.Object array, is returned.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | get-member | get-member</dev:code>
  			<dev:remarks>
				<maml:para>This command displays information about the MemberDefinition object returned by Get-Member. The Get-Process cmdlet is used to retrieve a list of processes, which provides input to the first call to Get-Member. The result of that call, a MemberDefinition object, is piped to Get-Member. The result is that information about the members of the MemberDefinition object is displayed.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Add-Member</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Help</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Command</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSDrive</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-TraceSource
		</command:name>
		<maml:description>
			<maml:para>Gets the Windows PowerShell components that are instrumented for tracing.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>tracesource</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-TraceSource cmdlet gets the trace sources for Windows PowerShell components that are currently in use. You can use the data to determine which Windows PowerShell components you can trace. When tracing, the component generates detailed messages about each step in its internal processing. Developers use the trace data to monitor data flow, program execution, and errors. The tracing cmdlets were designed for Windows PowerShell developers, but are available to all users.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-TraceSource</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Gets only the specified trace sources. Wildcards are permitted. The parameter name (&quot;-Name&quot;) is optional.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Gets only the specified trace sources. Wildcards are permitted. The parameter name (&quot;-Name&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>*</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSTraceSource</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.PSTraceSource</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-TraceSource -detailed&quot;. For technical information, type &quot;Get-Help Get-TraceSource -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-traceSource  *provider*</dev:code>
  			<dev:remarks>
				<maml:para>This command gets all of the trace sources that have names that include &quot;provider&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-tracesource</dev:code>
  			<dev:remarks>
				<maml:para>This command gets all of the Windows PowerShell components that can be traced. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Set-TraceSource</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Trace-Command</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-UICulture
		</command:name>
		<maml:description>
			<maml:para>gets information about the current user interface culture for Windows PowerShell.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>uiculture</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-UICulture cmdlet gets information about the current user interface culture for Windows PowerShell and creates a CultureInfo object to store it. The UI culture includes settings for culture-specific information, such as language, sublanguage, time and date format, and cultural conventions. The UI culture differs from a culture in that the properties of a UI culture can change with each application.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-UICulture</maml:name>
		</command:syntaxItem>
	</command:syntax>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Globalization.CultureInfo object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-UICulture -detailed&quot;. For technical information, type &quot;Get-Help Get-UICulture -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

Views:
Default:
table view
In types.xml, the DefaultPropertySet for System.Globalization.CultureInfo should include the LCID, Name, and DisplayName properties.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-uiculture</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the current UI culture information.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-uiculture | format-list *</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the values of all of the properties of the current UI culture in a list.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>(get-uiculture).calendar</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the current values for the Calendar property of the current UI culture. Calendar is just one property of UI culture. To see all of the properties, type &quot;Get-UICulture | Get-Member&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>(get-uiculture).datetimeformat.shortdatepattern</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the short date pattern for the current UI culture. To see all of the subproperties of the DateTimeFormat property of the UI culture, type &quot;(get-uiculture).datetimeformat | gm&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Culture</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Unique
		</command:name>
		<maml:description>
			<maml:para>Returns the unique items from a sorted list.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>unique</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Get-Unique cmdlet compares each item in a sorted list to the next item, eliminates duplicates, and returns only one instance of each item. The list must be sorted for the cmdlet to work properly.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Unique</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Accepts input for Get-Unique. Enter a variable that contains the objects or type a command or expression that gets the objects.

Get-Unique treats the input submitted by using InputObject as a collection; it doesn't enumerate individual items in the collection. Because the collection is a single item, input submitted by using InputObject is always returned unchanged.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>asString</maml:name>
				<maml:description>
					<maml:para>Treats the data as a string. Without this parameter, data is treated as an object, so when you submit a collection of objects of the same type to Get-Unique, such as a collection of files, it returns just one (the first). You can use this parameter to find the unique values of object properties, such as the file names.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Get-Unique</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Accepts input for Get-Unique. Enter a variable that contains the objects or type a command or expression that gets the objects.

Get-Unique treats the input submitted by using InputObject as a collection; it doesn't enumerate individual items in the collection. Because the collection is a single item, input submitted by using InputObject is always returned unchanged.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>onType</maml:name>
				<maml:description>
					<maml:para>Returns only one object of each type.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Accepts input for Get-Unique. Enter a variable that contains the objects or type a command or expression that gets the objects.

Get-Unique treats the input submitted by using InputObject as a collection; it doesn't enumerate individual items in the collection. Because the collection is a single item, input submitted by using InputObject is always returned unchanged.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>asString</maml:name>
			<maml:description>
				<maml:para>Treats the data as a string. Without this parameter, data is treated as an object, so when you submit a collection of objects of the same type to Get-Unique, such as a collection of files, it returns just one (the first). You can use this parameter to find the unique values of object properties, such as the file names.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>onType</maml:name>
			<maml:description>
				<maml:para>Returns only one object of each type.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>any</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>any</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Get-Unique -detailed&quot;. For technical information, type &quot;Get-Help Get-Unique -full&quot;.

To sort a list, use Sort-Object. You can also use the Unique parameter of Sort-Object to find the unique items in a list.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Get-Unique by its built-in alias, &quot;gu&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = $(foreach ($line in get-content C:\Test1\File1.txt) {$line.tolower().split(&quot; &quot;)}) | sort | get-unique

$a.count</dev:code>
  			<dev:remarks>
				<maml:para>These commands find the number of unique words in a text file. 

The first command gets the content of the File.txt file. It converts each line of text to lower case and then splits each word onto a separate line at the space (&quot; &quot;). Then, it sorts the resulting list alphabetically (the default), and uses the Get-Unique cmdlet to eliminate any duplicate words. The results are stored in the $a variable.

The second command uses the Count property of the collection of strings in $a to determine how many items are in $a.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>     </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>1,1,1,1,12,23,4,5,4643,5,3,3,3,3,3,3,3 | sort-object | Get-Unique</dev:code>
  			<dev:remarks>
				<maml:para>This command finds the unique members of the set of integers. The first command takes an array of integers typed at the command line, pipes them to the Sort-Object cmdlet to be sorted, and then pipes them to Get-Unique, which eliminates duplicate entries.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem | sort-object {$_.GetType()} |  unique -OnType</dev:code>
  			<dev:remarks>
				<maml:para>This command uses the Get-ChildItem cmdlet to retrieve the contents of the local directory, which includes files and directories. The pipeline operator (|) sends the results to the Sort-Object cmdlet. The &quot;$_.GetType()&quot; statement applies the GetType method to each file or directory. Then, Sort-Object sorts the items by type. Another pipeline sends the results to Get-Unique. The OnType parameter directs Get-Unique to return only one object of each type.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | sort-object | select processname | get-unique -asstring</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the names of processes running on the computer with duplicates eliminated. 

The Get-Process command gets all of the processes on the computer. The pipeline operator passes the result to sort-object, which, by default, sorts the processes alphabetically by ProcessName. The results are piped to the Select-Object cmdlet, which selects only the values of the ProcessName property of each object. The results are then piped to Get-Unique to eliminate duplicates. 

The AsString parameter tells Get-Unique to treat the ProcessName values as strings. Without this parameter, Get-Unique treats the ProcessName values as objects, and returns only one instance of the object, that is, the first process name in the list.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Sort-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Get-Variable
		</command:name>
		<maml:description>
			<maml:para>Gets the variables in the current console.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>get</command:verb>
		<command:noun>variable</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Gets the Windows PowerShell variables in the current console. You can retrieve just the values of the variables by specifying the ValueOnly parameter and you can filter the variables returned by name.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Get-Variable</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Specifies the name of the variable.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description><maml:para>Specifies only those items upon which the cmdlet will act, excluding all others. Wildcards are permitted.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description><maml:para>Omits the specified items. Wildcards are permitted.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>valueOnly</maml:name>
				<maml:description><maml:para>Gets only the value of the variable.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>scope</maml:name>
				<maml:description><maml:para>Limits the variables retrieved to the specified scope. The value can be a named scope: &quot;global&quot;, &quot;local&quot;, or &quot;script&quot;, &quot;private&quot; or it can be a number relative to the current scope (0 through the number of scopes where 0 is the current scope and increasing the number by 1 moves to the parent scope of the current scope).</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the variable.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>* (gets all variables in Variable:/)</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>valueOnly</maml:name>
			<maml:description>
				<maml:para>Gets only the value of the variable.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>scope</maml:name>
			<maml:description>
				<maml:para>Limits the variables retrieved to the specified scope. The value can be a named scope: &quot;global&quot;, &quot;local&quot;, or &quot;script&quot;, &quot;private&quot; or it can be a number relative to the current scope (0 through the number of scopes where 0 is the current scope and increasing the number by 1 moves to the parent scope of the current scope).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Local</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          This cmdlet does not manage environment variables. To manage environment variables, you can use the environment variable provider.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-variable m*</dev:code>
  			<dev:remarks>
				<maml:para>This command displays variables with names that begin with the letter 'm'. The value of the variables is also displayed.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-variable m* -valueonly</dev:code>
  			<dev:remarks>
				<maml:para>This command displays only the values of the variables with names that begin with the letter 'm'.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-variable -include M*,P* | sort-object name</dev:code>
  			<dev:remarks>
				<maml:para>This command gets information about the variables that begin with either the letter 'M' or the letter 'P'. The results are piped to the Sort-Object cmdlet, sorted by name and displayed.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Set-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Group-Object
		</command:name>
		<maml:description>
			<maml:para>Groups objects that contain the same value for specified properties.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>group</command:verb>
		<command:noun>object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Groups objects that contain the same value for specified properties. By default, the cmdlet creates a GroupInfo object for each set of input objects that share the same value for the properties specified in the Property parameter. The GroupInfo object has a group property. That property is a collection of all the input objects that are members of the group represented by the GroupInfo object. The number of members of a group is stored in the Count property of the corresponding GroupInfo object and the group has a Name that is derived from the value of their common properties. 
To omit the input objects from the results, specify the NoElement parameter. The results will be an array of GroupInfoNoElement objects that each have an empty Group property.
By default, comparisons made to establish groups are not case sensitive. You can change this by specifying the CaseSensitive parameter.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Group-Object</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>property</maml:name>
				<maml:description><maml:para>Specifies the property or list of properties upon which to group the input objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>caseSensitive</maml:name>
				<maml:description><maml:para>Specifies that case should be taken into account when determining whether property values are equal for the purpose of grouping.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>noElement</maml:name>
				<maml:description><maml:para>Determines whether the output objects contain the elements of each group.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>culture</maml:name>
				<maml:description><maml:para>Specifies the culture to use when performing string comparisons.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects to group. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>property</maml:name>
			<maml:description>
				<maml:para>Specifies the property or list of properties upon which to group the input objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>caseSensitive</maml:name>
			<maml:description>
				<maml:para>Specifies that case should be taken into account when determining whether property values are equal for the purpose of grouping.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>noElement</maml:name>
			<maml:description>
				<maml:para>Determines whether the output objects contain the elements of each group.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>culture</maml:name>
			<maml:description>
				<maml:para>Specifies the culture to use when performing string comparisons.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Current Culture</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to group. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object stream</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Objects</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Group-Object does not require that the objects being grouped are of the same type. The cmdlet uses the following rules when grouping objects of different types.

Same Property Names and Types: If the objects have the specified properties and they are of the same type in all the objects, then they are grouped using the same rules as objects of the same type.

Same Property Names, Different Types: If a property with the specified name exists in all objects but is a different type in different objects, the type of the first occurrence of the property in a group of objects is taken as the base type for that property. When there is an occurrence of a different type, the value of the type is converted to the base type for each group. If the type conversion fails, then the object does not match that group. 

Missing Properties: Objects that do not have a specified property are considered ungroupable. Ungroupable objects appear in the final GroupInfo object output in a group named AutomationNull.Value.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem *.doc | group-object -property length</dev:code>
  			<dev:remarks>
				<maml:para>This command displays a list of all the files in the current location that have a .doc extension and groups them by size.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem | sort-object -property extension | group-object -property extension</dev:code>
  			<dev:remarks>
				<maml:para>This command displays a list of all the files in the current location, sorted and then grouped by file extension. Note the sort operation was performed before the group operation. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>1..35 | group-object -property {$_ % 2},{$_ % 3}</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the integers from 1 to 35, grouped by the remainder left when they are divided by 2 or 3. It demonstrates that the cmdlet can accept multiple script blocks as input.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$events = get-eventlog -logname system -newest 1000
$events | group-object -property eventID</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the most recent 1000 entries from the system event log, grouped by Event ID. It uses the Get-EventLog cmdlet to retrieve and store the events in the $events variable. In the second line, it pipelines the stored events to the Group-Object cmdlet, using the Property parameter to specify that the events should be grouped according to the value of their eventID properties. In the output, the Count column represents the number of entries in each group, the Name column represents the EventID values that each define a group and the Group column represents the property of the output object that contains an array of the objects in each group.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Count Name                      Group
----- ----                      -----
247   7036                      {FABRIKAM, FABRIKAM, FABRIKAM,..
361   30                        {FABRIKAM, FABRIKAM, FABRIKAM,.. </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | group-object -property company -noelement</dev:code>
  			<dev:remarks>
				<maml:para>This command displays a list of all the processes on the computer, grouped by the name of the company whose application is associated with the process. Because the NoElement parameter is used, the object returned by the command does not include the process objects that were grouped.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 6 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-eventlog -logname system -newest 1000 |
group-object -property {$_.TimeWritten - $_.TimeGenerated}</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the most recent 1000 entries from the system event log, grouped according the time between when they were generated and when they were written to the log. The command uses the Get-EventLog cmdlet to retrieve the entries and pipelines them to the Group-Object cmdlet. The value of the Property parameter is specified as a script block (an expression in braces). The result of evaluating the script block is the time between when the log entry was generated and when it was written to the log. That value is used to group the 1000 most recent events. This command demonstrates that you can provide the value of the Property parameter as a script block.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 7 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem | group-object extension -noelement</dev:code>
  			<dev:remarks>
				<maml:para>This command determines which file extensions we have in the current directory without retrieving the files belonging to each group.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 8 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$events = get-eventlog -logname application -newest 500 
$groups = group-object -inputobject $events -property entrytype,source
$groups | get-member
$groups | select-object -expandproperty group</dev:code>
  			<dev:remarks>
				<maml:para>This command creates GroupInfo objects that represent the grouping of events from the application event log. The Get-EventLog cmdlet is used to retrieve the 500 most recent events from the Application event log and store them in the $events variable. The $events variable is passed as input to the Group-Object cmdlet and the events are grouped according to entry type and event source and the resulting groups are stored in the $groups variable. The $groups variable is piped to the Get-Member cmdlet to display information about it. In the last line of the command, the $groups variable is piped to the Select-Object cmdlet. The ExpandProperty parameter is used to display the event information stored in the group property of the GroupInfo objects stored in the $groups variable.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Sort-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Measure-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ForEach-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Where-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Compare-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Tee-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Import-Alias
		</command:name>
		<maml:description>
			<maml:para>Imports an alias list from a file.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>import</command:verb>
		<command:noun>alias</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Imports an alias list from a file.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Import-Alias</maml:name>
			<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description><maml:para>Specifies the path to a file that includes exported alias information. Wildcards are allowed but they must resolve to a single name.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description><maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>scope</maml:name>
				<maml:description><maml:para>Specifies the scope to apply to the imported aliases. This can be a named scope: &quot;global&quot;, &quot;local&quot;, or &quot;script&quot;, or it can be a number relative to the current scope (0 through the number of scopes where 0 is the current scope and 1 is its parent).</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Allows cmdlet to import an alias that is already defined and is read only. You can use the following command to display information about the currently-defined aliases: 

get-alias | select-object name,Options
The value of the Options property will include 'ReadOnly' if the corresponding alias is read only.</maml:para></maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to a file that includes exported alias information. Wildcards are allowed but they must resolve to a single name.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>scope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope to apply to the imported aliases. This can be a named scope: &quot;global&quot;, &quot;local&quot;, or &quot;script&quot;, or it can be a number relative to the current scope (0 through the number of scopes where 0 is the current scope and 1 is its parent).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>local</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Allows cmdlet to import an alias that is already defined and is read only. You can use the following command to display information about the currently-defined aliases: 

get-alias | select-object name,Options
The value of the Options property will include 'ReadOnly' if the corresponding alias is read only.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.AliasInfo</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						An alias object that can supply a name or names if they are not supplied by the path.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>System.Management.Automation.AliasInfo</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified. Then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>import-alias test.txt</dev:code>
  			<dev:remarks>
				<maml:para>This command imports alias info from a file named test.txt.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Export-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Import-Clixml
		</command:name>
		<maml:description>
			<maml:para>Imports a CLIXML file and creates corresponding objects within Windows PowerShell.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>import</command:verb>
		<command:noun>clixml</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Imports a CLIXML file and creates corresponding objects within Windows PowerShell.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Import-Clixml</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description><maml:para>Specifies the location of the XML files to be converted into PSObjects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the location of the XML files to be converted into PSObjects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>PSObjects</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The output is objects that have been deserialized from the stored XML files.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Import-Clixml -detailed&quot;. For technical information, type &quot;Get-Help Import-Clixml -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | export-clixml pi.xml
$processes = import-clixml pi.xml</dev:code>
  			<dev:remarks>
				<maml:para>This command uses the Export-Clixml cmdlet to save a serialized copy of the process information returned by Get-Process. It then uses Import-Clixml to retrieve the contents of the serialized file and recreate an object that is stored in the $processes variable.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Export-Clixml</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Import-Csv
		</command:name>
		<maml:description>
			<maml:para>Imports comma-separated value (CSV) files in the format produced by the Export-CSV cmdlet and returns objects that correspond to the objects represented in that CSV file.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>import</command:verb>
		<command:noun>csv</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Imports comma-separated value (CSV) files in the format produced by the Export-CSV cmdlet and returns objects that correspond to the objects represented in that CSV file.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Import-Csv</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>path</maml:name>
				<maml:description><maml:para>Specifies the path to the CSV file to import.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the CSV file to import.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>#TYPE CSV</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						The input files contain data generated by export-csv.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Objects</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The result of this Cmdlet is objects and their associated properties.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | export-csv processes.csv
$processes = import-CSV processes.csv
$processes </dev:code>
  			<dev:remarks>
				<maml:para>This command exports information about processes to a CSV file and then restores that process information. In the first line of the command, the output of the Get-Process cmdlet is piped to the Export-CSV cmdlet which saves a representation of the output objects to the file named processes.csv. In the second line, the Import-CSV cmdlet is used to retrieve the saved object representation from the processes.csv file, create corresponding objects and store them in the $processes variable. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Export-Csv</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Invoke-Expression
		</command:name>
		<maml:description>
			<maml:para>Runs a Windows PowerShell expression that is provided in the form of a string.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>invoke</command:verb>
		<command:noun>expression</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Runs a Windows PowerShell expression that is provided in the form of a string. Invoke-Expression outputs the result of the command specified as the value of the Command parameter. However, if the result is an empty array, it outputs $null and, if the result is a single-element array, it outputs that single element.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Invoke-Expression</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>command</maml:name>
				<maml:description><maml:para>Specifies a literal string or a variable that contains a string that is a valid Windows PowerShell expression.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>command</maml:name>
			<maml:description>
				<maml:para>Specifies a literal string or a variable that contains a string that is a valid Windows PowerShell expression.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>The output of the cmdlet is usually of the same type as the result of executing the expression represented by the string specified as the value of the Command parameter. If, however, the output of the expression is an empty array or a single-element array, then the output from the cmdlet is $null or the single element, respectively.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          To provide a script block as the value of the Command parameter, you must include it within quotation marks. Otherwise, the shell will recognize the script block and evaluate it rather than pass it in a literal form as the value of the Command parameter. For more information about script blocks, type get-help about_script_block.

Using the invoke-expression cmdlet, without taking the proper precautions, could compromise the security of your computing environment. This cmdlet makes it easy to write scripts that accept input that is then used to construct and run Windows PowerShell commands. The author of such a script does not have complete control over the commands the script can run. Some of the input provided to the script could represent malicious commands. Those commands will be run (under the current security context of the script) unless the script author has been careful to validate all input before using it. In general, it is best to identify and allow a set of known good input and reject all other input, rather than allow all input except that which appears to be malicious.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$sorted_processes = &quot;get-process | sort-object Name&quot; 
invoke-expression $sorted_processes</dev:code>
  			<dev:remarks>
				<maml:para>This command creates a variable named $sorted_processes and stores the text of a command in that variable. The invoke-expression cmdlet is then used to run the command stored in the sorted_processes variable.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$cmdlet_name = &quot;get-eventlog&quot;
$example_number = 1
$example_code = (get-help $cmdlet_name).examples.example[($example_number-1)].code
invoke-expression $example_code</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves and runs an example command from cmdlet help. It runs the first example for the Get-EventLog cmdlet. To run an example for a different cmdlet, change the value of the $cmdlet_name variable to the name of the cmdlet and change the $example_number variable to the example number you want to run. The command will fail if the example number you enter is not valid.

The first line of the command stores the name of a cmdlet, get-eventlog, in the $cmdlet_name variable. The second line of the command stores the example number in the $example_number variable. In the third line of the command, properties of the object returned by the Get-Help cmdlet are accessed to retrieve the example code and store it in the $example_code variable. In the last line of the command, the example code is run using Invoke-Expression.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Trace-Command</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-Item</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-History</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Measure-Command
		</command:name>
		<maml:description>
			<maml:para>Measures the time it takes to run script blocks and cmdlets.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>measure</command:verb>
		<command:noun>command</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Measure-Command cmdlet runs a script block or cmdlet internally, times the execution of the operation, and returns the execution time.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Measure-Command</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>expression</maml:name>
				<maml:description><maml:para>Specifies the expression that is being timed. Enclose the expression in curly braces ({}). The parameter name (&quot;Expression&quot;) is optional.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies an object that represents an expression. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>expression</maml:name>
			<maml:description>
				<maml:para>Specifies the expression that is being timed. Enclose the expression in curly braces ({}). The parameter name (&quot;Expression&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			<dev:type>
				<maml:name>scriptblock</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies an object that represents an expression. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>any object in pipeline</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Any object sent to the script block or cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>time object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The time it takes to execute the script or cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Measure-Command -detailed&quot;. For technical information, type &quot;Get-Help Measure-Command -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Measure-Command { get-eventlog }</dev:code>
  			<dev:remarks>
				<maml:para>This command measures the time it takes to run a &quot;get-eventlog&quot; command.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>measure-command {get-childitem c:\windows -include *.txt -recurse}

C:\PS&gt;measure-command {get-childitem c:\windows -filter &quot;*.txt&quot; -recurse}</dev:code>
  			<dev:remarks>
				<maml:para>These commands show the value of using a provider-specific filter in Windows PowerShell commands. The first command measures the time it takes to process a recursive Get-Childitem command that uses the Include parameter. The second command measures the time it takes to process a recursive Get-Childitem command that uses the provider-specific Filter parameter. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>C:\PS&gt;measure-command {get-childitem c:\windows -include *.txt -recurse}

Days              : 0
Hours             : 0
Minutes           : 0
Seconds           : 8
Milliseconds      : 618
Ticks             : 86182763
TotalDays         : 9.9748568287037E-05
TotalHours        : 0.00239396563888889
TotalMinutes      : 0.143637938333333
TotalSeconds      : 8.6182763
TotalMilliseconds : 8618.2763

C:\PS&gt;measure-command {get-childitem c:\windows -filter &quot;*.txt&quot; -recurse}

Days              : 0
Hours             : 0
Minutes           : 0
Seconds           : 1
Milliseconds      : 140
Ticks             : 11409189
TotalDays         : 1.32050798611111E-05
TotalHours        : 0.000316921916666667
TotalMinutes      : 0.019015315
TotalSeconds      : 1.1409189
TotalMilliseconds : 1140.9189</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Trace-Command</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Invoke-Expression</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Measure-Object
		</command:name>
		<maml:description>
			<maml:para>Measures characteristics of objects and their properties.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>measure</command:verb>
		<command:noun>object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Measures characteristics of objects and their properties. The Measure-Object cmdlet supports measurement of any type of object and specialized measurements of objects with textual properties. There are three distinct actions that the cmdlet can perform. The type of measurement action that takes place depends upon the parameters specified.

If you do not specify any parameters, the cmdlet returns a count of the number of input objects.

If the Property parameter is specified along with either the Sum or Average parameter, the sum or average of the properties is calculated.

Textual properties are measured when one or more of the  Line, Word, or Character, parameters is specified.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Measure-Object</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>property</maml:name>
				<maml:description>
					<maml:para>Specifies the properties to measure.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Specifies the objects to be measured. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>average</maml:name>
				<maml:description>
					<maml:para>Averages the values in the designated property.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>sum</maml:name>
				<maml:description>
					<maml:para>Sums the values of the properties.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>minimum</maml:name>
				<maml:description>
					<maml:para>Determines the minimum value of the properties.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>maximum</maml:name>
				<maml:description>
					<maml:para>Determines the maximum value of the properties.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Measure-Object</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>property</maml:name>
				<maml:description>
					<maml:para>Specifies the properties to measure.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Specifies the objects to be measured. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>line</maml:name>
				<maml:description>
					<maml:para>Counts the number of lines in the input object.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>word</maml:name>
				<maml:description>
					<maml:para>Counts the number of words in the input object.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>character</maml:name>
				<maml:description>
					<maml:para>Counts the number of characters in the input object.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>ignoreWhiteSpace</maml:name>
				<maml:description>
					<maml:para>Ignores white space in word counts and character counts. By default, white space is not ignored.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to be measured. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
			<maml:name>property</maml:name>
			<maml:description>
				<maml:para>Specifies the properties to measure.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - When this parameter is used the property(s) must be specified </dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>average</maml:name>
			<maml:description>
				<maml:para>Averages the values in the designated property.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>line</maml:name>
			<maml:description>
				<maml:para>Counts the number of lines in the input object.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>sum</maml:name>
			<maml:description>
				<maml:para>Sums the values of the properties.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>minimum</maml:name>
			<maml:description>
				<maml:para>Determines the minimum value of the properties.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>maximum</maml:name>
			<maml:description>
				<maml:para>Determines the maximum value of the properties.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>word</maml:name>
			<maml:description>
				<maml:para>Counts the number of words in the input object.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>character</maml:name>
			<maml:description>
				<maml:para>Counts the number of characters in the input object.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>ignoreWhiteSpace</maml:name>
			<maml:description>
				<maml:para>Ignores white space in word counts and character counts. By default, white space is not ignored.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Any Pipeline object(s).</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>A GenericMeasureInfo or TextMeasureInfoObject.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem | measure-object</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the number of files and folders in the current directory. (requires that the current location is a drive mapped to the FileSystem provider)</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem | measure-object -property length -minimum -maximum -average</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the minimum, maximum and sum of the sizes of all files in the current directory as well as the average size of a file in the directory.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-content C:\test.txt | measure-object -character -line -word</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the number of characters, words and lines in the text.txt file.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Compare-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ForEach-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Group-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Sort-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Tee-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Where-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-Alias
		</command:name>
		<maml:description>
			<maml:para>Creates a new alias.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>new</command:verb>
		<command:noun>alias</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Creates a new alias. This alias name will be added to the list for the session. Aliases created by using New-Alias are not saved after you exit the session or close Windows PowerShell. You can use the Export-Alias cmdlet to save your alias information to a file. You can later use Import-Alias to retrieve that saved alias information.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-Alias</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Specifies the new alias. You can use any alphanumeric characters in an alias, but the first character cannot be a number.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>value</maml:name>
				<maml:description><maml:para>Specifies the name of the cmdlet or command element that is being aliased.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>description</maml:name>
				<maml:description><maml:para>Specifies a description of the alias. You can type any string. If the description includes spaces, enclose it quotation marks. </maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>option</maml:name>
				<maml:description><maml:para>Sets one or more optional properties of the alias. Valid values are: * None: Sets no options. (default) * ReadOnly: The alias cannot be changed unless you use the Force parameter. * Constant: The alias cannot be changed, even by using the Force parameter. * Private: The alias is available only within the scope specified by the Scope parameter. It is invisible in all other scopes.</maml:para></maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >None</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ReadOnly</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Constant</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Private</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >AllScope</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description><maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>scope</maml:name>
				<maml:description><maml:para>The scope from which the aliases should be exported. This can be a named scope: &quot;global&quot;, &quot;local&quot;, or &quot;script&quot;, or it can be a number relative to the current scope (from 0 through the number of scopes where 0 is the current scope and 1 is its parent).</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>If set, act like set-alias if the alias named already exists.</maml:para></maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the new alias. You can use any alphanumeric characters in an alias, but the first character cannot be a number.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>value</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the cmdlet or command element that is being aliased.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the alias. You can type any string. If the description includes spaces, enclose it quotation marks. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>option</maml:name>
			<maml:description>
				<maml:para>Sets one or more optional properties of the alias. Valid values are: * None: Sets no options. (default) * ReadOnly: The alias cannot be changed unless you use the Force parameter. * Constant: The alias cannot be changed, even by using the Force parameter. * Private: The alias is available only within the scope specified by the Scope parameter. It is invisible in all other scopes.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ScopedItemOptions</command:parameterValue>
			<dev:type>
				<maml:name>ScopedItemOptions</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>None</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ReadOnly</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Constant</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Private</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>AllScope</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>scope</maml:name>
			<maml:description>
				<maml:para>The scope from which the aliases should be exported. This can be a named scope: &quot;global&quot;, &quot;local&quot;, or &quot;script&quot;, or it can be a number relative to the current scope (from 0 through the number of scopes where 0 is the current scope and 1 is its parent).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>local</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>If set, act like set-alias if the alias named already exists.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects piped into this cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless Passthru is specified. Then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          To create a new alias, use Set-Alias or New-Alias. To change an alias, use Set-Alias. To delete an alias, use Remove-Item.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>new-alias list get-childitem</dev:code>
  			<dev:remarks>
				<maml:para>This command creates an alias named 'list' to represent the Get-ChildItem cmdlet.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>new-alias -name w -value get-wmiobject -description &quot;quick wmi alias&quot; -option ReadOnly
get-alias -name w | format-list *</dev:code>
  			<dev:remarks>
				<maml:para>This command creates an alias named 'w' to represent the Get-WMIObject cmdlet. It creates a description, &quot;quick wmi alias&quot;, for the alias and makes it read only. The last line of the command uses Get-Alias to get the new alias and pipes it to Format-List to display all of the information about it.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Set-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-Object
		</command:name>
		<maml:description>
			<maml:para>Creates an instance of a .Net or COM object.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>new</command:verb>
		<command:noun>object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Creates an instance of a .Net or COM object. You specify either the type of a .Net class or a Programmatic Identifier (ProgID) of a COM object. By default, you type the fully-qualified name of a .Net class and the cmdlet returns a reference to an instance of that class. To create an instance of a COM object, use the ComObject parameter and specify the ProgID of the object as its value.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-Object</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>typeName</maml:name>
				<maml:description>
					<maml:para>Specifies the fully-qualified name of the .Net class. You cannot specify both the TypeName parameter and the ComObject parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
				<maml:name>argumentList</maml:name>
				<maml:description>
					<maml:para>Specifies a list of arguments to pass to the constructor of the .Net class. Separate elements in the list by using commas (,).</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>New-Object</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>comObject</maml:name>
				<maml:description>
					<maml:para>Programmatic Identifier (ProgID) of the COM object.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>strict</maml:name>
				<maml:description>
					<maml:para>Specifies that an error should be raised if the COM object that you attempt to create uses an interop assembly. This enables you to distinguish actual COM objects from .Net objects with COM-callable wrappers.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>typeName</maml:name>
			<maml:description>
				<maml:para>Specifies the fully-qualified name of the .Net class. You cannot specify both the TypeName parameter and the ComObject parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>argumentList</maml:name>
			<maml:description>
				<maml:para>Specifies a list of arguments to pass to the constructor of the .Net class. Separate elements in the list by using commas (,).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>comObject</maml:name>
			<maml:description>
				<maml:para>Programmatic Identifier (ProgID) of the COM object.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>strict</maml:name>
			<maml:description>
				<maml:para>Specifies that an error should be raised if the COM object that you attempt to create uses an interop assembly. This enables you to distinguish actual COM objects from .Net objects with COM-callable wrappers.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>false</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The .NET or COM object. 
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          New-Object provides the most commonly-used functionality of the VBScript CreateObject function. A statement like Set objShell = CreateObject(&quot;Shell.Application&quot;) in VBScript can be translated to $objShell = new-object -comobject &quot;Shell.Application&quot; in Windows PowerShell.

New-Object expands upon the functionality available in the Windows Script Host environment by making it easy to work with .Net objects from the command line and within scripts.

For more information, type &quot;Get-Help New-Object  -detailed&quot;. For technical information, type &quot;Get-Help New-Object -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$ver = new-object -typename System.Version -argumentlist &quot;1.2.3.4&quot; 
$ver | get-member</dev:code>
  			<dev:remarks>
				<maml:para>This command creates a .Net object of type System.Version, using the string &quot;1.2.3.4&quot; as the constructor. It stores a reference to the object in the $ver variable and pipes it to the Get-Member cmdlet to display the properties and methods of the referenced object.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$ie = new-object -comobject InternetExplorer.Application 
$ie.navigate2(&quot;www.microsoft.com&quot;)
$ie.visible = $true</dev:code>
  			<dev:remarks>
				<maml:para>This command creates an instance of the COM object that represents the Internet Explorer application. It uses the object to navigate to a site, and then sets the visible property of the object to $true to make the application visible.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a=new-object -comobject Word.Application -strict 
$a.visible=$true</dev:code>
  			<dev:remarks>
				<maml:para>This command demonstrates that specifying the Strict parameter will cause new-object to generate a non-terminating error when the COM object created uses an interop assembly.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>New-Object : The object written to the pipeline is an instance of the type
&quot;Microsoft.Office.Interop.Word.ApplicationClass&quot; from the component's prima
ry interop assembly. If this type exposes different members than the IDispa
tch members, scripts written to work with this object might not work if the
 primary interop assembly is not installed.
At line:1 char:14
+ $a=New-Object  &lt;&lt;&lt;&lt; -COM Word.Application -Strict; $a.visible=$true</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$objshell = new-object -comobject &quot;Shell.Application&quot;
$objshell | get-member
$objshell.ToggleDesktop()</dev:code>
  			<dev:remarks>
				<maml:para>The command uses the ComObject parameter to create a COM object with the ProgID, &quot;Shell.Application&quot;. It stores the resulting reference to the object in the $objShell variable and pipes that variable to the Get-Member cmdlet. The Get-Member cmdlet displays information about the properties and methods of the COM object. In the last line, the ToggleDesktop method of the object is called. It minimizes all of the open windows on your desktop.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Compare-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Sort-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ForEach-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Group-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Measure-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Tee-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Where-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-TimeSpan
		</command:name>
		<maml:description>
			<maml:para>Creates a TimeSpan object.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>new</command:verb>
		<command:noun>timespan</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Creates a TimeSpan object. The resulting object can be used to add or subtract time from a DateTime object to create additional DateTime objects.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-TimeSpan</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>start</maml:name>
				<maml:description>
					<maml:para>Indicates the start of a timespan.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>end</maml:name>
				<maml:description>
					<maml:para>Indicates the end of a timespan.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>New-TimeSpan</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>days</maml:name>
				<maml:description>
					<maml:para>Indicates the days in the timespan.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>hours</maml:name>
				<maml:description>
					<maml:para>Indicates the hours in the timespan.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>minutes</maml:name>
				<maml:description>
					<maml:para>Indicates the minutes in the timespan.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>seconds</maml:name>
				<maml:description>
					<maml:para>Indicates the seconds in the timespan.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>start</maml:name>
			<maml:description>
				<maml:para>Indicates the start of a timespan.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			<dev:type>
				<maml:name>DateTime</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>end</maml:name>
			<maml:description>
				<maml:para>Indicates the end of a timespan.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			<dev:type>
				<maml:name>DateTime</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Now</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>days</maml:name>
			<maml:description>
				<maml:para>Indicates the days in the timespan.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>hours</maml:name>
			<maml:description>
				<maml:para>Indicates the hours in the timespan.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>minutes</maml:name>
			<maml:description>
				<maml:para>Indicates the minutes in the timespan.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>seconds</maml:name>
			<maml:description>
				<maml:para>Indicates the seconds in the timespan.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>TimeSpanObject</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help New-TimeSpan  -detailed&quot;. For technical information, type &quot;Get-Help New-TimeSpan -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$timespan = new-timespan -hour 1 -minute 25</dev:code>
  			<dev:remarks>
				<maml:para>This command creates a TimeSpan object of duration 1 hour and 25 minutes and stores it in a variable named $timespan. It displays a representation of the TimeSpan object.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$timespan = new-timespan (get-date -year 1970 -month 02 -day 26)</dev:code>
  			<dev:remarks>
				<maml:para>This example creates a new TimeSpan object that represents the duration between when the command is run and February 26, 1970.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>set-date</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>get-date</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   New-Variable
		</command:name>
		<maml:description>
			<maml:para>Creates a new variable.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>new</command:verb>
		<command:noun>variable</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Creates a new variable. It does not, by default, assign a value to the variable.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>New-Variable</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>The name of the new variable</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
				<maml:name>value</maml:name>
				<maml:description><maml:para>The value assigned to the variable</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>scope</maml:name>
				<maml:description><maml:para>The scope from which the aliases should be exported. This can be a named scope: &quot;global&quot;, &quot;local&quot;, or &quot;script&quot;, or it can be a number relative to the current scope (0 through the number of scopes where 0 is the current scope and 1 is its parent).</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>description</maml:name>
				<maml:description><maml:para>User-supplied description of the variable</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>option</maml:name>
				<maml:description><maml:para>Possible values include ReadOnly, Constant and Private.  Any combination of these may be given.</maml:para></maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >None</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ReadOnly</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Constant</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Private</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >AllScope</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Allows Cmdlet to override restrictions such as renaming existing files as long as security is not compromised. Used to force the operation to make the best attempt at setting the variable.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description><maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para></maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>The name of the new variable</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The Name must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
			<maml:name>value</maml:name>
			<maml:description>
				<maml:para>The value assigned to the variable</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null (...AutomationValue.Null)</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>scope</maml:name>
			<maml:description>
				<maml:para>The scope from which the aliases should be exported. This can be a named scope: &quot;global&quot;, &quot;local&quot;, or &quot;script&quot;, or it can be a number relative to the current scope (0 through the number of scopes where 0 is the current scope and 1 is its parent).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Local</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>description</maml:name>
			<maml:description>
				<maml:para>User-supplied description of the variable</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>option</maml:name>
			<maml:description>
				<maml:para>Possible values include ReadOnly, Constant and Private.  Any combination of these may be given.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ScopedItemOptions</command:parameterValue>
			<dev:type>
				<maml:name>ScopedItemOptions</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>null</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>None</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ReadOnly</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Constant</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Private</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>AllScope</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Allows Cmdlet to override restrictions such as renaming existing files as long as security is not compromised. Used to force the operation to make the best attempt at setting the variable.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects being piped into this Cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified. Then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help New-Variable  -detailed&quot;. For technical information, type &quot;Get-Help New-Variable -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>new-variable days</dev:code>
  			<dev:remarks>
				<maml:para>This command creates a new variable named days. It has no value immediately following the command.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>new-variable zipcode -value 98033</dev:code>
  			<dev:remarks>
				<maml:para>This command creates a variable named zipcode and assigns it the value 98033.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Out-Default
		</command:name>
		<maml:description>
			<maml:para>Send the output to the default formatter and the default output cmdlet. This cmdlet has no effect on the formatting or output. It is a placeholder that lets you write your own Out-Default function or cmdlet.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>out</command:verb>
		<command:noun>default</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Send the output to the default formatter and the default output cmdlet. This cmdlet has no effect on the formatting or output. It is a placeholder that lets you write your own Out-Default function or cmdlet.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Out-Default</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para></maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para></maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code></dev:code>
  			<dev:remarks>
				<maml:para></maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Out-File</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Null</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Printer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-String</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Out-File
		</command:name>
		<maml:description>
			<maml:para>Sends output to a file.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>out</command:verb>
		<command:noun>file</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Out-File cmdlet sends output to a file. You can use this cmdlet instead of the redirection operator (&gt;) when you need to use its parameters.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Out-File</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>filePath</maml:name>
				<maml:description><maml:para>Specifies the path to the output file.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>encoding</maml:name>
				<maml:description><maml:para>Specifies the type of character encoding used in the file. Valid values are &quot;Unicode&quot;, &quot;UTF7&quot;, &quot;UTF8&quot;, &quot;UTF32&quot;, &quot;ASCII&quot;, &quot;BigEndianUnicode&quot;, &quot;Default&quot;, and &quot;OEM&quot;. &quot;Unicode&quot; is the default.

&quot;Default&quot; uses the encoding of the system's current ANSI code page. 

&quot;OEM&quot; uses the current original equipment manufacturer code page identifier for the operating system.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>append</maml:name>
				<maml:description><maml:para>Adds the output to the end of an existing file, instead of replacing the file contents.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>width</maml:name>
				<maml:description><maml:para>Specifies the number of characters in each line of output. Any additional characters are truncated, not wrapped. If you omit this parameter, the width is determined by the characteristics of the host. The default for the PowerShell.exe host is 80 (characters).</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects to be written to the file. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>noClobber</maml:name>
				<maml:description><maml:para>Will not overwrite (replace the contents) of an existing file. By default, if a file exists in the specified path, Out-File overwrites the file without warning. If both Append and NoClobber are used, the output is appended to the existing file.</maml:para></maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>filePath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to the output file.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>encoding</maml:name>
			<maml:description>
				<maml:para>Specifies the type of character encoding used in the file. Valid values are &quot;Unicode&quot;, &quot;UTF7&quot;, &quot;UTF8&quot;, &quot;UTF32&quot;, &quot;ASCII&quot;, &quot;BigEndianUnicode&quot;, &quot;Default&quot;, and &quot;OEM&quot;. &quot;Unicode&quot; is the default.

&quot;Default&quot; uses the encoding of the system's current ANSI code page. 

&quot;OEM&quot; uses the current original equipment manufacturer code page identifier for the operating system.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Unicode</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>append</maml:name>
			<maml:description>
				<maml:para>Adds the output to the end of an existing file, instead of replacing the file contents.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>width</maml:name>
			<maml:description>
				<maml:para>Specifies the number of characters in each line of output. Any additional characters are truncated, not wrapped. If you omit this parameter, the width is determined by the characteristics of the host. The default for the PowerShell.exe host is 80 (characters).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>80</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to be written to the file. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>false</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>noClobber</maml:name>
			<maml:description>
				<maml:para>Will not overwrite (replace the contents) of an existing file. By default, if a file exists in the specified path, Out-File overwrites the file without warning. If both Append and NoClobber are used, the output is appended to the existing file.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Any</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Out-File -detailed&quot;. For technical information, type &quot;Get-Help Out-File -full&quot;. 

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

The Out cmdlets do not format objects; they just render them and send them to the specified display destination. If you send an unformatted object to an Out cmdlet, the cmdlet sends it to a formatting cmdlet before rendering it.

The Out cmdlets do not have parameters for names or file paths. To send data to an Out cmdlets, use a pipeline operator (|) to send the output of a Windows PowerShell command to the cmdlet. You can also store data in a variable and use the InputObject parameter to pass the data to the cmdlet. For help, see the examples.

Out-File sends data, but it does not emit any output objects. If you pipe the output of Out-File to Get-Member, Get-Member reports that no objects have been specified.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | out-file -filepath C:\Test1\process.txt</dev:code>
  			<dev:remarks>
				<maml:para>This command sends a list of processes on the computer to the Process.txt file. If the file does not exist, Out-File creates it. Because the name of the FilePath parameter is optional, you can omit it and submit the equivalent command &quot;get-process | outfile C:\Test1\process.txt&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | out-file C:\Test1\process.txt -noclobber</dev:code>
  			<dev:remarks>
				<maml:para>This command also sends a list of processes to the Process.txt file, but it uses the NoClobber parameter, which prevents an existing file from being overwritten. The output shows the error message that appears when NoClobber is used with an existing file.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Out-File : File C:\Test1\process.txt already exists and NoClobber was specified.
At line:1 char:23
+ get-process | out-file  &lt;&lt;&lt;&lt; process.txt -noclobber</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = get-process

out-file -filepath C:\Test1\process.txt -inputobject $a -encoding ASCII -width 50</dev:code>
  			<dev:remarks>
				<maml:para>These commands send a list of processes on the computer to the Process.txt file.

The first command gets the list of processes and stores them in the $a variable. The second command uses the Out-File cmdlet to send the list to the Process.txt file. 

The command uses the InputObject parameter to specify that the input is in the $a variable. It uses the Encoding parameter to convert the output to ASCII format. It uses the Width parameter to limit each line in the file to 50 characters. Because the lines of output are truncated at 50 characters, the rightmost column in the process table is omitted.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-location hklm:\software

c:\PS&gt;get-acl mycompany\mykey | outfile -filepath c:\ps\acl.txt

c:\PS&gt;get-acl mycompany\mykey | outfile -filepath filesystem::acl.txt</dev:code>
  			<dev:remarks>
				<maml:para>These commands show how to use the Out-File cmdlet when you not in a FileSystem drive. 

The first command sets the current location to the HKLM:\Software registry key.

The second and third commands have the same effect. They use the Get-Acl cmdlet to get the security descriptor of the MyKey registry subkey (HKLM\Software\MyCompany\MyKey). A pipeline operator passes the result to the Out-File cmdlet, which sends it to the Acl.txt file.

Because Out-File is not supported by the Windows PowerShell Registry provider, you must specify either the file system drive name, such as &quot;c:&quot;, or the name of the provider followed by two colons, &quot;FileSystem::&quot; in the value of the FilePath parameter. The second and third commands demonstrate these methods.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Out-String</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Null</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Printer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Default</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Tee-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Out-Host
		</command:name>
		<maml:description>
			<maml:para>Sends output to the command line.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>out</command:verb>
		<command:noun>host</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Out-Host cmdlet sends output to the Windows PowerShell host for display. The host displays the output at the command line. Because Out-Host is the default, you do not need to specify it, unless you want to use its parameters to change the display.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Out-Host</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>paging</maml:name>
				<maml:description><maml:para>Displays one page of output at a time, and waits for user input before displaying the remaining pages, much like the traditional &quot;more&quot; command. By default, all of the output is displayed on a single page. The page size is determined by the characteristics of the host.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects that are written to the console. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>paging</maml:name>
			<maml:description>
				<maml:para>Displays one page of output at a time, and waits for user input before displaying the remaining pages, much like the traditional &quot;more&quot; command. By default, all of the output is displayed on a single page. The page size is determined by the characteristics of the host.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects that are written to the console. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Any</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Out-Host -detailed&quot;. For technical information, type &quot;Get-Help Out-Host -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;. 

You can also refer to Out-Host by its built-in alias, &quot;oh&quot;. For more information, see About_Alias.

The Out cmdlets do not format objects; they just render them and send them to the specified display destination. If you send an unformatted object to an Out cmdlet, the cmdlet sends it to a formatting cmdlet before rendering it.

The Out cmdlets do not have parameters for names or file paths. To send data to an Out cmdlets, use a pipeline operator (|) to send the output of a Windows PowerShell command to the cmdlet. You can also store data in a variable and use the -InputObject parameter to pass the data to the cmdlet. For help, see the examples.

Out-Host sends data, but it does not emit any output objects. If you pipe the output of Out-Host to Get-Member, Get-Member reports that no objects have been specified.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | out-host -paging</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the processes on the system one page at a time. It uses the Get-Process command to get the processes on the system. The pipeline operator (|) sends the results to Out-Host which displays them at the console. The Paging parameter displays one page of data at a time.

The same command format is used for the Help function that is built into Windows Powershell. That function gets data from Get-Help and then uses the Paging parameter of Out-Host to display the data one page at a time: get-help $args[0] | out-host -paging).</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = get-history

C:\PS&gt;out-host -InputObject $a</dev:code>
  			<dev:remarks>
				<maml:para>These commands display the session history at the command line. The first command uses the Get-History cmdlet to get the session history, and then it stores the history in the $a variable. The second command uses Out-Host to display content of the $a variable and uses the InputObject parameter to specify the variable to Out-Host.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Out-Printer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Null</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-File</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-String</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Default</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Out-Null
		</command:name>
		<maml:description>
			<maml:para>Deletes output instead of sending it to the console.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>out</command:verb>
		<command:noun>null</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Out-Null cmdlet sends output to NULL, in effect, deleting it.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Out-Null</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the object that sent to null (deleted). Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the object that sent to null (deleted). Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Input for the Cmdlet is brought to it from the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						There is no output.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Out-Null -detailed&quot;. For technical information, type &quot;Get-Help Out-Null -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

The Out cmdlets do not have parameters for names or file paths. To send data to an Out cmdlets, use a pipeline operator (|) to send the output of a Windows PowerShell command to the cmdlet. You can also store data in a variable and use the InputObject parameter to pass the data to the cmdlet. For help, see the examples.

Out-Null does not emit any output objects. If you pipe the output of Out-Null to Get-Member, Get-Member reports that no objects have been specified.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem | out-null</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the items in the local directory, but then discards them, instead of passing them through the pipeline or displaying them at the command line. This is useful for discarding output that you don't need.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Out-Printer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-File</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-String</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Default</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Out-Printer
		</command:name>
		<maml:description>
			<maml:para>Sends output to a printer.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>out</command:verb>
		<command:noun>printer</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Out-Printer cmdlet sends output to the default printer or to an alternate printer, if one is specified.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Out-Printer</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Specifies the  alternate printer. The parameter name (&quot;-Name&quot;) is optional.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects to be sent to the printer. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the  alternate printer. The parameter name (&quot;-Name&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Default printer</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to be sent to the printer. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Out-Printer -detailed&quot;. For technical information, type &quot;Get-Help Out-Printer -full&quot;. 

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Out-Printer by its built-in alias, &quot;lp&quot;. For more information, see About_Alias.

The Out cmdlets do not format objects; they just render them and send them to the specified display destination. If you send an unformatted object to an Out cmdlet, the cmdlet sends it to a formatting cmdlet before rendering it.

The Out cmdlets do not have parameters for names or file paths. To send data to an Out cmdlets, use a pipeline operator (|) to send the output of a Windows PowerShell command to the cmdlet. You can also store data in a variable and use the InputObject parameter to pass the data to the cmdlet. For help, see the examples.

Out-Printer sends data, but it does not emit any output objects. If you pipe the output of Out-Printer to Get-Member, Get-Member reports that no objects have been specified.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-content $pshome\about_signing.help.txt | Out-Printer</dev:code>
  			<dev:remarks>
				<maml:para>This command prints the content of the About_Signing help file to the default printer. This examples shows you how to print a file, even though Out-Printer does not have a Path parameter.

The command uses the Get-Content cmdlet to get the contents of the help file. The path includes $pshome, a built-in variable that stores the installation directory for Windows PowerShell. A pipeline operator (|) passes the results to Out-Printer, which sends it to the default printer.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>&quot;Hello, World&quot; | out-printer -name &quot;\\Server01\Prt-6B Color&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command prints &quot;Hello, World&quot; to the &quot;Prt-6B Color&quot; printer on Server01. This command uses the Name parameter to specify the alternate printer. Because the parameter name is optional, you can omit it.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$h = get-help -full get-wmiobject

out-printer -inputobject $h</dev:code>
  			<dev:remarks>
				<maml:para>These commands print the full version of the help for Get-WmiObject. The first command use the Get-Help cmdlet to get the full version of the help for Get-WmiObject, and stores it in the $h variable. The second command sends the content to the default printer. It uses the InputObject parameter to pass the value of the $h variable to Out-Printer.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Null</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-String</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-File</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Default</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Out-String
		</command:name>
		<maml:description>
			<maml:para>Sends objects to the host as a series of strings.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>out</command:verb>
		<command:noun>string</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Out-String cmdlet converts the objects that Windows PowerShell manages into an array of strings. By default, Out-String accumulates the strings and returns them as a single string, but you can use the stream parameter to direct Out-String to return one string at a time. This cmdlet lets you search and manipulate string output as you would in traditional shells when object manipulation is less convenient.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Out-String</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects to be written to a string. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>width</maml:name>
				<maml:description><maml:para>Specifies the number of characters in each line of output. Any additional characters are truncated, not wrapped. If you omit this parameter, the width is determined by the characteristics of the host. The default for the PowerShell.exe host is 80 (characters).</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>stream</maml:name>
				<maml:description><maml:para>Sends the strings for each object separately. By default, the strings for each object are accumulated and sent as a single string.</maml:para></maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to be written to a string. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>width</maml:name>
			<maml:description>
				<maml:para>Specifies the number of characters in each line of output. Any additional characters are truncated, not wrapped. If you omit this parameter, the width is determined by the characteristics of the host. The default for the PowerShell.exe host is 80 (characters).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>80</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>stream</maml:name>
			<maml:description>
				<maml:para>Sends the strings for each object separately. By default, the strings for each object are accumulated and sent as a single string.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Any</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Input to the cmdlet comes from the pipeline or the -InputObject parameter.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Out-String -detailed&quot;. For technical information, type &quot;Get-Help Out-String -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

The Out cmdlets do not format objects; they just render them and send them to the specified display destination. If you send an unformatted object to an Out cmdlet, the cmdlet sends it to a formatting cmdlet before rendering it.

The Out cmdlets do not have parameters for names or file paths. To send data to an Out cmdlets, use a pipeline operator (|) to send the output of a Windows PowerShell command to the cmdlet. You can also store data in a variable and use the InputObject parameter to pass the data to the cmdlet. For help, see the examples.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-content C:\test1\testfile2.txt | out-string</dev:code>
  			<dev:remarks>
				<maml:para>This command sends the content of the Testfile2.txt file to the console as a single string. It uses the Get-Content cmdlet to get the content of file. The pipeline operator (|) sends the content to Out-String, which sends the content to the console as a string.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>          </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$c = get-culture | select-object *

out-string -inputobject $c -width 100</dev:code>
  			<dev:remarks>
				<maml:para>These commands get the regional settings for the current user and convert the data to strings. The first command uses the Get-Culture cmdlet to get the regional settings. The pipeline operator (|) sends the result to the Select-Object cmdlet, which selects all properties (*) of the culture object that Get-Culture retrieved. The command then stores the results in the $c variable.

The second command uses Out-String to convert the CultureInfo object to a series of strings; one for each property. It uses the InputObject parameter to pass the $c variable to Out-String. The width parameter is set to 100 characters per line to prevent truncation.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>        </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-alias | out-string -stream | select-string &quot;Get-Command&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command displays aliases that includes the phrase &quot;Get-Command&quot;. It uses the Get-Alias cmdlet to get a set of AliasInfo objects; one for each alias in the shell. This examples demonstrates the difference between working with objects and working with strings.

The pipeline operator (|) sends the output of Get-Alias to Out-String, which converts the objects to a series of strings. It uses the -stream parameter to send each string individually, instead of concatenating them into a single string. Another pipeline operator sends the strings to Select-String, which selects the strings that include &quot;Get-Command&quot; anywhere in the string. 

If you omit the -stream parameter, the command displays all of the aliases, because Select-String finds &quot;Get-Command&quot; in the single string that Out-String returns, and the formatter displays the string as a table.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Out-File</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Null</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Printer</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Default</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Read-Host
		</command:name>
		<maml:description>
			<maml:para>Reads a line of input from the console.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>read</command:verb>
		<command:noun>host</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Reads a line of input from the console. Can be used to prompt for input from a user. Can also be used to create secure strings.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Read-Host</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>prompt</maml:name>
				<maml:description><maml:para>This is the string that will become the prompt object. If the prompt string includes spaces, it must be surrounded by quotes.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>asSecureString</maml:name>
				<maml:description><maml:para>If set to true, the input will be echoed as star characters (*). The output will then be a Securestring object.</maml:para></maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>prompt</maml:name>
			<maml:description>
				<maml:para>This is the string that will become the prompt object. If the prompt string includes spaces, it must be surrounded by quotes.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>asSecureString</maml:name>
			<maml:description>
				<maml:para>If set to true, the input will be echoed as star characters (*). The output will then be a Securestring object.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						None
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>String or SecureString</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The output object is of type String unless the -asSecureString parameter is specified, in which case the output is of type SecureString.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Read-Host  -detailed&quot;. For technical information, type &quot;Get-Help Read-Host -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$age = read-host &quot;Please enter your age:&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command presents the string &quot;Please enter your age:&quot; as a prompt. When a value is entered and the Enter key is pressed, that value is stored in the $age variable.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = read-host &quot;Enter the machine name here&quot;</dev:code>
  			<dev:remarks>
				<maml:para>&lt;remove&gt;</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$pwd_secure_string = read-host &quot;Enter a Password:&quot; -assecurestring</dev:code>
  			<dev:remarks>
				<maml:para>This command presents the string &quot;Enter a Password:&quot; as a prompt. As a value is being entered, each key press results in the display of an asterisk (*). When the Enter key is pressed, the value is stored as a SecureString in the $pwd_secure_string variable.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ConvertFrom-SecureString</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Remove-Variable
		</command:name>
		<maml:description>
			<maml:para>Deletes a variable and its value.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>remove</command:verb>
		<command:noun>variable</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Remove-Variable cmdlet deletes a variable and its value from the scope in which it is defined, such as the current console. You cannot use this cmdlet to delete variables that are set as constants or those that are owned by the system. Changes to the console affect only the current console, unless you use Export-Console to save the console.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Remove-Variable</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Specifies the name of the variable to be removed. The parameter name (&quot;-Name&quot;) is optional.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description><maml:para>Deletes only the specified items. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description><maml:para>Omits the specified items. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>scope</maml:name>
				<maml:description><maml:para>Specifies the scope in which this alias is valid. Valid values are &quot;Global&quot;, &quot;Local&quot;, or &quot;Script&quot;, or a number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent). &quot;Local&quot; is the default. For more information, type &quot;get-help about_scope&quot;.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para></maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the variable to be removed. The parameter name (&quot;-Name&quot;) is optional.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The Name must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Deletes only the specified items. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Omits the specified items. The value of this parameter qualifies the Name parameter. Enter a name element or pattern, such as &quot;s*&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>scope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope in which this alias is valid. Valid values are &quot;Global&quot;, &quot;Local&quot;, or &quot;Script&quot;, or a number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent). &quot;Local&quot; is the default. For more information, type &quot;get-help about_scope&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Local</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>none</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Remove-Variable -detailed&quot;. For technical information, type &quot;Get-Help Remove-Variable -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to RemoveVariable by its built-in alias, &quot;rv&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>remove-variable Smp</dev:code>
  			<dev:remarks>
				<maml:para>Remove an existing variable $Smp</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>None.</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Set-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Select-Object
		</command:name>
		<maml:description>
			<maml:para>Selects specified properties of an object or set of objects. It can also select unique objects from an array of objects or it can select a specified number of objects from the beginning or end of an array of objects.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>select</command:verb>
		<command:noun>object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Selects specified properties of an object or set of objects. It can also select unique objects from an array of objects or it can select a specified number of objects from the beginning or end of an array of objects. 
If you use Select-Object to select specified properties, it copies the values of those properties from the input objects and creates new objects that have the specified properties and copied values. 
You can use the First, Last and Unique parameters to select particular objects from an array of input objects. For more powerful object filtering, use the Where-Object cmdlet.
You can use Select-Object to add calculated properties to an object. To do so, you specify a
hash table as a value of the Property parameter. The hash table must include two keys: Name and
Expression. The value assigned to the Name key is used as the name of the property. The 
Expression key is assigned a script block that is evaluated to determine the value of the property.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Select-Object</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>property</maml:name>
				<maml:description><maml:para>Specifies a property or properties to select. You can use wildcards in values for this parameter.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>excludeProperty</maml:name>
				<maml:description><maml:para>Specifies a property or properties that should not be selected. Excluded properties are removed after included properties are selected.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>expandProperty</maml:name>
				<maml:description><maml:para>Specifies a property to selected and indicates that an attempt should be made to expand that property. If the specified property is an array, for example, each value of the array should be included.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>first</maml:name>
				<maml:description><maml:para>Specifies the number of objects to select from the beginning of an array of input objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>last</maml:name>
				<maml:description><maml:para>Specifies the number of objects to select from the end of an array of input objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>unique</maml:name>
				<maml:description><maml:para>Specifies that, if a subset of the input objects have identical properties and values, only a single member of the subset will be selected. </maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies an object or objects to input to the cmdlet.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="1">
			<maml:name>property</maml:name>
			<maml:description>
				<maml:para>Specifies a property or properties to select. You can use wildcards in values for this parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>excludeProperty</maml:name>
			<maml:description>
				<maml:para>Specifies a property or properties that should not be selected. Excluded properties are removed after included properties are selected.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
			<maml:name>expandProperty</maml:name>
			<maml:description>
				<maml:para>Specifies a property to selected and indicates that an attempt should be made to expand that property. If the specified property is an array, for example, each value of the array should be included.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>first</maml:name>
			<maml:description>
				<maml:para>Specifies the number of objects to select from the beginning of an array of input objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>0</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>last</maml:name>
			<maml:description>
				<maml:para>Specifies the number of objects to select from the end of an array of input objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>0</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>unique</maml:name>
			<maml:description>
				<maml:para>Specifies that, if a subset of the input objects have identical properties and values, only a single member of the subset will be selected. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies an object or objects to input to the cmdlet.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						An object or a set of objects.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>PSObjects</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Select-Object  -detailed&quot;. For technical information, type &quot;Get-Help Select-Object -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
You can also refer to Select-Object by its built-in alias, &quot;select&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | select-object ProcessName,Id,WS</dev:code>
  			<dev:remarks>
				<maml:para>This command displays a list of processes. Only the name, ID and Working Set(WS) properties of the processes are displayed.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | select-object processname -expandproperty modules |
format-list</dev:code>
  			<dev:remarks>
				<maml:para>This command displays information about the modules used by the processes running on a computer. It uses the ExpandProperty parameter to display the details contained within the modules property.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>ProcessName       : 00THotkey
Size              : 256
Company           : TOSHIBA Corporation
FileVersion       : 1, 0, 0, 27
ProductVersion    : 6, 2, 0, 0
Description       : THotkey
Product           : TOSHIBA THotkey
ModuleName        : 00THotkey.exe
FileName          : C:\WINDOWS\system32\00THotkey.exe
BaseAddress       : 4194304</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | sort-object -property WS | select-object -Last 5</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the 5 processes that are using the most memory. The Sort-Object cmdlet is used to sort the processes according to memory (Working Set) usage and the Select-Object cmdlet is used to select only the last 5 members of the resulting array of objects.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Handles  NPM(K)    PM(K)      WS(K) VS(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
   2866     320    33432      45764   203   222.41   1292 svchost
    577      17    23676      50516   265    50.58   4388 WINWORD
    826      11    75448      76712   188    19.77   3780 Ps
   1367      14    73152      88736   216    61.69    676 Ps
   1612      44    66080      92780   380   900.59   6132 INFOPATH</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$processes = get-process | select-object ProcessName,@{Name=&quot;Start Day&quot;;
Expression = {$_.StartTime.DayOfWeek}}</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the name and start day of the processes running on a computer. Processname is a property of the objects output by the Get-Process cmdlet and start day is a calculated property.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Name                                                               StartDay
----                                                               --------
alg                                                               Wednesday
ati2evxx                                                          Wednesday
ati2evxx                                                           Thursday
...</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>&quot;a&quot;,&quot;b&quot;,&quot;c&quot;,&quot;a&quot;,&quot;a&quot;,&quot;a&quot; | select-object -unique</dev:code>
  			<dev:remarks>
				<maml:para>This command displays unique characters from an array of characters. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>a
b
c</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Where-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Group-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Sort-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Select-String
		</command:name>
		<maml:description>
			<maml:para>Identifies patterns in strings.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>select</command:verb>
		<command:noun>string</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Identifies patterns in strings. By default, Select-String interprets the value of the Pattern parameter as a regular expression and matches input against it. To learn more about regular expressions in Windows PowerShell, type get-help about_regular_expression. You can suppress the regular expression match by using the SimpleMatch parameter. A simple match attempts to find the string specified in the Pattern parameter as a substring of the input.

The cmdlet makes it easy to search string content from files. It includes a Path parameter that supports wildcards and when that parameter is used, the contents of the referenced files are retrieved and matched against the value of the Pattern parameter.

Output from the cmdlet is, by default, a MatchInfo object which includes detailed information about the matches. The information is most useful when the input to the cmdlet is retrieved from files. The object includes properties like Filename and Line, which have the value 'InputStream' when the input was not from a file. You can use the Quiet parameter to suppress the output of MatchInfo objects. In that case, the resulting output becomes a boolean value that is true if a match occurred and false otherwise.

When matching file content, you can use the List parameter to stop after the first match in each input file. You should use this parameter if you only require a single match, because it will result in faster matching commands.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Select-String</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>pattern</maml:name>
				<maml:description>
					<maml:para>Specifies the string or regular expression that represents the matching criteria. To learn about regular expressions in Windows PowerShell, type get-help about_regular_expression at the Windows PowerShell command prompt.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Accepts an object as input to the cmdlet. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Include only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Exclude the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>simpleMatch</maml:name>
				<maml:description>
					<maml:para>Specifies that a simple match, rather than a regular expression match, should be used.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>caseSensitive</maml:name>
				<maml:description>
					<maml:para>Makes matches case sensitive. By default, matching is not case sensitive.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>quiet</maml:name>
				<maml:description>
					<maml:para>Suppresses most of the output from the cmdlet. When specified, only a boolean value is passed along the pipeline. The value is true if a match was found and false otherwise.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>list</maml:name>
				<maml:description>
					<maml:para>Specifies that only one match should result for each input file. The returned MatchInfo objects only include information about that first match.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Select-String</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>pattern</maml:name>
				<maml:description>
					<maml:para>Specifies the string or regular expression that represents the matching criteria. To learn about regular expressions in Windows PowerShell, type get-help about_regular_expression at the Windows PowerShell command prompt.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>path</maml:name>
				<maml:description>
					<maml:para>Specifies strings or files to match against. Wildcard syntax is allowed.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description>
					<maml:para>Include only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description>
					<maml:para>Exclude the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>simpleMatch</maml:name>
				<maml:description>
					<maml:para>Specifies that a simple match, rather than a regular expression match, should be used.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>caseSensitive</maml:name>
				<maml:description>
					<maml:para>Makes matches case sensitive. By default, matching is not case sensitive.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>quiet</maml:name>
				<maml:description>
					<maml:para>Suppresses most of the output from the cmdlet. When specified, only a boolean value is passed along the pipeline. The value is true if a match was found and false otherwise.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>list</maml:name>
				<maml:description>
					<maml:para>Specifies that only one match should result for each input file. The returned MatchInfo objects only include information about that first match.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="1">
			<maml:name>pattern</maml:name>
			<maml:description>
				<maml:para>Specifies the string or regular expression that represents the matching criteria. To learn about regular expressions in Windows PowerShell, type get-help about_regular_expression at the Windows PowerShell command prompt.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>path</maml:name>
			<maml:description>
				<maml:para>Specifies strings or files to match against. Wildcard syntax is allowed.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Include only the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Exclude the specified items. The value of this parameter qualifies the Path parameter. Enter a path element or pattern, such as &quot;*.txt&quot;. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>simpleMatch</maml:name>
			<maml:description>
				<maml:para>Specifies that a simple match, rather than a regular expression match, should be used.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>caseSensitive</maml:name>
			<maml:description>
				<maml:para>Makes matches case sensitive. By default, matching is not case sensitive.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>quiet</maml:name>
			<maml:description>
				<maml:para>Suppresses most of the output from the cmdlet. When specified, only a boolean value is passed along the pipeline. The value is true if a match was found and false otherwise.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>list</maml:name>
			<maml:description>
				<maml:para>Specifies that only one match should result for each input file. The returned MatchInfo objects only include information about that first match.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Accepts an object as input to the cmdlet. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>AutomationNull.Value</dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="false" position="2">
			<maml:name>text</maml:name>
			<maml:description>
				<maml:para>Specifies literal text to match against the string or regular expression value of the Pattern parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Objects or files.</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						If the input object is a FileInfo object, the corresponding file is read and its contents are matched against the pattern. If the input object is a MatchInfo object, the value of its Line property is matched against the pattern. Otherwise, the object is converted to a string using the ETS type converter and the resulting string is matched against the pattern.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>If the Quiet parameter is specified, a boolean value indicating whether the pattern was found.

Otherwise, the output will be a set of MatchInfo objects, each of which have the following properties:
IgnoreCase: Boolean
LineNumber: integer (0 if input is not from a file)
Line: string
Filename: string (&quot;InputStream&quot; if input is not from a file)
Path: string (&quot;InputStream&quot; if input is not from a file)
Pattern: the string that was actually matched
OriginalObject: object that was processed</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          Select-String is like the Unix tool 'grep' and the Windows tool 'findstr'.

Select-String makes comparisons by using the current culture setting on the current thread. You can determine the current culture setting by using the Get-Culture cmdlet.

To see all the properties of a MatchInfo object, type: select-string -path test.txt -pattern &quot;test&quot; | get-member | format-list -property *.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>&quot;Hello&quot;,&quot;HELLO&quot; | select-string -pattern &quot;HELLO&quot; -casesensitive</dev:code>
  			<dev:remarks>
				<maml:para>This command performs a case sensitive matching of the literal strings &quot;Hello&quot; and &quot;HELLO&quot; against the pattern &quot;HELLO&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>HELLO</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>select-string -path *.xml -pattern &quot;the the&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command searches through all files with the .xml file extension in the current directory and displays the lines in those files that include the string &quot;the the&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$events = get-eventlog -logname application -newest 100
$events | select-string -inputobject {$_.message} -pattern &quot;failed&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command retrieves the last 100 events from the application event log and stores them in the $events variable. It pipes that variable to Select-String and specifies a script block as the value of the InputObject parameter. The script block refers to each pipelined object by using $_ and retrieves the message property of each EventLogEntry object. All the message strings are passed to Select-String as input and are matched against the string &quot;failed&quot;. Any matches are displayed on the console.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem c:\windows\system32\* -include *.txt -recurse |
select-string -pattern &quot;Microsoft&quot; -casesensitive</dev:code>
  			<dev:remarks>
				<maml:para>This command examines all files in the subdirectories of C:\Windows\System32 with the .txt file extension, for the string &quot;Microsoft&quot;. The CaseSensitive parameter indicates that the 'M' in 'Microsoft' must be capitalized and the rest of the characters must be lowercase for a match to occur.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>about_comparison_operators</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>about_regular_expression</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-Alias
		</command:name>
		<maml:description>
			<maml:para>Creates or changes an alias (alternate name) for a cmdlet or other command element in the current Windows PowerShell session.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>set</command:verb>
		<command:noun>alias</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-Alias cmdlet creates or changes an alias (alternate name) for a cmdlet or for a command element, such as a function, a script, a file, or other executable. You can also use Set-Alias to reassign a current alias to a new command, or to change any of properties of an alias, such as its description. Unless you add the alias to the Windows PowerShell profile, the changes to an alias are lost when you exit the session or close Windows PowerShell.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-Alias</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Specifies the new alias. You can use any alphanumeric characters in an alias, but the first character cannot be a number.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>value</maml:name>
				<maml:description><maml:para>Specifies the name of the cmdlet or command element that is being aliased.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>description</maml:name>
				<maml:description><maml:para>Specifies a description of the alias. You can type any string. If the description includes spaces, enclose it quotation marks.      </maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>option</maml:name>
				<maml:description><maml:para>Sets the value of the Options property of the alias.

Valid values are:

* None: Sets no options. (default)

* ReadOnly: The properties of the alias cannot be changed, except by using the Force parameter. You can use Remove-Item to delete the alias.

* Constant: The alias cannot be deleted and its properties cannot be changed. Constant is available only when you are creating an alias. You cannot change the option of an existing alias to Constant.

* Private: The alias is available only within the scope specified by the Scope parameter. It is invisible in all other scopes.

* AllScope: The alias is copied to any new scopes that are created.

To see the Options property of the aliases, type &quot;get-alias | format-table -property Name, Definition, Options -autosize&quot;.</maml:para></maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >None</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ReadOnly</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Constant</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Private</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >AllScope</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description><maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>scope</maml:name>
				<maml:description><maml:para>Specifies the scope in which this alias is valid. Valid values are &quot;Global&quot;, &quot;Local&quot;, or &quot;Script&quot;, or a number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent). &quot;Local&quot; is the default. For more information, type &quot;get-help about_scope&quot;.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para></maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the new alias. You can use any alphanumeric characters in an alias, but the first character cannot be a number.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>value</maml:name>
			<maml:description>
				<maml:para>Specifies the name of the cmdlet or command element that is being aliased.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>description</maml:name>
			<maml:description>
				<maml:para>Specifies a description of the alias. You can type any string. If the description includes spaces, enclose it quotation marks.      </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>option</maml:name>
			<maml:description>
				<maml:para>Sets the value of the Options property of the alias.

Valid values are:

* None: Sets no options. (default)

* ReadOnly: The properties of the alias cannot be changed, except by using the Force parameter. You can use Remove-Item to delete the alias.

* Constant: The alias cannot be deleted and its properties cannot be changed. Constant is available only when you are creating an alias. You cannot change the option of an existing alias to Constant.

* Private: The alias is available only within the scope specified by the Scope parameter. It is invisible in all other scopes.

* AllScope: The alias is copied to any new scopes that are created.

To see the Options property of the aliases, type &quot;get-alias | format-table -property Name, Definition, Options -autosize&quot;.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="true">ScopedItemOptions</command:parameterValue>
			<dev:type>
				<maml:name>ScopedItemOptions</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>None</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ReadOnly</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Constant</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Private</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>AllScope</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>scope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope in which this alias is valid. Valid values are &quot;Global&quot;, &quot;Local&quot;, or &quot;Script&quot;, or a number relative to the current scope (0 through the number of scopes, where 0 is the current scope and 1 is its parent). &quot;Local&quot; is the default. For more information, type &quot;get-help about_scope&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Local</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>aliasObject</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						An alias object is required only if is not supplied with the cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>There is no output unless the -passthru parameter is used.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;get-help set-alias -detailed&quot;. For technical information, type &quot;get-help set-alias -full&quot;. 

An alias is an alternate name or nickname for a cmdlet or command element. To run the cmdlet, you can use its full name or any valid alias. For more information, type &quot;get-help about_alias&quot;. 

To create a new alias, use Set-Alias or New-Alias. To delete an alias, use Remove-Item.

A cmdlet can have multiple aliases, but an alias can only be associated with one cmdlet at a time. If you use set-alias to associate the alias with a different cmdlet, it is no longer associated with the original cmdlet.

You can create an alias for a cmdlet, but you cannot create an alias for a command with parameters and values. For example, you can create an alias for Set-Location, but you cannot create an alias for &quot;Set-Location C:\Windows\System32&quot;. To create an alias for a command, create a function that includes the command, and then create an alias to the function.

To save the aliases from a session and use them in a different session, add the set-alias command to your Windows PowerShell profile. Profiles do not exist by default. To create a profile in the path stored in the $profile variable, type &quot;new-item -type file -force $profile&quot;. To see the value of the $profile variable, type &quot;$profile&quot;.

You can also save your aliases by using Export-Alias to copy the aliases from the session to a file, and then use Import-Alias to add them to the alias list for a new session.

You can also refer to set-alias by its built-in alias, &quot;sal&quot;. For more information, type &quot;get-help About_Alias&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-alias -name list -value get-childitem</dev:code>
  			<dev:remarks>
				<maml:para>This command creates the alias &quot;list&quot; for the Get-Childitem cmdlet. After you create the alias, you can use &quot;list&quot; in place of &quot;Get-Childitem&quot; at the command line and in scripts.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-alias list get-location</dev:code>
  			<dev:remarks>
				<maml:para>This command associates the alias &quot;list&quot; with the Get-Location cmdlet. If &quot;list&quot; is an alias for another cmdlet, this command changes its association so that it now is the alias only for Get-Location.

This command uses the same format as the command in the previous example, but it omits the optional parameter names, -Name and -Value. When you omit parameter names, the values of those parameters must appear in the specified order in the command. In this case, the value of -Name (&quot;list&quot;) must be the first parameter and the value of -Value (&quot;get-location&quot;) must be the second parameter.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-alias scrub remove-item -option readonly -passthru | format-list</dev:code>
  			<dev:remarks>
				<maml:para>This command associates the alias &quot;scrub&quot; with the Remove-Item cmdlet. It uses the &quot;ReadOnly&quot; option to prevent the alias from being deleted or assigned to another cmdlet.

The Passthru parameter directs Windows PowerShell to pass an object that represents the new alias through the pipeline to the Format-List cmdlet. If the Passthru parameter were omitted, there would be no output from this cmdlet to display (in a list or otherwise).</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-Alias np c:\windows\notepad.exe</dev:code>
  			<dev:remarks>
				<maml:para>This command associates the alias, &quot;np&quot;, with the executable file for Notepad. After the command completes, to open Notepad from the Windows PowerShell command line, just type &quot;np&quot;.

This example demonstrates that you can create aliases for executable files and elements other than cmdlets.

To make the command more generic, you can use the &quot;Windir&quot; environment variable (${env:windir}) to represent the C\Windows directory. The generic version of the command is &quot;set-alias np ${env:windir}\notepad.exe&quot;. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>function CD32 {set-location c:\windows\system32}

C:\PS&gt;set-alias go cd32</dev:code>
  			<dev:remarks>
				<maml:para>These commands show how to assign an alias to a command with parameters, or even to a pipeline of many commands.

You can create an alias for a cmdlet, but you cannot create an alias for a command that consists of a cmdlet and its parameters. However, if you place the command in a function or a script, then you can create a useful function or script name and you can create one or more aliases for the function or script.

In this example, the user wants to create an alias for the command, &quot;set-location c:\windows\system32&quot;, where &quot;set-location&quot; is a cmdlet and &quot;C:\Windows\System32&quot; is the value of the Path parameter. 

To do this, the first command creates a function called &quot;CD32&quot; that contains the Set-Location command.

The second command creates the alias, &quot;go&quot;, for the CD32 function. Now, to run the Set-Location command, the user can type either &quot;CD32&quot; or &quot;go&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Export-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Import-Alias</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-Date
		</command:name>
		<maml:description>
			<maml:para>Changes the system time on the computer to a time that you specify.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>set</command:verb>
		<command:noun>date</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-Date cmdlet changes the system date and time on the computer to a date and time that you specify. You can specify a new date and/or time by typing a string or by passing a DateTime or TimeSpan object to Set-Date. To specify a new date or time, use the Date parameter. To specify a change interval, use the Adjust parameter.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-Date</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>date</maml:name>
				<maml:description>
					<maml:para>Changes the date and time to the specified values. You can type a new date in the short date format and a time in the standard time format for your locale. Or, you can pass a Date-Time object from Get-Date.

If you specify a date, but not a time, Set-Date changes the time to midnight on the specified date. If you specify only a time, it does not change the date.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>displayHint</maml:name>
				<maml:description>
					<maml:para>Determines which elements of the date and time are displayed. (This does not affect the DateTime object that Get-Date retrieves.)

Valid values are: 

-- date: displays only the date
-- time: displays only the time
-- datetime: displays the date and time</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Date</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Time</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DateTime</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-Date</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>adjust</maml:name>
				<maml:description>
					<maml:para>Adds or subtracts the specified value from the current date and time. You can type an adjustment in standard date and time format for your locale or use the Adjust parameter to pass a TimeSpan object from New-TimeSpan to Set-Date.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">TimeSpan</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>displayHint</maml:name>
				<maml:description>
					<maml:para>Determines which elements of the date and time are displayed. (This does not affect the DateTime object that Get-Date retrieves.)

Valid values are: 

-- date: displays only the date
-- time: displays only the time
-- datetime: displays the date and time</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Date</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Time</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DateTime</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>date</maml:name>
			<maml:description>
				<maml:para>Changes the date and time to the specified values. You can type a new date in the short date format and a time in the standard time format for your locale. Or, you can pass a Date-Time object from Get-Date.

If you specify a date, but not a time, Set-Date changes the time to midnight on the specified date. If you specify only a time, it does not change the date.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DateTime</command:parameterValue>
			<dev:type>
				<maml:name>DateTime</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>System time </dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>displayHint</maml:name>
			<maml:description>
				<maml:para>Determines which elements of the date and time are displayed. (This does not affect the DateTime object that Get-Date retrieves.)

Valid values are: 

-- date: displays only the date
-- time: displays only the time
-- datetime: displays the date and time</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">DisplayHintType</command:parameterValue>
			<dev:type>
				<maml:name>DisplayHintType</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>DateTime</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Date</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Time</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DateTime</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>adjust</maml:name>
			<maml:description>
				<maml:para>Adds or subtracts the specified value from the current date and time. You can type an adjustment in standard date and time format for your locale or use the Adjust parameter to pass a TimeSpan object from New-TimeSpan to Set-Date.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">TimeSpan</command:parameterValue>
			<dev:type>
				<maml:name>TimeSpan</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>0</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>DateTime Object, TimeSpan Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>DateTime Object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Set-Date -detailed&quot;. For technical information, type &quot;Get-Help Set-Date -full&quot;.

Use this cmdlet cautiously. Changing the date and time on the computer. The change might prevent the computer from receiving system-wide events and updates that are triggered by a date or time. Use the -WhatIf and -Confirm parameters to avoid errors. 

You can use standard .NET methods with the DateTime and TimeSpan objects used with Set-Date, such as AddDays, AddMonths and FromFileTime. For more information, see &quot;DateTime Methods&quot; and &quot;TimeSpan Methods.&quot;

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-Date -Date (Get-Date).AddDays(3)</dev:code>
  			<dev:remarks>
				<maml:para>This command adds three days to the current system date. It does not affect the time. The command uses the Date parameter to specify the date. It uses the Get-Date cmdlet to get the current date and time and applies the AddDays .NET method for DateTime objects with a value of 3 (days).</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-date -adjust -0:10:0 -displayHint time</dev:code>
  			<dev:remarks>
				<maml:para>This command sets the current system time back by 10 minutes. It uses the Adjust parameter to specify an interval of change and the time change (minus ten minutes) in standard time format for the locale. The DisplayHint parameter tells Windows PowerShell to display only the time, but it does not affect the DateTime object that Set-Date returns.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>       </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$t = get-date

C:\PS&gt;set-date -date $t</dev:code>
  			<dev:remarks>
				<maml:para>These commands change the system date and time on the computer to the date and time saved in the variable $t. The first command gets the date and stores it in $t. The second command uses the Date parameter to pass the DateTime object in $t to the Set-Date cmdlet.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$90mins = new-timespan -minutes 90

C:\PS&gt;set-date -adjust $90mins</dev:code>
  			<dev:remarks>
				<maml:para>These commands advance the system time on the local computer by 90 minutes. The first command uses the New-Timespan cmdlet to create a TimeSpan object with a 90-minute interval, and then it saves the TimeSpan object in the $90mins variable. The second command uses the Adjust parameter of Set-Date to adjust the date by the value of the TimeSpan object in the $90mins variable.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Date</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-TimeSpan</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-TraceSource
		</command:name>
		<maml:description>
			<maml:para>Configures, starts, and stops a trace of Windows PowerShell components.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>set</command:verb>
		<command:noun>tracesource</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Set-TraceSource cmdlet configures, starts, and stops a trace of a Windows PowerShell component. You can use it to specify which components will be traced and where the tracing output is sent.    </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-TraceSource</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Determines which components are traced. Enter the name of the trace source of each component. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
				<maml:name>option</maml:name>
				<maml:description>
					<maml:para>Determines the type of events that are traced. 

The valid values are: None, Constructor, Dispose, Finalizer, Method, Property, Delegates, Events, Exception, Lock, Error, Errors, Warning, Verbose, WriteLine, Data, Scope, ExecutionFlow, Assert, and All. &quot;All&quot; is the default. 

The following values are combinations of other values:

-- ExecutionFlow: (Constructor, Dispose, Finalizer, Method, Delegates, Events, and Scope)

-- Data: (Constructor, Dispose, Finalizer, Property, Verbose, and WriteLine)

-- Errors: (Error and Exception).

To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as &quot;Constructor,Dispose&quot;.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >None</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Constructor</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Dispose</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Finalizer</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Method</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Property</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Delegates</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Events</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Exception</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Lock</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Error</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Errors</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Warning</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Verbose</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >WriteLine</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Data</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Scope</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ExecutionFlow</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Assert</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>filePath</maml:name>
				<maml:description>
					<maml:para>Sends the trace output to specified file. This parameter also selects the file trace listener. If you use this parameter to start the trace, use the RemoveFileListener parameter to stop the trace.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>debugger</maml:name>
				<maml:description>
					<maml:para>Sends the trace output to the debugger. You can view the output in any user-mode or kernel mode debugger or in Visual Studio. This parameter also selects the default trace listener.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>pSHost</maml:name>
				<maml:description>
					<maml:para>Sends the trace output to the Windows PowerShell host. This parameter also selects the PSHost trace listener. </maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>listenerOption</maml:name>
				<maml:description>
					<maml:para>Adds optional data to the prefix of each trace message in the output. The valid values are None, LogicalOperationStack, DateTime, Timestamp, ProcessId, ThreadId, and Callstack. &quot;None&quot; is the default.

To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as &quot;ProcessID,ThreadID&quot;.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >None</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >LogicalOperationStack</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DateTime</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Timestamp</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ProcessId</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ThreadId</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Callstack</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description>
					<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-TraceSource</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Determines which components are traced. Enter the name of the trace source of each component. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>removeListener</maml:name>
				<maml:description>
					<maml:para>Stops the trace by removing the trace listener. 

Use the following values with RemoveListener:
To remove PSHost (console), type &quot;Host&quot;.
To remove Debugger, type &quot;Debug&quot;.
To remove all trace listeners, type &quot;*&quot;.

To remove the file trace listener, use the RemoveFileListener parameter.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Set-TraceSource</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Determines which components are traced. Enter the name of the trace source of each component. Wildcards are permitted.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>removeFileListener</maml:name>
				<maml:description>
					<maml:para>Stops the trace by removing the file trace listener associated with the specified file. Enter the path and file name of the trace output file.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Determines which components are traced. Enter the name of the trace source of each component. Wildcards are permitted.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="2">
			<maml:name>option</maml:name>
			<maml:description>
				<maml:para>Determines the type of events that are traced. 

The valid values are: None, Constructor, Dispose, Finalizer, Method, Property, Delegates, Events, Exception, Lock, Error, Errors, Warning, Verbose, WriteLine, Data, Scope, ExecutionFlow, Assert, and All. &quot;All&quot; is the default. 

The following values are combinations of other values:

-- ExecutionFlow: (Constructor, Dispose, Finalizer, Method, Delegates, Events, and Scope)

-- Data: (Constructor, Dispose, Finalizer, Property, Verbose, and WriteLine)

-- Errors: (Error and Exception).

To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as &quot;Constructor,Dispose&quot;.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSTraceSourceOptions</command:parameterValue>
			<dev:type>
				<maml:name>PSTraceSourceOptions</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>None</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Constructor</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Dispose</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Finalizer</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Method</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Property</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Delegates</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Events</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Exception</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Lock</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Error</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Errors</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Warning</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Verbose</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>WriteLine</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Data</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Scope</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ExecutionFlow</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Assert</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>All</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
			<maml:name>filePath</maml:name>
			<maml:description>
				<maml:para>Sends the trace output to specified file. This parameter also selects the file trace listener. If you use this parameter to start the trace, use the RemoveFileListener parameter to stop the trace.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>debugger</maml:name>
			<maml:description>
				<maml:para>Sends the trace output to the debugger. You can view the output in any user-mode or kernel mode debugger or in Visual Studio. This parameter also selects the default trace listener.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>pSHost</maml:name>
			<maml:description>
				<maml:para>Sends the trace output to the Windows PowerShell host. This parameter also selects the PSHost trace listener. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>listenerOption</maml:name>
			<maml:description>
				<maml:para>Adds optional data to the prefix of each trace message in the output. The valid values are None, LogicalOperationStack, DateTime, Timestamp, ProcessId, ThreadId, and Callstack. &quot;None&quot; is the default.

To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as &quot;ProcessID,ThreadID&quot;.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="true">TraceOptions</command:parameterValue>
			<dev:type>
				<maml:name>TraceOptions</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>TraceOptions.None</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>None</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>LogicalOperationStack</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DateTime</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Timestamp</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ProcessId</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ThreadId</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Callstack</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>removeListener</maml:name>
			<maml:description>
				<maml:para>Stops the trace by removing the trace listener. 

Use the following values with RemoveListener:
To remove PSHost (console), type &quot;Host&quot;.
To remove Debugger, type &quot;Debug&quot;.
To remove all trace listeners, type &quot;*&quot;.

To remove the file trace listener, use the RemoveFileListener parameter.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>removeFileListener</maml:name>
			<maml:description>
				<maml:para>Stops the trace by removing the file trace listener associated with the specified file. Enter the path and file name of the trace output file.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>System.Management.Automation.PSTraceSource</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None or System.Management.Automation.PSTraceSource,when Passthru specified. </maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Set-TraceSource -detailed&quot;. For technical information, type &quot;Get-Help Set-TraceSource -full&quot;.

Tracing is a method that developers use to debug and refine programs. When tracing, the program generates detailed messages about each step in its internal processing. 

The Windows PowerShell tracing cmdlets are designed to help Windows PowerShell developers, but they are available to all users. They let you monitor nearly every aspect of the functionality of the shell. 

A &quot;trace source&quot; is the part of each Windows PowerShell component that manages tracing and generates trace messages for the component. To trace a component, you identify its trace source.

A &quot;trace listener&quot; receives the output of the trace and displays it to the user. You can elect to send the trace data to a user-mode or kernel-mode debugger, to the console, to a file, or to a custom listener derived from the System.Diagnostics.TraceListener class.

To start a trace, use the -Name parameter to specify a trace source (the component to be traced), and the FilePath, Debugger, or PSHost parameters to specify a listener (a destination for the output). Use the Options parameter to determine the types of events that are traced and the ListenerOptions parameter to configure the trace output.

To change the configuration of a trace, enter a Set-TraceSource command as you would to start a trace. Windows PowerShell recognizes that the trace source is already being traced. It stops the trace, adds the new configuration, and starts or restarts the trace.

To stop a trace, use the RemoveListener parameter. To stop a trace that uses the file listener (a trace started by using the -FilePath parameter), use the RemoveFileListener parameter. When you remove the listener, the trace stops.

To determine which components can be traced, use Get-TraceSource. The trace sources for each module are loaded automatically when the component is in use and they appear in the output of Get-TraceSource.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Set-TraceSource -Name Parameterbinding -Option ExecutionFlow -PSHost '
-ListenerOption &quot;ProcessID,TimeStamp&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command starts tracing for the ParameterBinding component of Windows PowerShell. It uses the Name parameter to specify the trace source, the Option parameter to select the ExecutionFlow trace events, and the PSHost parameter to select the Windows PowerShell host listener, which sends the output to the console. The ListenerOption parameter adds the ProcessID and TimeStamp values to the trace message prefix.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-tracesource -name ParameterBinding -RemoveListener Host</dev:code>
  			<dev:remarks>
				<maml:para>This command stops the trace of the ParameterBinding component of Windows PowerShell. It uses the Name parameter to identify the component that was being traced and the RemoveListener parameter to identify the trace listener.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-TraceSource</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Trace-Command</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Get-PSDebug</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Set-Variable
		</command:name>
		<maml:description>
			<maml:para>Sets the value of a variable. Creates the variable if one with the requested name does not exist.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>set</command:verb>
		<command:noun>variable</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Sets the value of a variable. May create the variable if one with the requested name does not exist.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Set-Variable</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
				<maml:name>name</maml:name>
				<maml:description><maml:para>Specifies the variable name.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
				<maml:name>value</maml:name>
				<maml:description><maml:para>Specifies the value to assign to the variable.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>include</maml:name>
				<maml:description><maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>exclude</maml:name>
				<maml:description><maml:para>Specifies those items upon which the cmdlet will not to act and include all others.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>scope</maml:name>
				<maml:description><maml:para>Specifies the scope from which aliases should be exported. This can be a named scope: &quot;global&quot;, &quot;local&quot;, or &quot;script&quot;, or it can be a number relative to the current scope (0 through the number of scopes where 0 is the current scope and 1 is its parent).</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>description</maml:name>
				<maml:description><maml:para>Specifies the description of the variable.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>option</maml:name>
				<maml:description><maml:para>Changes the value of the Options property of the variable. Valid values are: 

-- None: No options. (Default)
-- ReadOnly: Cannot be deleted or changed without the Force parameter.
-- Constant: Cannot be deleted or changed. Constant is valid only when creating a new variable. You cannot set the Constant option on an existing variable.
-- Private: Visible only in the scope specified by the Scope parameter.
-- AllScope: Variable is copied to all scopes that are created.</maml:para></maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >None</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ReadOnly</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Constant</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Private</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >AllScope</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description><maml:para>Allows cmdlet to override restrictions such as renaming existing files as long as security is not compromised. Used to force the operation to make the best attempt at setting the variable.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>passThru</maml:name>
				<maml:description><maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para></maml:description>
			</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="true (ByPropertyName)" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Specifies the variable name.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>N/A - The Name must be specified</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>include</maml:name>
			<maml:description>
				<maml:para>Specifies only those items upon which the cmdlet will act, excluding all others.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>exclude</maml:name>
			<maml:description>
				<maml:para>Specifies those items upon which the cmdlet will not to act and include all others.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>scope</maml:name>
			<maml:description>
				<maml:para>Specifies the scope from which aliases should be exported. This can be a named scope: &quot;global&quot;, &quot;local&quot;, or &quot;script&quot;, or it can be a number relative to the current scope (0 through the number of scopes where 0 is the current scope and 1 is its parent).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>local</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="2">
			<maml:name>value</maml:name>
			<maml:description>
				<maml:para>Specifies the value to assign to the variable.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>description</maml:name>
			<maml:description>
				<maml:para>Specifies the description of the variable.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>option</maml:name>
			<maml:description>
				<maml:para>Changes the value of the Options property of the variable. Valid values are: 

-- None: No options. (Default)
-- ReadOnly: Cannot be deleted or changed without the Force parameter.
-- Constant: Cannot be deleted or changed. Constant is valid only when creating a new variable. You cannot set the Constant option on an existing variable.
-- Private: Visible only in the scope specified by the Scope parameter.
-- AllScope: Variable is copied to all scopes that are created.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ScopedItemOptions</command:parameterValue>
			<dev:type>
				<maml:name>ScopedItemOptions</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>null</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>None</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ReadOnly</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Constant</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Private</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>AllScope</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Allows cmdlet to override restrictions such as renaming existing files as long as security is not compromised. Used to force the operation to make the best attempt at setting the variable.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>passThru</maml:name>
			<maml:description>
				<maml:para>Passes the object created by this cmdlet through the pipeline. By default, this cmdlet does not pass any objects through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>whatIf</maml:name>
    <maml:description>
    <maml:para>Describes what would happen if you executed the command without actually executing the command.</maml:para>
    </maml:description>
</command:parameter>
<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
    <maml:name>confirm</maml:name>
    <maml:description>
    <maml:para>Prompts you for confirmation before executing the command.</maml:para>
    </maml:description>
</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Parameters may be entered as strings on the command line or, if marked as 'allow pipeline input', may come from named properties of objects piped into this cmdlet.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None unless passthru is specified. Then the cleared object is passed down the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Set-Variable -detailed&quot;. For technical information, type &quot;Get-Help Set-Variable -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-variable -name desc -value &quot;a description&quot;
c:\PS&gt;get-variable -name desc</dev:code>
  			<dev:remarks>
				<maml:para>These commands set the value of the &quot;desc&quot; variable to &quot;a description&quot;, and then get the value of the variable.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>set-variable -name processes -value (Get-Process) -option constant -scope global -description &quot;All processes&quot; -passthru | format-list -property *</dev:code>
  			<dev:remarks>
				<maml:para>This command creates a global, read-only variable that contains all processes on the system, and then displays all properties of the variable.

The command uses the Set-Variable cmdlet to create the variable. It uses the Passthru parameter to create an object representing the new variable, and the pipeline operator (|) to pass the object to the Format list cmdlet. It uses the Property parameter of Format-List with a value of all (*) to display all properties of the newly created variable. 

The value, &quot;(Get-Process)&quot;, is enclosed in parentheses to insure that it is executed before being stored in the variable. Otherwise, the variable contains the words &quot;Get-Process&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Remove-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Variable</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Sort-Object
		</command:name>
		<maml:description>
			<maml:para>Sorts objects by property values.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>sort</command:verb>
		<command:noun>object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Sorts a set of objects by property values. You specify a property or set of properties to sort on by using the Property parameter. If multiple properties are specified, the objects are sorted by the first property. The additional properties are used only if there is at least one group of objects that have the same value for the first property. In that case, the groups are further sorted by the second property. This process continues until there are no more specified properties or no groups of objects.

Comparisons made while sorting are case-insensitive unless the CaseSensitive parameter is specified. The cmdlet sorts objects in ascending order, but you can change this default by specifying the Descending parameter. The Descending parameter applies to all of the properties used in the sorting process. To sort by some properties in ascending order and others in decending order, you must specify their property values by using a hashtable like the following: 

@{expression={$_.PropName},Descending=$true}. 

Specifying this hashtable as a property value causes the cmdlet to sort on the value of the PropName property in decending order.

If an object does not have one of the specified properties, the corresponding property value for that object is interpreted by the cmdlet as NULL. Regardless of the type of property, objects with a NULL value are placed at the end of the sort order.

If you do not specify any properties to sort by, the cmdlet will sort by using default methods that depend upon the type of object being sorted.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Sort-Object</maml:name>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
				<maml:name>property</maml:name>
				<maml:description><maml:para>Specifies a property or properties to use when sorting. The value of this parameter can be a hash table like @{Expression={$_.PropName}; Ascending=$false} or @{Expression={$_.PropName}; Ascending=$true}, letting you sort on the result of a script block and enabling you to specify a different sort order for each element used in the sort.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects to be sorted. You can either use this parameter or pipe an object to the cmdlet.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>culture</maml:name>
				<maml:description><maml:para>Specifies the cultural configuration to use when sorting.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>caseSensitive</maml:name>
				<maml:description><maml:para>Indicates that the sort should be case sensitive.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>unique</maml:name>
				<maml:description><maml:para>Sorts on only the unique values of properties.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>descending</maml:name>
				<maml:description><maml:para>Sorts the objects in descending order.</maml:para></maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="1">
			<maml:name>property</maml:name>
			<maml:description>
				<maml:para>Specifies a property or properties to use when sorting. The value of this parameter can be a hash table like @{Expression={$_.PropName}; Ascending=$false} or @{Expression={$_.PropName}; Ascending=$true}, letting you sort on the result of a script block and enabling you to specify a different sort order for each element used in the sort.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>entire input objects</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to be sorted. You can either use this parameter or pipe an object to the cmdlet.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>culture</maml:name>
			<maml:description>
				<maml:para>Specifies the cultural configuration to use when sorting.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Current Culture</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>caseSensitive</maml:name>
			<maml:description>
				<maml:para>Indicates that the sort should be case sensitive.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>unique</maml:name>
			<maml:description>
				<maml:para>Sorts on only the unique values of properties.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>descending</maml:name>
			<maml:description>
				<maml:para>Sorts the objects in descending order.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Sorted objects</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          The order of input objects is not preserved within groups of sorted objects.

When making comparisons to sort the input objects, the cmdlet tries to use the Compare method of each property. If a property does not implement IComparable, then the cmdlet converts its value to a string and uses the System.String Compare method. 

For more information, type &quot;Get-Help Sort-Object  -detailed&quot;. For technical information, type &quot;Get-Help Sort-Object -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem | sort-object</dev:code>
  			<dev:remarks>
				<maml:para>This command gets the sub-directories and files in the current directory. The sort-object cmdlet, used without parameters, displays results in alphabetical order by name.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Directory: Microsoft.Management.Automation.Core\FileSystem::C:\Ps

Mode                LastWriteTime     Length Name
----                -------------     ------ ----
-a---         9/13/2005   4:24 PM          0 0
-a---          9/6/2005   4:19 PM         12 a.csv
-a---         9/21/2005   3:49 PM        529 a.Ps
-a---         8/22/2005   4:14 PM         22 a.pl
-a---         9/27/2005  10:33 AM         24 a.txt
-a---         9/15/2005  10:31 AM        398 a.vbs
-a---         7/21/2005  12:39 PM      37066 a.xml
-a---         8/28/2005  11:30 PM       5412 a.xslt
-a---        10/25/2005   1:59 PM        125 AdamTravel.txt
-a---         7/21/2005   9:49 AM         59 add2Num.Ps
-a---         8/29/2005   5:42 PM       7111 add-content.xml
-a---         9/21/2005  12:46 PM       8771 aliens.Ps
-a---         8/10/2005   2:10 PM        798 array.xml
-a---          8/4/2004   5:00 AM        110 AUTORUN.INF
-a---          9/6/2005   4:20 PM        245 b.csv
...</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem | sort-object -property length</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the files in the current directory in ascending order by file length.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Mode                LastWriteTime     Length Name
----                -------------     ------ ----
-a---         8/17/2005   9:34 AM          0 gps.txt
-a---         9/13/2005   4:24 PM          0 0
-a---          8/4/2004   5:00 AM         10 WIN51
-a---          8/4/2004   5:00 AM         10 WIN51IP
-a---          8/4/2004   5:00 AM         10 WIN51IP.SP2
-a---          9/6/2005   4:19 PM         12 a.csv
-a---        12/10/2005   6:04 PM         22 testfile1.txt
-a---        12/10/2005   6:04 PM         22 test1.txt
...</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | sort-object -property WS | select-object -last 5</dev:code>
  			<dev:remarks>
				<maml:para>This command uses the get-process cmdlet to get a list of processes and pipe it to sort-object which sorts on the working set(WS) property. The result is piped to select-object which shows just the last 5 items in the list. Since sort-object returns a list in ascending order, this gives the processes with the highest memory use. The default display is a table.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Handles  NPM(K)    PM(K)      WS(K) VS(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
   2754     195    26748      38960   182   129.48   1292 svchost
    773      19    25108      41604   136   161.38   2956 explorer
    557      17    23864      50600   256    49.63   4388 WINWORD
   1581      67    81720      66332   450 1,563.48   3868 INFOPATH
    921      13    75112      78928   205    46.84    676 Ps</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 4 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-history | sort-object -descending</dev:code>
  			<dev:remarks>
				<maml:para>This command sorts HistoryInfo objects using the Id property as the default key.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Id CommandLine
-- -----------
51 get-history | sort -descending
50 get-history | sort -descending
49 get-history | sort -descending
48 get-history | sort -descending
47 get-history | sort -descending
46 get-history | sort -descending
45 get-history | sort -descending
44 cd \monad
43 get-childitem | sort-object
42 gci *.txt | Sort-Object @{Expression={$_.LastWriteTime-$_.CreationT...</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 5 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem *.txt | sort-object @{Expression={$_.LastWriteTime-$_.CreationTime}; Ascending=$false} | select-object LastWriteTime, CreationTime</dev:code>
  			<dev:remarks>
				<maml:para>This command sorts text files in descending order by the time span between CreationTime and LastWriteTime.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>LastWriteTime                           CreationTime
-------------                           ------------
2/21/2006 10:22:20 AM                   10/3/2005 4:19:40 PM
2/27/2006 8:14:24 AM                    2/23/2006 10:41:08 PM
2/24/2006 1:26:19 PM                    2/23/2006 11:23:36 PM
1/5/2006 12:01:35 PM                    1/5/2006 11:35:30 AM
2/24/2006 9:25:40 AM                    2/24/2006 9:22:24 AM
2/24/2006 9:40:01 AM                    2/24/2006 9:39:41 AM
2/21/2006 10:21:30 AM                   2/21/2006 10:21:30 AM</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-Unique</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Compare-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>ForEach-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Group-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Measure-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>New-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Select-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Tee-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Where-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Start-Sleep
		</command:name>
		<maml:description>
			<maml:para>Suspend shell, script, or runspace activity for the specified period of time.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>start</command:verb>
		<command:noun>sleep</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Start-Sleep cmdlet suspends shell, script, or runspace activity for the specified period of time. You can use it in a script to wait for an operation to complete, or in a loop, to wait a specific time before repeating an operation.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Start-Sleep</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>seconds</maml:name>
				<maml:description>
					<maml:para>Specifies how long the resource sleeps in seconds. You can omit the parameter name (-Seconds) or you can abbreviate it to &quot;-s&quot;.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Start-Sleep</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
				<maml:name>milliseconds</maml:name>
				<maml:description>
					<maml:para>Specifies how long the resource sleeps in miiliseconds. The parameter can be abbreviated to &quot;-m&quot;.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>seconds</maml:name>
			<maml:description>
				<maml:para>Specifies how long the resource sleeps in seconds. You can omit the parameter name (-Seconds) or you can abbreviate it to &quot;-s&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByPropertyName)" position="named">
			<maml:name>milliseconds</maml:name>
			<maml:description>
				<maml:para>Specifies how long the resource sleeps in miiliseconds. The parameter can be abbreviated to &quot;-m&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Int32</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Must an integer 0 or greater.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Start-Sleep -detailed&quot;. For technical information, type &quot;Get-Help Start-Sleep -full&quot;.

 When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

You can also refer to Start-Sleep by its built-in alias, &quot;sleep&quot;. For more information, see About_Alias.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Start-Sleep -s 15</dev:code>
  			<dev:remarks>
				<maml:para>This command makes the shell sleep for 15 seconds.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>      </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>Start-Sleep -m 500</dev:code>
  			<dev:remarks>
				<maml:para>This command makes the command shell sleep for 1/2 second (500 milliseconds).</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>      </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText></maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Tee-Object
		</command:name>
		<maml:description>
			<maml:para>Pipes object input to a file or variable, then passes the input along the pipeline. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>tee</command:verb>
		<command:noun>object</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Pipes object input to a file or variable, then passes the input along the pipeline. 

To pipe the input to a file, specify the FilePath parameter. Piped objects are formatted by using the default formatter before they are stored in the specified file. 

To store a reference to the input objects in a variable, specify the Variable parameter. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Tee-Object</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>filePath</maml:name>
				<maml:description>
					<maml:para>Specifies the file where the cmdlet stores the object. Accepts wildcards that resolve to a single file.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Specifies the object input to the cmdlet. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Tee-Object</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>variable</maml:name>
				<maml:description>
					<maml:para>Assigns a reference to the input objects to the specified variable.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Specifies the object input to the cmdlet. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the object input to the cmdlet. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>filePath</maml:name>
			<maml:description>
				<maml:para>Specifies the file where the cmdlet stores the object. Accepts wildcards that resolve to a single file.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>variable</maml:name>
			<maml:description>
				<maml:para>Assigns a reference to the input objects to the specified variable.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Any object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Tee-Object -detailed&quot;. For technical information, type &quot;Get-Help Tee-Object -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

Using Tee-Object with the FilePath parameter has the same effect as the following script block {$_ |out-file FilePath }.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process | tee-object -filepath C:\Test1\testfile2.txt </dev:code>
  			<dev:remarks>
				<maml:para>This command gets a list of the processes running on the computer and sends the result to a file. Since there is no second path listed, the result will be displayed in the console.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Handles  NPM(K)    PM(K)      WS(K) VM(M)   CPU(s)     Id ProcessName
-------  ------    -----      ----- -----   ------     -- -----------
   83       4     2300       4520    39     0.30   4032 00THotkey
  272       6     1400       3944    34     0.06   3088 alg
   81       3      804       3284    21     2.45    148 ApntEx
   81       4     2008       5808    38     0.75   3684 Apoint
...</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-process notepad | tee-object -variable proc | 
select-object processname,handles</dev:code>
  			<dev:remarks>
				<maml:para>This command get a list of the processes running on the computer and sends the result to a variable named proc. It then pipes the resulting objects along to Select-Object, which selects the ProcessName and Handles property. Note that the $proc variable includes the default information returned by Get-Process.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>ProcessName                              Handles
-----------                              -------
notepad                                  43
notepad                                  37
notepad                                  38
notepad                                  38</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Write-Output</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-File</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Trace-Command
		</command:name>
		<maml:description>
			<maml:para>The Trace-Command cmdlet configures and starts a trace of the specified expression or command.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>trace</command:verb>
		<command:noun>command</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Trace-Command cmdlet configures and starts a trace of the specified expression or command. It works like Set-TraceSource, except that it applies only to the specified command.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Trace-Command</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Determines which Windows PowerShell components are traced. Enter the name of the trace source of each component. Wildcards are permitted. To find the trace sources on your computer, type &quot;Get-TraceSource&quot;.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>expression</maml:name>
				<maml:description>
					<maml:para>Specifies the expression that is being processed during the trace. Enclose the expression in curly braces ({}).</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>option</maml:name>
				<maml:description>
					<maml:para>Determines the type of events that are traced. 

The valid values are: None, Constructor, Dispose, Finalizer, Method, Property, Delegates, Events, Exception, Lock, Error, Errors, Warning, Verbose, WriteLine, Data, Scope, ExecutionFlow, Assert, and All. &quot;All&quot; is the default. 

The following values are combinations of other values:

-- ExecutionFlow: (Constructor, Dispose, Finalizer, Method, Delegates, Events, and Scope)

-- Data: (Constructor, Dispose, Finalizer, Property, Verbose, and WriteLine)

-- Errors: (Error and Exception).

To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as &quot;Constructor,Dispose&quot;.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >None</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Constructor</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Dispose</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Finalizer</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Method</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Property</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Delegates</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Events</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Exception</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Lock</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Error</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Errors</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Warning</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Verbose</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >WriteLine</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Data</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Scope</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ExecutionFlow</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Assert</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>filePath</maml:name>
				<maml:description>
					<maml:para>Sends the trace output to specified file. This parameter also selects the file trace listener.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>debugger</maml:name>
				<maml:description>
					<maml:para>Sends the trace output to the debugger. You can view the output in any user-mode or kernel mode debugger or in Visual Studio. This parameter also selects the default trace listener.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>pSHost</maml:name>
				<maml:description>
					<maml:para>Sends the trace output to the Windows PowerShell host. This parameter also selects the PSHost trace listener.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>listenerOption</maml:name>
				<maml:description>
					<maml:para>Adds optional data to the prefix of each trace message in the output. The valid values are None, LogicalOperationStack, DateTime, Timestamp, ProcessId, ThreadId, and Callstack. &quot;None&quot; is the default.

To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as &quot;ProcessID,ThreadID&quot;.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >None</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >LogicalOperationStack</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DateTime</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Timestamp</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ProcessId</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ThreadId</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Callstack</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Provides input to the expression that is being processed during the trace. 

You can enter a variable that represents the input that the expression accepts, or pass an object through the pipeline.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Trace-Command</maml:name>
			<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="1">
				<maml:name>name</maml:name>
				<maml:description>
					<maml:para>Determines which Windows PowerShell components are traced. Enter the name of the trace source of each component. Wildcards are permitted. To find the trace sources on your computer, type &quot;Get-TraceSource&quot;.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>command</maml:name>
				<maml:description>
					<maml:para>Specifies a command that is being processed during the trace.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>option</maml:name>
				<maml:description>
					<maml:para>Determines the type of events that are traced. 

The valid values are: None, Constructor, Dispose, Finalizer, Method, Property, Delegates, Events, Exception, Lock, Error, Errors, Warning, Verbose, WriteLine, Data, Scope, ExecutionFlow, Assert, and All. &quot;All&quot; is the default. 

The following values are combinations of other values:

-- ExecutionFlow: (Constructor, Dispose, Finalizer, Method, Delegates, Events, and Scope)

-- Data: (Constructor, Dispose, Finalizer, Property, Verbose, and WriteLine)

-- Errors: (Error and Exception).

To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as &quot;Constructor,Dispose&quot;.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >None</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Constructor</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Dispose</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Finalizer</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Method</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Property</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Delegates</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Events</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Exception</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Lock</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Error</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Errors</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Warning</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Verbose</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >WriteLine</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Data</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Scope</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ExecutionFlow</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Assert</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >All</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
				<maml:name>filePath</maml:name>
				<maml:description>
					<maml:para>Sends the trace output to specified file. This parameter also selects the file trace listener.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>debugger</maml:name>
				<maml:description>
					<maml:para>Sends the trace output to the debugger. You can view the output in any user-mode or kernel mode debugger or in Visual Studio. This parameter also selects the default trace listener.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>pSHost</maml:name>
				<maml:description>
					<maml:para>Sends the trace output to the Windows PowerShell host. This parameter also selects the PSHost trace listener.</maml:para>
				</maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>listenerOption</maml:name>
				<maml:description>
					<maml:para>Adds optional data to the prefix of each trace message in the output. The valid values are None, LogicalOperationStack, DateTime, Timestamp, ProcessId, ThreadId, and Callstack. &quot;None&quot; is the default.

To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as &quot;ProcessID,ThreadID&quot;.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >None</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >LogicalOperationStack</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DateTime</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Timestamp</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ProcessId</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ThreadId</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Callstack</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
				<maml:name>inputObject</maml:name>
				<maml:description>
					<maml:para>Provides input to the expression that is being processed during the trace. 

You can enter a variable that represents the input that the expression accepts, or pass an object through the pipeline.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">psobject</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
				<maml:name>argumentList</maml:name>
				<maml:description>
					<maml:para>Specifies the parameters and parameter values for the command being traced. This feature is especially useful for debugging dynamic parameters.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>force</maml:name>
				<maml:description>
					<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
				</maml:description>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="true" pipelineInput="false" position="1">
			<maml:name>name</maml:name>
			<maml:description>
				<maml:para>Determines which Windows PowerShell components are traced. Enter the name of the trace source of each component. Wildcards are permitted. To find the trace sources on your computer, type &quot;Get-TraceSource&quot;.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>expression</maml:name>
			<maml:description>
				<maml:para>Specifies the expression that is being processed during the trace. Enclose the expression in curly braces ({}).</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">scriptblock</command:parameterValue>
			<dev:type>
				<maml:name>scriptblock</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Null</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>option</maml:name>
			<maml:description>
				<maml:para>Determines the type of events that are traced. 

The valid values are: None, Constructor, Dispose, Finalizer, Method, Property, Delegates, Events, Exception, Lock, Error, Errors, Warning, Verbose, WriteLine, Data, Scope, ExecutionFlow, Assert, and All. &quot;All&quot; is the default. 

The following values are combinations of other values:

-- ExecutionFlow: (Constructor, Dispose, Finalizer, Method, Delegates, Events, and Scope)

-- Data: (Constructor, Dispose, Finalizer, Property, Verbose, and WriteLine)

-- Errors: (Error and Exception).

To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as &quot;Constructor,Dispose&quot;.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">PSTraceSourceOptions</command:parameterValue>
			<dev:type>
				<maml:name>PSTraceSourceOptions</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>All</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>None</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Constructor</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Dispose</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Finalizer</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Method</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Property</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Delegates</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Events</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Exception</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Lock</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Error</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Errors</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Warning</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Verbose</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>WriteLine</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Data</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Scope</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ExecutionFlow</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Assert</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>All</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="true" pipelineInput="false" position="named">
			<maml:name>filePath</maml:name>
			<maml:description>
				<maml:para>Sends the trace output to specified file. This parameter also selects the file trace listener.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>debugger</maml:name>
			<maml:description>
				<maml:para>Sends the trace output to the debugger. You can view the output in any user-mode or kernel mode debugger or in Visual Studio. This parameter also selects the default trace listener.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>pSHost</maml:name>
			<maml:description>
				<maml:para>Sends the trace output to the Windows PowerShell host. This parameter also selects the PSHost trace listener.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>listenerOption</maml:name>
			<maml:description>
				<maml:para>Adds optional data to the prefix of each trace message in the output. The valid values are None, LogicalOperationStack, DateTime, Timestamp, ProcessId, ThreadId, and Callstack. &quot;None&quot; is the default.

To specify multiple options, separate them with commas, but with no spaces, and enclose them in quotation marks, such as &quot;ProcessID,ThreadID&quot;.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="true">TraceOptions</command:parameterValue>
			<dev:type>
				<maml:name>TraceOptions</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>TraceOptions.None</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>None</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>LogicalOperationStack</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DateTime</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Timestamp</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ProcessId</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ThreadId</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Callstack</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>command</maml:name>
			<maml:description>
				<maml:para>Specifies a command that is being processed during the trace.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="named">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Provides input to the expression that is being processed during the trace. 

You can enter a variable that represents the input that the expression accepts, or pass an object through the pipeline.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">psobject</command:parameterValue>
			<dev:type>
				<maml:name>psobject</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="false" pipelineInput="false" position="named">
			<maml:name>argumentList</maml:name>
			<maml:description>
				<maml:para>Specifies the parameters and parameter values for the command being traced. This feature is especially useful for debugging dynamic parameters.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">Object[]</command:parameterValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>force</maml:name>
			<maml:description>
				<maml:para>Overrides restrictions that prevent the command from succeeding, just so the changes do not compromise security. For example, Force will override the read-only attribute or create directories to complete a file path, but it will not attempt to change file permissions.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Objects that represent the command or expression being traced</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>The output of the expression or command</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Trace-Command -detailed&quot;. For technical information, type &quot;Get-Help Trace-Command -full&quot;.

Tracing is a method that developers use to debug and refine programs. When tracing, the program generates detailed messages about each step in its internal processing. 

The Windows PowerShell tracing cmdlets are designed to help Windows PowerShell developers, but they are available to all users. They let you monitor nearly every aspect of the functionality of the shell. 

To find the Windows PowerShell components that are enabled for tracing, type &quot;Get-Help Get-TraceSource.&quot;

A &quot;trace source&quot; is the part of each Windows PowerShell component that manages tracing and generates trace messages for the component. To trace a component, you identify its trace source.

A &quot;trace listener&quot; receives the output of the trace and displays it to the user. You can elect to send the trace data to a user-mode or kernel-mode debugger, to the host or console, to a file, or to a custom listener derived from the System.Diagnostics.TraceListener class.

When you use the Command parameter set, Windows PowerShell processes the command just as it would be processed in a pipeline. For example, command discovery is not repeated for each incoming object.

The names of the Name, Expression, Option, and Command parameters are optional. If you omit the parameter names, the unnamed parameter values must appear in this order: Name, Expression, Option or Name, Command,-Option . If you include the parameter names, the parameters can appear in any order.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>trace-command -name metadata,parameterbinding,cmdlet -expression {get-process notepad} -pshost</dev:code>
  			<dev:remarks>
				<maml:para>This command starts a trace of metadata processing, parameter binding, and cmdlet creation and destruction of the &quot;get-process notepad&quot; expression. It uses the Name parameter to specify the trace sources, the Expression parameter to specify the command, and the PSHost parameter to send the output to the console. Because it does not specify any tracing options or listener options, the command uses the defaults, &quot;All&quot; for the tracing options and &quot;None&quot; for the listener options.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>trace-command -name commandprocessor,pipelineprocessor -command get-alias -argumentlist &quot;ghy&quot; -option executionflow -listenerOption &quot;timestamp,callstack&quot; -filepath c:\ps-test\debug.txt</dev:code>
  			<dev:remarks>
				<maml:para>This command starts a trace of the command processor and pipeline processor while processing the &quot;get-alias cd&quot; command. It uses the Name parameter to specify the trace sources, the Command parameter to specify the command, the ArgumentList parameter to specify the parameters of the Get-Alias command, the Option parameter to specify tracing options, and the ListenerOption parameter to specify the fields in the trace message prefix. The FilePath parameter send the output to the Debug.txt file.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$a = &quot;i*&quot;

trace-command parameterbinding {get-alias $input} -pshost -inputobject $a</dev:code>
  			<dev:remarks>
				<maml:para>These commands trace the actions of the ParameterBinding operations of Windows PowerShell while it processes a Get-Alias expression that takes input from the pipeline.

In Trace-Command, the InputObject parameter passes an object to the expression that is being processed during the trace. 

The first command stores the string &quot;i*&quot; in the $a variable. The second command uses the Trace-Command cmdlet with the ParameterBinding trace source. The PSHost parameter sends the output to the console. 

The expression being processed is &quot;get-alias $input&quot;, where the $input variable is associated with the InputObject parameter. The InputObject parameter passes the variable $a to the expression. In effect, the command being processed during the trace is &quot;get-alias -inputobject $a&quot; or &quot;$a | get-alias&quot;.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Get-TraceSource</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Set-TraceSource</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Update-FormatData
		</command:name>
		<maml:description>
			<maml:para>Updates and appends format data files.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>update</command:verb>
		<command:noun>formatdata</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>The Windows PowerShell directory contains several format files. They have the file extension .ps1xml and are text files in XML format. When the shell starts, it reads the format data from those files. You can build your own format .ps1xml files. You can use the Update-FormatData cmdlet to add those files to the format data that it loads in the shell. You do not need to restart the shell to update the format data.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Update-FormatData</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>appendPath</maml:name>
				<maml:description><maml:para>Specifies the path to optional format.ps1xml files which will be included in the list of files loaded. These are processed after the built-in files are loaded.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>prependPath</maml:name>
				<maml:description><maml:para>Specifies the path to optional format.ps1xml files which will be included in the list of files loaded. These files are processed in the order they are specified and before the built-in files are loaded.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>appendPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to optional format.ps1xml files which will be included in the list of files loaded. These are processed after the built-in files are loaded.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>prependPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to optional format.ps1xml files which will be included in the list of files loaded. These files are processed in the order they are specified and before the built-in files are loaded.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Specifically, objects that have a property Path, AppendPath, or PSPath
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Update-FormatData -detailed&quot;. For technical information, type &quot;Get-Help Update-FormatData  -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>update-formatdata</dev:code>
  			<dev:remarks>
				<maml:para>This command updates the shell format configuration files from the built-in format.ps1xml files.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>         </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>update-typedata -prependpath RedFormat.format.Ps1xml,GreyFormat.format.Ps1xml</dev:code>
  			<dev:remarks>
				<maml:para>This command updates the shell format configuration from the built-in format files and adds format configuration information from two additional files. The Prependpath parameter causes the shell to process the new files before the built-in files.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>  </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Update-TypeData</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Update-TypeData
		</command:name>
		<maml:description>
			<maml:para>Updates the current extended type configuration by reloading the *.types.ps1xml files into memory.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>update</command:verb>
		<command:noun>typedata</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Updates the current extended type configuration by reloading the *.types.ps1xml files into memory. Extended type information is normally loaded when Windows PowerShell requires the type information it contains. The Update-TypeData cmdlet can be used to preload all type information. It is particularly useful when you are developing types and want to load those new types for testing purposes.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Update-TypeData</maml:name>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
				<maml:name>appendPath</maml:name>
				<maml:description><maml:para>Specifies the path to optional .ps1xml files which will be included in the list of files loaded. These are processed after the built-in files are loaded.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
				<maml:name>prependPath</maml:name>
				<maml:description><maml:para>Specifies the path to optional .ps1xml files which will be included in the list of files loaded. However, these files are processed in the order they are specified and before the built-in files are loaded.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="true (ByValue, ByPropertyName)" position="1">
			<maml:name>appendPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to optional .ps1xml files which will be included in the list of files loaded. These are processed after the built-in files are loaded.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="true" globbing="true" pipelineInput="false" position="named">
			<maml:name>prependPath</maml:name>
			<maml:description>
				<maml:para>Specifies the path to optional .ps1xml files which will be included in the list of files loaded. However, these files are processed in the order they are specified and before the built-in files are loaded.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">string[]</command:parameterValue>
			<dev:type>
				<maml:name>string[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Specifically, objects that have a property Path, AppendPath, or PSPath
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						None
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Update-TypeData -detailed&quot;. For technical information, type &quot;Get-Help Update-TypeData -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>update-typedata</dev:code>
  			<dev:remarks>
				<maml:para>This example updates the extended type configuration from the *.types.ps1xml files.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>    </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>update-typedata -prependpath typesA.types.Ps1xml, typesB.types.Ps1xml</dev:code>
  			<dev:remarks>
				<maml:para>This example updates the extended type configuration from the *.types.ps1xml files, processing the typesA and typesB files first.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>  </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Update-FormatData</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Debug
		</command:name>
		<maml:description>
			<maml:para>Writes a debug message to the host display.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>write</command:verb>
		<command:noun>debug</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Writes debug messages to the console from a script or command. Whether the message is displayed in the console depends upon the value of the $DebugPreference variable. Type $DebugPreference to see its current value. To set the variable for the session, type $DebugPreference  = &quot;&lt;value&gt;&quot;. The valid values are: SilentlyContinue, Stop, Continue and Inquire. If the value is SilentlyContinue, Write-Debug does not display a message to the console.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Debug</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>message</maml:name>
				<maml:description><maml:para>Specifies the debug message to send to the console.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>message</maml:name>
			<maml:description>
				<maml:para>Specifies the debug message to send to the console.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>None</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Write-Debug -detailed&quot;. For technical information, type &quot;Get-Help Write-Debug -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$DebugPreference = &quot;Continue&quot;
Write-Debug &quot;This script has attempted to open file xyx and cannot.&quot;
$DebugPreference = &quot;SilentlyContinue&quot;
Write-Debug &quot;This is another debug statement.&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command writes a debug message which will be shown or not depending upon the value of $DebugPreference. The value &quot;SilentlyContinue&quot; means do not show the statement.  The Value &quot;Contiue&quot; means show the value.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>DEBUG: This script has attempted to open file xyx and cannot.</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Write-Verbose</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Error</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Progress</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Output</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Warning</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Error
		</command:name>
		<maml:description>
			<maml:para>Writes an object to the error pipeline.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>write</command:verb>
		<command:noun>error</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Writes an object to the error pipeline. Lets you write error messages along with other information such as an id, object data, and suggested actions.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Error</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>message</maml:name>
				<maml:description>
					<maml:para>Specifies the message text of the error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>category</maml:name>
				<maml:description>
					<maml:para>Specifies the category of the error.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >NotSpecified</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OpenError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >CloseError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DeviceError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DeadlockDetected</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >InvalidArgument</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >InvalidData</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >InvalidOperation</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >InvalidResult</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >InvalidType</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >MetadataError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >NotImplemented</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >NotInstalled</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ObjectNotFound</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OperationStopped</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OperationTimeout</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >SyntaxError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ParserError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >PermissionDenied</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ResourceBusy</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ResourceExists</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ResourceUnavailable</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ReadError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >WriteError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >FromStdErr</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >SecurityError</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>errorId</maml:name>
				<maml:description>
					<maml:para>Specifies an ID to associate with the error. It should be a string unique to the error.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>targetObject</maml:name>
				<maml:description>
					<maml:para>Specifies the object with which the error is associated.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>recommendedAction</maml:name>
				<maml:description>
					<maml:para>Describes the recommended response to the error.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>categoryActivity</maml:name>
				<maml:description>
					<maml:para>Describes the action which overrides the ErrorCategoryInfo default.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>categoryReason</maml:name>
				<maml:description>
					<maml:para>Describes the reason the ErrorCategoryInfo default is overridden.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>categoryTargetName</maml:name>
				<maml:description>
					<maml:para>Specifies the target name of the ErrorCategoryInfo override.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>categoryTargetType</maml:name>
				<maml:description>
					<maml:para>Specifies the target type to override the ErrorCategoryInfo default.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Write-Error</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>message</maml:name>
				<maml:description>
					<maml:para>Specifies the message text of the error. </maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>exception</maml:name>
				<maml:description>
					<maml:para>Specifies the exception type of the error. This parameter can be used in place of Message and ErrorRecord, in which case it should appear as the first parameter of the parameter set.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Exception</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>category</maml:name>
				<maml:description>
					<maml:para>Specifies the category of the error.</maml:para>
				</maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >NotSpecified</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OpenError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >CloseError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DeviceError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DeadlockDetected</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >InvalidArgument</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >InvalidData</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >InvalidOperation</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >InvalidResult</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >InvalidType</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >MetadataError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >NotImplemented</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >NotInstalled</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ObjectNotFound</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OperationStopped</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >OperationTimeout</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >SyntaxError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ParserError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >PermissionDenied</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ResourceBusy</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ResourceExists</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ResourceUnavailable</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >ReadError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >WriteError</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >FromStdErr</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >SecurityError</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>errorId</maml:name>
				<maml:description>
					<maml:para>Specifies an ID to associate with the error. It should be a string unique to the error.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>targetObject</maml:name>
				<maml:description>
					<maml:para>Specifies the object with which the error is associated.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>recommendedAction</maml:name>
				<maml:description>
					<maml:para>Describes the recommended response to the error.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>categoryActivity</maml:name>
				<maml:description>
					<maml:para>Describes the action which overrides the ErrorCategoryInfo default.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>categoryReason</maml:name>
				<maml:description>
					<maml:para>Describes the reason the ErrorCategoryInfo default is overridden.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>categoryTargetName</maml:name>
				<maml:description>
					<maml:para>Specifies the target name of the ErrorCategoryInfo override.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>categoryTargetType</maml:name>
				<maml:description>
					<maml:para>Specifies the target type to override the ErrorCategoryInfo default.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
		<command:syntaxItem>
			<maml:name>Write-Error</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>errorRecord</maml:name>
				<maml:description>
					<maml:para>Specifies an error record describing details about the error. This parameter can be used in place of the Exception and Message parameters, in which case it is the first parameter of the parameter set.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">ErrorRecord</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>recommendedAction</maml:name>
				<maml:description>
					<maml:para>Describes the recommended response to the error.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>categoryActivity</maml:name>
				<maml:description>
					<maml:para>Describes the action which overrides the ErrorCategoryInfo default.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>categoryReason</maml:name>
				<maml:description>
					<maml:para>Describes the reason the ErrorCategoryInfo default is overridden.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>categoryTargetName</maml:name>
				<maml:description>
					<maml:para>Specifies the target name of the ErrorCategoryInfo override.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>categoryTargetType</maml:name>
				<maml:description>
					<maml:para>Specifies the target type to override the ErrorCategoryInfo default.</maml:para>
				</maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>message</maml:name>
			<maml:description>
				<maml:para>Specifies the message text of the error. </maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>category</maml:name>
			<maml:description>
				<maml:para>Specifies the category of the error.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ErrorCategory</command:parameterValue>
			<dev:type>
				<maml:name>ErrorCategory</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>NotSpecified</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>OpenError</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>CloseError</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DeviceError</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DeadlockDetected</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>InvalidArgument</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>InvalidData</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>InvalidOperation</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>InvalidResult</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>InvalidType</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>MetadataError</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>NotImplemented</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>NotInstalled</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ObjectNotFound</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>OperationStopped</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>OperationTimeout</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>SyntaxError</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ParserError</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>PermissionDenied</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ResourceBusy</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ResourceExists</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ResourceUnavailable</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>ReadError</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>WriteError</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>FromStdErr</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>SecurityError</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>errorId</maml:name>
			<maml:description>
				<maml:para>Specifies an ID to associate with the error. It should be a string unique to the error.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>targetObject</maml:name>
			<maml:description>
				<maml:para>Specifies the object with which the error is associated.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>recommendedAction</maml:name>
			<maml:description>
				<maml:para>Describes the recommended response to the error.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>categoryActivity</maml:name>
			<maml:description>
				<maml:para>Describes the action which overrides the ErrorCategoryInfo default.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>categoryReason</maml:name>
			<maml:description>
				<maml:para>Describes the reason the ErrorCategoryInfo default is overridden.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>From ErrorCategoryInfo</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>categoryTargetName</maml:name>
			<maml:description>
				<maml:para>Specifies the target name of the ErrorCategoryInfo override.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>From ErrorCategoryInfo</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>categoryTargetType</maml:name>
			<maml:description>
				<maml:para>Specifies the target type to override the ErrorCategoryInfo default.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>exception</maml:name>
			<maml:description>
				<maml:para>Specifies the exception type of the error. This parameter can be used in place of Message and ErrorRecord, in which case it should appear as the first parameter of the parameter set.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Exception</command:parameterValue>
			<dev:type>
				<maml:name>Exception</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>errorRecord</maml:name>
			<maml:description>
				<maml:para>Specifies an error record describing details about the error. This parameter can be used in place of the Exception and Message parameters, in which case it is the first parameter of the parameter set.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ErrorRecord</command:parameterValue>
			<dev:type>
				<maml:name>ErrorRecord</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Any</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Error object</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Write-Error -detailed&quot;. For technical information, type &quot;Get-Help Write-Error -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>get-childitem | foreach-object { if ($_.gettype().tostring() -eq &quot;Microsoft.Win32.RegistryKey&quot;) {write-error
&quot;Out-of-band object&quot; -errorID B1 -targetobject $_ } else {$_ } }</dev:code>
  			<dev:remarks>
				<maml:para>This command writes an object to the error pipeline if the Get-ChildItem cmdlet returns an object of type Microsoft.Win32.Registry, which it will do if the command is run within the namespace of the Registry provider.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Write-Debug</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Verbose</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Output</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Progress</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Warning</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Host
		</command:name>
		<maml:description>
			<maml:para>Displays objects by using the host user interface</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>write</command:verb>
		<command:noun>host</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Displays objects by using the host user interface. Write-Host creates a customized host window. You can specify the color of text in that windows by using the ForegroundColor parameter and you can specify the background color of the window by using the BackgroundColor parameter. The Separator parameter lets you specify a string to use to separate displayed objects.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Host</maml:name>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>object</maml:name>
				<maml:description><maml:para>Objects to display in the console.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>noNewLine</maml:name>
				<maml:description><maml:para>Specifies that the content displayed in the console does not end with a newline character.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>separator</maml:name>
				<maml:description><maml:para>String to output between objects displayed on the console.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>foregroundcolor</maml:name>
				<maml:description><maml:para>Specifies the text color.</maml:para></maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Black</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkBlue</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkGreen</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkCyan</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkRed</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkMagenta</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkYellow</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Gray</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkGray</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Blue</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Green</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Cyan</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Red</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Magenta</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Yellow</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >White</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>backgroundColor</maml:name>
				<maml:description><maml:para>Specifies the background color.</maml:para></maml:description>
				<command:parameterValueGroup>
				<command:parameterValue required="false"  variableLength="false" >Black</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkBlue</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkGreen</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkCyan</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkRed</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkMagenta</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkYellow</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Gray</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >DarkGray</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Blue</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Green</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Cyan</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Red</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Magenta</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >Yellow</command:parameterValue>
				<command:parameterValue required="false"  variableLength="false" >White</command:parameterValue>
				</command:parameterValueGroup>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>object</maml:name>
			<maml:description>
				<maml:para>Objects to display in the console.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Any</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>noNewLine</maml:name>
			<maml:description>
				<maml:para>Specifies that the content displayed in the console does not end with a newline character.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>separator</maml:name>
			<maml:description>
				<maml:para>String to output between objects displayed on the console.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">Object</command:parameterValue>
			<dev:type>
				<maml:name>Object</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>One space</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>foregroundcolor</maml:name>
			<maml:description>
				<maml:para>Specifies the text color.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ConsoleColor</command:parameterValue>
			<dev:type>
				<maml:name>ConsoleColor</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Host-defined</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Black</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkBlue</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkGreen</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkCyan</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkRed</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkMagenta</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkYellow</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Gray</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkGray</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Blue</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Green</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Cyan</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Red</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Magenta</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Yellow</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>White</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>backgroundColor</maml:name>
			<maml:description>
				<maml:para>Specifies the background color.</maml:para>
				<maml:para>The following lists the acceptable values for this parameter:</maml:para>				
			</maml:description>
			<command:parameterValue required="true" variableLength="false">ConsoleColor</command:parameterValue>
			<dev:type>
				<maml:name>ConsoleColor</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>Host-defined</dev:defaultValue>
			<dev:possibleValues>
				<dev:possibleValue>
					<dev:value>Black</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkBlue</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkGreen</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkCyan</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkRed</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkMagenta</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkYellow</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Gray</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>DarkGray</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Blue</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Green</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Cyan</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Red</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Magenta</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>Yellow</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
				<dev:possibleValue>
					<dev:value>White</dev:value>
					<maml:description>
					    <maml:para></maml:para>
					</maml:description>
				</dev:possibleValue>
			</dev:possibleValues>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Any</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						Output will go to the host console and not the pipeline.
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Write-Host -detailed&quot;. For technical information, type &quot;Get-Help Write-Host -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>write-host &quot;no newline test&quot; -nonewline</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the input to the console, but because of the nonewline parameter, the output is followed directly by the prompt.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>       </maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>write-host (2,4,6,8,10,12) -Separator &quot;, +2= &quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the even numbers from 2 through 12. The Separator parameter is used to add the string , +2= (comma, space, +, 2, =, space).</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>2, +2= 4, +2= 6, +2= 8, +2= 10, +2= 12</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>write-host (2,4,6,8,10,12) -Separator &quot;, -&gt; &quot; -foregroundcolor DarkGreen -backgroundcolor white</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the even numbers from 2 through 12. It uses the Foregroundcolor parameter to output dark green text and the Backgroundcolor parameter to display a white background.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Write-Verbose</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Error</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Progress</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Debug</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>write-Output</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Warning</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Out-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Clear-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Output
		</command:name>
		<maml:description>
			<maml:para>Writes objects to the success pipeline. </maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>write</command:verb>
		<command:noun>output</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Writes objects to the success pipeline. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Output</maml:name>
			<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>inputObject</maml:name>
				<maml:description><maml:para>Specifies the objects to send along the pipeline. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="true" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>inputObject</maml:name>
			<maml:description>
				<maml:para>Specifies the objects to send along the pipeline. Enter a variable that contains the objects or type a command or expression that gets the objects.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="true">PSObject[]</command:parameterValue>
			<dev:type>
				<maml:name>PSObject[]</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						Can be any object or array of objects
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>Object[]</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						The input object
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Write-Output -detailed&quot;. For technical information, type &quot;Get-Help Write-Output -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>write-output &quot;test output&quot; | get-member</dev:code>
  			<dev:remarks>
				<maml:para>This command pipes the string &quot;test output&quot; to the Get-Member cmdlet which displays the members of the String class, demonstrating that the string was passed along the pipeline.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Write-Debug</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Verbose</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Error</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Progress</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Warning</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Tee-Object</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Progress
		</command:name>
		<maml:description>
			<maml:para>Displays a progress bar within a Windows PowerShell command window.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>write</command:verb>
		<command:noun>progress</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Displays a progress bar within a Windows PowerShell command window. Whether the progress bar is displayed is controlled by the $ProgressPreference variable. To see the value of that variable, type $ProgressPreference. Valid values for the variable are: SilentlyContinue, Continue, Stop and Inquire. If the value is set to SilentlyContinue, no progress information is displayed in the console. To set the value of variable for the session, type $ProgressPreference = &quot;&lt;value&gt;&quot;. Write-Progress can use data about the state of a running command or script to provide a visual indication of progress within the console window.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Progress</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
				<maml:name>activity</maml:name>
				<maml:description><maml:para>Specifies a string that describes the activity about which progress is being reported. It appears as the first heading above the progress bar.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
				<maml:name>status</maml:name>
				<maml:description><maml:para>Specifies a string that describes current state of the activity about which progress is being reported. It appears as the second heading above the progress bar.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
				<maml:name>id</maml:name>
				<maml:description><maml:para>Specifies the activity identifier for this progress record.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>percentComplete</maml:name>
				<maml:description><maml:para>Specifies the percentage of the activity that is completed. Use the value -1 if the percentage complete is unknown or not applicable.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>secondsRemaining</maml:name>
				<maml:description><maml:para>Specifies the projected number of seconds remaining until the activity is completed. Use the value -1 if the number of seconds remaining is unknown or not applicable.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>currentOperation</maml:name>
				<maml:description><maml:para>Describes the operation that is currently taking place.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>parentId</maml:name>
				<maml:description><maml:para>Identifies the parent activity of the current activity. Use the value -1 if the current activity has no parent activity.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>completed</maml:name>
				<maml:description><maml:para>Indicates whether the progress bar is visible. If set to false, display progress information.</maml:para></maml:description>
			</command:parameter>
			<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
				<maml:name>sourceId</maml:name>
				<maml:description><maml:para>Identifies the source of the record</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="1">
			<maml:name>activity</maml:name>
			<maml:description>
				<maml:para>Specifies a string that describes the activity about which progress is being reported. It appears as the first heading above the progress bar.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="false" position="2">
			<maml:name>status</maml:name>
			<maml:description>
				<maml:para>Specifies a string that describes current state of the activity about which progress is being reported. It appears as the second heading above the progress bar.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="3">
			<maml:name>id</maml:name>
			<maml:description>
				<maml:para>Specifies the activity identifier for this progress record.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>percentComplete</maml:name>
			<maml:description>
				<maml:para>Specifies the percentage of the activity that is completed. Use the value -1 if the percentage complete is unknown or not applicable.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>-1</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>secondsRemaining</maml:name>
			<maml:description>
				<maml:para>Specifies the projected number of seconds remaining until the activity is completed. Use the value -1 if the number of seconds remaining is unknown or not applicable.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>-1</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>currentOperation</maml:name>
			<maml:description>
				<maml:para>Describes the operation that is currently taking place.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>-1</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>parentId</maml:name>
			<maml:description>
				<maml:para>Identifies the parent activity of the current activity. Use the value -1 if the current activity has no parent activity.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>-1</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>completed</maml:name>
			<maml:description>
				<maml:para>Indicates whether the progress bar is visible. If set to false, display progress information.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">SwitchParameter</command:parameterValue>
			<dev:type>
				<maml:name>SwitchParameter</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>False</dev:defaultValue>
		</command:parameter>
		<command:parameter required="false" variableLength="false" globbing="false" pipelineInput="false" position="named">
			<maml:name>sourceId</maml:name>
			<maml:description>
				<maml:para>Identifies the source of the record</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">int</command:parameterValue>
			<dev:type>
				<maml:name>int</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>ProgressRecord objects</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>No output is sent to the pipeline.</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Write-Progress -detailed&quot;. For technical information, type &quot;Get-Help Write-Progress -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.

The parameters of the cmdlet correspond to the properties of the ProgressRecord class in the Software Development Kit (SDK).
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>for($i = 1; $i -lt 101; $i++ ) 
{for($j=0;$j -lt 10000;$j++) {} write-progress &quot;Search in Progress&quot; &quot;% Complete:&quot; -perc $i;}</dev:code>
  			<dev:remarks>
				<maml:para>This command displays progress of a for loop. </maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 2 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>for($i = 1; $i -lt 101; $i++ ) {write-progress Updating progress-&gt; -perc $i} for($i = 1; $i -lt 101; $i++ ) { write-progress Updating progress -percentcomplete $i -id  1}</dev:code>
  			<dev:remarks>
				<maml:para>This example displays progress of two nested for loops.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para>Updating
  progress
  [oooooooooooooooooo                                                       ]

Secondary updating
  Secondary Progress
  [oooooooooooooooooo                                                       ]</maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 3 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$events = get-eventlog -logname system
$events | foreach-object -begin {clear-host;$i=0;$out=&quot;&quot;} `
-process {if($_.message -like &quot;*bios*&quot;) {$out=$out + $_.Message};
$i = $i+1;`
write-progress -activity &quot;Searching Events&quot; `
-status &quot;Progress:&quot; -percentcomplete ($i/$events.count*100)} `
-end {$out}</dev:code>
  			<dev:remarks>
				<maml:para>This command displays progress while searching for the string &quot;bios&quot; in system event log messages. In the first line of the command, the Get-EventLog cmdlet is used to retrieve and store the events from the system log in the $events variable. In the second line, the events are piped to the ForEach-Object cmdlet. Before processing begins, the Clear-Host cmdlet is used to clear the screen, a counter variable, $i, is set to zero and an output variable, $out, is set to the empty string. In the Process script block of the ForEach-Object cmdlet, on the third line, the message property of each incoming object, represented by the $_ variable, is examined to determine whether it includes the string &quot;bios&quot;. If it includes the string, the message is added to the output variable, $out. In the fourth line of the command, the counter variable $i is increment to record that another event has been examined. Next, the Write-Progress cmdlet is called with three parameters specified. The first two parameters, Activity and Status, represent header information that appears above the progress bar. The PercentComplete parameter value is calculated by dividing the number of events that have been processed ($i) by the total number of events retrieved ($events.count) and then multiplying by 100. In the last line, the End parameter of the ForEach-Object cmdlet is used to display the messages that included the string &quot;bios&quot;, which are stored in the $out variable.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Write-Verbose</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Error</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Debug</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Output</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Warning</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Verbose
		</command:name>
		<maml:description>
			<maml:para>Writes a string to the verbose display of the host.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>write</command:verb>
		<command:noun>verbose</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Writes a string to the verbose display of the host. The value of the $VerbosePreference variable determines whether or not the string is displayed in the console window. To see the value of the variable, type $VerbosePreference. Valid values are: SilentlyContinue, Stop, Continue and Inquire. To set the value of the variable in the current session, type $VerbosePreference = &quot;&lt;value&gt;&quot;. If $VerbosePreference is set to SilentlyContinue, running Write-Verbose does not display anything to the console. For all other values of $verbosepreference, the cmdlet displays its message to the console and either continues, stops or asks the user whether it should continue.

Using the Write-Verbose cmdlet to display detailed information in a script lets the users of the script control whether or not to display that detailed information by setting the value of the $VerbosePreference variable. </maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Verbose</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>message</maml:name>
				<maml:description><maml:para>Specifies the message to display.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>message</maml:name>
			<maml:description>
				<maml:para>Specifies the message to display.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue></dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name></maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          For more information, type &quot;Get-Help Write-Verbose -detailed&quot;. For technical information, type &quot;Get-Help Write-Verbose -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>$verbosepreference = &quot;silentlycontinue&quot;
write-verbose &quot;test&quot;
$verboseprefernce = &quot;continue&quot;
write-verbose &quot;test&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command sets the $verbosepreference variable to SilentlyContinue. It then uses the Write-Verbose cmdlet to display the message 'test'. Nothing is displayed because of the value of the $verbosepreference variable. The $verbosepreference variable value is then changed to Continue and the next call to Write-Verbose displays the message 'test' as a result.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Error</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Output</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Debug</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Progress</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Warning</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


<command:command xmlns:maml="http://schemas.microsoft.com/maml/2004/10" xmlns:command="http://schemas.microsoft.com/maml/dev/command/2004/10" xmlns:dev="http://schemas.microsoft.com/maml/dev/2004/10">
	<command:details>
		<command:name>
                   Write-Warning
		</command:name>
		<maml:description>
			<maml:para>Writes a warning message.</maml:para>
		</maml:description>
		<maml:copyright>
			<maml:para></maml:para>
		</maml:copyright>
		<command:verb>write</command:verb>
		<command:noun>warning</command:noun>
		<dev:version></dev:version>
	</command:details>
	<maml:description>
		<maml:para>Writes a warning message. The message is sent directly to the host. Whether the message is displayed in the console depends upon the value of the $WarningPreference variable. Type $WarningPreference to see its current value. To set the variable for the session, type $WarningPreference = &quot;&lt;value&gt;&quot;. The valid values are: SilentlyContinue, Stop, Continue and Inquire. If the value is SilentlyContinue, Write-Warning does not display a message to the console. When the message is displayed, reverse video is used to highlight it.</maml:para>
	</maml:description>
	<!-- Cmdlet syntax section-->
	<command:syntax>
		<command:syntaxItem>
			<maml:name>Write-Warning</maml:name>
			<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
				<maml:name>message</maml:name>
				<maml:description><maml:para>Specifies the warning message.</maml:para></maml:description>
				<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			</command:parameter>
		</command:syntaxItem>
	</command:syntax>
	<!-- Cmdlet parameter section  -->
	<command:parameters>
		<command:parameter required="true" variableLength="false" globbing="false" pipelineInput="true (ByValue)" position="1">
			<maml:name>message</maml:name>
			<maml:description>
				<maml:para>Specifies the warning message.</maml:para>
								
			</maml:description>
			<command:parameterValue required="true" variableLength="false">string</command:parameterValue>
			<dev:type>
				<maml:name>string</maml:name>
				<maml:uri/>
			</dev:type>
			<dev:defaultValue>none</dev:defaultValue>
		</command:parameter>
	</command:parameters>
	<!-- Input - Output section-->
	<command:inputTypes>
		<command:inputType>
			<dev:type>
				<maml:name>String</maml:name>
				<maml:uri/>
				<maml:description>
					<maml:para>
						<!-- description  -->
						The warning message to display.
					</maml:para>
				</maml:description>
			</dev:type>
			<maml:description></maml:description>
		</command:inputType>
	</command:inputTypes>
	<command:returnValues>
		<command:returnValue>
			<dev:type>
				<maml:name>none</maml:name>
				<maml:uri />
				<maml:description>
					<maml:para>
						<!-- description  -->
						none
					</maml:para>
				</maml:description>
			</dev:type>   
			<maml:description></maml:description> 
		</command:returnValue>
	</command:returnValues>
	<command:terminatingErrors />
	<command:nonTerminatingErrors />
	<!-- Notes section  -->
	<maml:alertSet>
		<maml:title></maml:title>
		<maml:alert>
			<maml:para>
                          To determine valid values for a preference variable like $WarningPreference, you can attempt to set it to a string of random characters. The resulting error message will list the valid values.

For more information, type &quot;Get-Help Write-Warning -detailed&quot;. For technical information, type &quot;Get-Help Write-Warning -full&quot;.

When specifying multiple values for a parameter, use commas to separate the values. For example, &quot;&lt;parameter-name&gt; &lt;value1&gt;, &lt;value2&gt;&quot;.
                        </maml:para>
		</maml:alert>
		<maml:alert>
			<maml:para></maml:para>
		</maml:alert>
	</maml:alertSet>
	<!-- Example section  --> 
	<command:examples>
		<command:example>
			<maml:title>
				-------------------------- EXAMPLE 1 --------------------------
			</maml:title> 
			<maml:introduction>
				<maml:para>C:\PS&gt;</maml:para>
			</maml:introduction> 
  			<dev:code>write-warning &quot;This is only a test warning.&quot;</dev:code>
  			<dev:remarks>
				<maml:para>This command displays the message &quot;WARNING: This is only a test warning.&quot; unless the value of $WarningPreference is SilentlyContinue.</maml:para>
				<maml:para></maml:para>				
				<maml:para></maml:para>
   				<maml:para></maml:para>
				<maml:para></maml:para>
  			</dev:remarks>
			<command:commandLines>
				<command:commandLine>
					<command:commandText></command:commandText>
				</command:commandLine>
			</command:commandLines>
		</command:example>
	</command:examples>
	<!-- Link section  -->
	<maml:relatedLinks>
		<maml:navigationLink>
			<maml:linkText>Write-Debug</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Error</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Host</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Output</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Progress</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
		<maml:navigationLink>
			<maml:linkText>Write-Verbose</maml:linkText>
			<maml:uri/>
		</maml:navigationLink>
	</maml:relatedLinks>
</command:command>


</helpItems>
